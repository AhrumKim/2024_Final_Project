
Scheduler.elf:     file format elf32-tricore

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bmhd_0       00000020  80000000  80000000  00000254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .bmhd_1       00000020  80020000  80020000  000027e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .startup      00000010  80000020  80000020  00000274  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .interface_const 00000000  80000040  80000040  00002a24  2**0
                  CONTENTS
  4 .traptab_tc0  00000100  80000100  80000100  000002a0  2**5
                  CONTENTS, ALLOC, LOAD, CODE
  5 .rodata       000001e8  80000200  80000200  000003a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .CPU2.zbss    00000000  50000000  50000000  00002a24  2**0
                  CONTENTS
  7 .CPU2.bss     00000000  50000000  50000000  00002a24  2**0
                  CONTENTS
  8 .CPU1.zbss    00000000  60000000  60000000  00002a24  2**0
                  CONTENTS
  9 .CPU1.bss     00000000  6000104c  6000104c  00002a24  2**0
                  CONTENTS
 10 .CPU0.zbss    00000000  70000000  70000000  00002a24  2**0
                  CONTENTS
 11 .CPU0.bss     00000000  70000000  70000000  00002a24  2**0
                  CONTENTS
 12 .zbss         00000000  60000000  801f6300  00000000  2**0
                  ALLOC
 13 .sbss         00000000  60000000  801f6300  00000000  2**0
                  ALLOC, SMALL_DATA
 14 .bss          00000044  60000008  801f6304  00002a28  2**3
                  ALLOC
 15 .CPU2.zdata   00000000  50000000  50000000  00002a24  2**0
                  CONTENTS
 16 .CPU2.data    00000000  50000000  50000000  00002a24  2**0
                  CONTENTS
 17 .CPU1.zdata   00000000  60000000  60000000  00002a24  2**0
                  CONTENTS
 18 .CPU1.data    00000000  6000104c  6000104c  00002a24  2**0
                  CONTENTS
 19 .CPU0.zdata   00000000  70000000  70000000  00002a24  2**0
                  CONTENTS
 20 .CPU0.data    00000000  70000000  70000000  00002a24  2**0
                  CONTENTS
 21 .zdata        00000000  60000000  801f6304  00002a24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 22 .sdata        00000000  60000000  801f6304  00002a24  2**0
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
 23 .data         00000004  60000000  801f6300  00002a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 24 .lmu_zdata    00000000  90000000  90000000  00002a24  2**0
                  CONTENTS
 25 .lmu_sdata    00000000  90000000  90000000  00002a24  2**0
                  CONTENTS
 26 .lmu_data     00000000  90000000  90000000  00002a24  2**0
                  CONTENTS
 27 .CPU0.psram_text 00000000  70100000  70100000  00002a24  2**0
                  CONTENTS
 28 .CPU1.psram_text 00000000  60100000  60100000  00002a24  2**0
                  CONTENTS
 29 .CPU2.psram_text 00000000  50100000  50100000  00002a24  2**0
                  CONTENTS
 30 .text         0000222c  800003e8  800003e8  00000588  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .init         0000000c  80002614  80002614  000027b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .fini         00000008  80002620  80002620  000027c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .eh_frame     00000000  80002628  80002628  00002a24  2**0
                  CONTENTS
 34 .gcc_except_table 00000000  80002628  80002628  00002a24  2**0
                  CONTENTS
 35 .ctors        00000010  80002628  80002628  000027c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 36 .dtors        00000010  80002638  80002638  000027d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 37 .traptab_tc2  00000100  801f6100  801f6100  00002820  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 38 .traptab_tc1  00000100  801f6200  801f6200  00002920  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 39 .heap         00001000  6000004c  801f6304  00002a24  2**0
                  ALLOC
 40 .CPU2.ustack  00000800  5001ae00  5001ae00  00000254  2**0
                  ALLOC
 41 .CPU2.istack  00000400  5001b700  5001b700  00000254  2**0
                  ALLOC
 42 .CPU2.csa     00002000  5001bc00  5001bc00  00000254  2**0
                  ALLOC
 43 .CPU1.ustack  00000800  6001ae00  6001ae00  00000254  2**0
                  ALLOC
 44 .CPU1.istack  00000400  6001b700  6001b700  00000254  2**0
                  ALLOC
 45 .CPU1.csa     00002000  6001bc00  6001bc00  00000254  2**0
                  ALLOC
 46 .CPU0.ustack  00000800  70018e00  70018e00  00000254  2**0
                  ALLOC
 47 .CPU0.istack  00000400  70019700  70019700  00000254  2**0
                  ALLOC
 48 .CPU0.csa     00002000  70019c00  70019c00  00000254  2**0
                  ALLOC
 49 .inttab_tc0_000 00000000  801f4000  801f4000  00002a24  2**0
                  CONTENTS
 50 .inttab_tc0_001 00000000  801f4020  801f4020  00002a24  2**0
                  CONTENTS
 51 .inttab_tc0_002 00000000  801f4040  801f4040  00002a24  2**0
                  CONTENTS
 52 .inttab_tc0_003 00000000  801f4060  801f4060  00002a24  2**0
                  CONTENTS
 53 .inttab_tc0_004 00000000  801f4080  801f4080  00002a24  2**0
                  CONTENTS
 54 .inttab_tc0_005 00000000  801f40a0  801f40a0  00002a24  2**0
                  CONTENTS
 55 .inttab_tc0_006 00000000  801f40c0  801f40c0  00002a24  2**0
                  CONTENTS
 56 .inttab_tc0_007 00000000  801f40e0  801f40e0  00002a24  2**0
                  CONTENTS
 57 .inttab_tc0_008 00000000  801f4100  801f4100  00002a24  2**0
                  CONTENTS
 58 .inttab_tc0_009 00000000  801f4120  801f4120  00002a24  2**0
                  CONTENTS
 59 .inttab_tc0_00A 00000000  801f4140  801f4140  00002a24  2**0
                  CONTENTS
 60 .inttab_tc0_00B 00000000  801f4160  801f4160  00002a24  2**0
                  CONTENTS
 61 .inttab_tc0_00C 00000000  801f4180  801f4180  00002a24  2**0
                  CONTENTS
 62 .inttab_tc0_00D 00000000  801f41a0  801f41a0  00002a24  2**0
                  CONTENTS
 63 .inttab_tc0_00E 00000000  801f41c0  801f41c0  00002a24  2**0
                  CONTENTS
 64 .inttab_tc0_00F 00000000  801f41e0  801f41e0  00002a24  2**0
                  CONTENTS
 65 .inttab_tc0_010 00000000  801f4200  801f4200  00002a24  2**0
                  CONTENTS
 66 .inttab_tc0_011 00000000  801f4220  801f4220  00002a24  2**0
                  CONTENTS
 67 .inttab_tc0_012 00000000  801f4240  801f4240  00002a24  2**0
                  CONTENTS
 68 .inttab_tc0_013 00000000  801f4260  801f4260  00002a24  2**0
                  CONTENTS
 69 .inttab_tc0_014 00000000  801f4280  801f4280  00002a24  2**0
                  CONTENTS
 70 .inttab_tc0_015 00000000  801f42a0  801f42a0  00002a24  2**0
                  CONTENTS
 71 .inttab_tc0_016 00000000  801f42c0  801f42c0  00002a24  2**0
                  CONTENTS
 72 .inttab_tc0_017 00000000  801f42e0  801f42e0  00002a24  2**0
                  CONTENTS
 73 .inttab_tc0_018 00000000  801f4300  801f4300  00002a24  2**0
                  CONTENTS
 74 .inttab_tc0_019 00000000  801f4320  801f4320  00002a24  2**0
                  CONTENTS
 75 .inttab_tc0_01A 00000000  801f4340  801f4340  00002a24  2**0
                  CONTENTS
 76 .inttab_tc0_01B 00000000  801f4360  801f4360  00002a24  2**0
                  CONTENTS
 77 .inttab_tc0_01C 00000000  801f4380  801f4380  00002a24  2**0
                  CONTENTS
 78 .inttab_tc0_01D 00000000  801f43a0  801f43a0  00002a24  2**0
                  CONTENTS
 79 .inttab_tc0_01E 00000000  801f43c0  801f43c0  00002a24  2**0
                  CONTENTS
 80 .inttab_tc0_01F 00000000  801f43e0  801f43e0  00002a24  2**0
                  CONTENTS
 81 .inttab_tc0_020 00000000  801f4400  801f4400  00002a24  2**0
                  CONTENTS
 82 .inttab_tc0_021 00000000  801f4420  801f4420  00002a24  2**0
                  CONTENTS
 83 .inttab_tc0_022 00000000  801f4440  801f4440  00002a24  2**0
                  CONTENTS
 84 .inttab_tc0_023 00000000  801f4460  801f4460  00002a24  2**0
                  CONTENTS
 85 .inttab_tc0_024 00000000  801f4480  801f4480  00002a24  2**0
                  CONTENTS
 86 .inttab_tc0_025 00000000  801f44a0  801f44a0  00002a24  2**0
                  CONTENTS
 87 .inttab_tc0_026 00000000  801f44c0  801f44c0  00002a24  2**0
                  CONTENTS
 88 .inttab_tc0_027 00000000  801f44e0  801f44e0  00002a24  2**0
                  CONTENTS
 89 .inttab_tc0_028 00000000  801f4500  801f4500  00002a24  2**0
                  CONTENTS
 90 .inttab_tc0_029 00000000  801f4520  801f4520  00002a24  2**0
                  CONTENTS
 91 .inttab_tc0_02A 00000000  801f4540  801f4540  00002a24  2**0
                  CONTENTS
 92 .inttab_tc0_02B 00000000  801f4560  801f4560  00002a24  2**0
                  CONTENTS
 93 .inttab_tc0_02C 00000000  801f4580  801f4580  00002a24  2**0
                  CONTENTS
 94 .inttab_tc0_02D 00000000  801f45a0  801f45a0  00002a24  2**0
                  CONTENTS
 95 .inttab_tc0_02E 00000000  801f45c0  801f45c0  00002a24  2**0
                  CONTENTS
 96 .inttab_tc0_02F 00000000  801f45e0  801f45e0  00002a24  2**0
                  CONTENTS
 97 .inttab_tc0_030 00000000  801f4600  801f4600  00002a24  2**0
                  CONTENTS
 98 .inttab_tc0_031 00000000  801f4620  801f4620  00002a24  2**0
                  CONTENTS
 99 .inttab_tc0_032 00000000  801f4640  801f4640  00002a24  2**0
                  CONTENTS
100 .inttab_tc0_033 00000000  801f4660  801f4660  00002a24  2**0
                  CONTENTS
101 .inttab_tc0_034 00000000  801f4680  801f4680  00002a24  2**0
                  CONTENTS
102 .inttab_tc0_035 00000000  801f46a0  801f46a0  00002a24  2**0
                  CONTENTS
103 .inttab_tc0_036 00000000  801f46c0  801f46c0  00002a24  2**0
                  CONTENTS
104 .inttab_tc0_037 00000000  801f46e0  801f46e0  00002a24  2**0
                  CONTENTS
105 .inttab_tc0_038 00000000  801f4700  801f4700  00002a24  2**0
                  CONTENTS
106 .inttab_tc0_039 00000000  801f4720  801f4720  00002a24  2**0
                  CONTENTS
107 .inttab_tc0_03A 00000000  801f4740  801f4740  00002a24  2**0
                  CONTENTS
108 .inttab_tc0_03B 00000000  801f4760  801f4760  00002a24  2**0
                  CONTENTS
109 .inttab_tc0_03C 00000000  801f4780  801f4780  00002a24  2**0
                  CONTENTS
110 .inttab_tc0_03D 00000000  801f47a0  801f47a0  00002a24  2**0
                  CONTENTS
111 .inttab_tc0_03E 00000000  801f47c0  801f47c0  00002a24  2**0
                  CONTENTS
112 .inttab_tc0_03F 00000000  801f47e0  801f47e0  00002a24  2**0
                  CONTENTS
113 .inttab_tc0_040 00000000  801f4800  801f4800  00002a24  2**0
                  CONTENTS
114 .inttab_tc0_041 00000000  801f4820  801f4820  00002a24  2**0
                  CONTENTS
115 .inttab_tc0_042 00000000  801f4840  801f4840  00002a24  2**0
                  CONTENTS
116 .inttab_tc0_043 00000000  801f4860  801f4860  00002a24  2**0
                  CONTENTS
117 .inttab_tc0_044 00000000  801f4880  801f4880  00002a24  2**0
                  CONTENTS
118 .inttab_tc0_045 00000000  801f48a0  801f48a0  00002a24  2**0
                  CONTENTS
119 .inttab_tc0_046 00000000  801f48c0  801f48c0  00002a24  2**0
                  CONTENTS
120 .inttab_tc0_047 00000000  801f48e0  801f48e0  00002a24  2**0
                  CONTENTS
121 .inttab_tc0_048 00000000  801f4900  801f4900  00002a24  2**0
                  CONTENTS
122 .inttab_tc0_049 00000000  801f4920  801f4920  00002a24  2**0
                  CONTENTS
123 .inttab_tc0_04A 00000000  801f4940  801f4940  00002a24  2**0
                  CONTENTS
124 .inttab_tc0_04B 00000000  801f4960  801f4960  00002a24  2**0
                  CONTENTS
125 .inttab_tc0_04C 00000000  801f4980  801f4980  00002a24  2**0
                  CONTENTS
126 .inttab_tc0_04D 00000000  801f49a0  801f49a0  00002a24  2**0
                  CONTENTS
127 .inttab_tc0_04E 00000000  801f49c0  801f49c0  00002a24  2**0
                  CONTENTS
128 .inttab_tc0_04F 00000000  801f49e0  801f49e0  00002a24  2**0
                  CONTENTS
129 .inttab_tc0_050 00000000  801f4a00  801f4a00  00002a24  2**0
                  CONTENTS
130 .inttab_tc0_051 00000000  801f4a20  801f4a20  00002a24  2**0
                  CONTENTS
131 .inttab_tc0_052 00000000  801f4a40  801f4a40  00002a24  2**0
                  CONTENTS
132 .inttab_tc0_053 00000000  801f4a60  801f4a60  00002a24  2**0
                  CONTENTS
133 .inttab_tc0_054 00000000  801f4a80  801f4a80  00002a24  2**0
                  CONTENTS
134 .inttab_tc0_055 00000000  801f4aa0  801f4aa0  00002a24  2**0
                  CONTENTS
135 .inttab_tc0_056 00000000  801f4ac0  801f4ac0  00002a24  2**0
                  CONTENTS
136 .inttab_tc0_057 00000000  801f4ae0  801f4ae0  00002a24  2**0
                  CONTENTS
137 .inttab_tc0_058 00000000  801f4b00  801f4b00  00002a24  2**0
                  CONTENTS
138 .inttab_tc0_059 00000000  801f4b20  801f4b20  00002a24  2**0
                  CONTENTS
139 .inttab_tc0_05A 00000000  801f4b40  801f4b40  00002a24  2**0
                  CONTENTS
140 .inttab_tc0_05B 00000000  801f4b60  801f4b60  00002a24  2**0
                  CONTENTS
141 .inttab_tc0_05C 00000000  801f4b80  801f4b80  00002a24  2**0
                  CONTENTS
142 .inttab_tc0_05D 00000000  801f4ba0  801f4ba0  00002a24  2**0
                  CONTENTS
143 .inttab_tc0_05E 00000000  801f4bc0  801f4bc0  00002a24  2**0
                  CONTENTS
144 .inttab_tc0_05F 00000000  801f4be0  801f4be0  00002a24  2**0
                  CONTENTS
145 .inttab_tc0_060 00000000  801f4c00  801f4c00  00002a24  2**0
                  CONTENTS
146 .inttab_tc0_061 00000000  801f4c20  801f4c20  00002a24  2**0
                  CONTENTS
147 .inttab_tc0_062 00000000  801f4c40  801f4c40  00002a24  2**0
                  CONTENTS
148 .inttab_tc0_063 00000000  801f4c60  801f4c60  00002a24  2**0
                  CONTENTS
149 .inttab_tc0_064 0000000e  801f4c80  801f4c80  00002808  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .inttab_tc0_065 00000000  801f4ca0  801f4ca0  00002a24  2**0
                  CONTENTS
151 .inttab_tc0_066 00000000  801f4cc0  801f4cc0  00002a24  2**0
                  CONTENTS
152 .inttab_tc0_067 00000000  801f4ce0  801f4ce0  00002a24  2**0
                  CONTENTS
153 .inttab_tc0_068 00000000  801f4d00  801f4d00  00002a24  2**0
                  CONTENTS
154 .inttab_tc0_069 00000000  801f4d20  801f4d20  00002a24  2**0
                  CONTENTS
155 .inttab_tc0_06A 00000000  801f4d40  801f4d40  00002a24  2**0
                  CONTENTS
156 .inttab_tc0_06B 00000000  801f4d60  801f4d60  00002a24  2**0
                  CONTENTS
157 .inttab_tc0_06C 00000000  801f4d80  801f4d80  00002a24  2**0
                  CONTENTS
158 .inttab_tc0_06D 00000000  801f4da0  801f4da0  00002a24  2**0
                  CONTENTS
159 .inttab_tc0_06E 00000000  801f4dc0  801f4dc0  00002a24  2**0
                  CONTENTS
160 .inttab_tc0_06F 00000000  801f4de0  801f4de0  00002a24  2**0
                  CONTENTS
161 .inttab_tc0_070 00000000  801f4e00  801f4e00  00002a24  2**0
                  CONTENTS
162 .inttab_tc0_071 00000000  801f4e20  801f4e20  00002a24  2**0
                  CONTENTS
163 .inttab_tc0_072 00000000  801f4e40  801f4e40  00002a24  2**0
                  CONTENTS
164 .inttab_tc0_073 00000000  801f4e60  801f4e60  00002a24  2**0
                  CONTENTS
165 .inttab_tc0_074 00000000  801f4e80  801f4e80  00002a24  2**0
                  CONTENTS
166 .inttab_tc0_075 00000000  801f4ea0  801f4ea0  00002a24  2**0
                  CONTENTS
167 .inttab_tc0_076 00000000  801f4ec0  801f4ec0  00002a24  2**0
                  CONTENTS
168 .inttab_tc0_077 00000000  801f4ee0  801f4ee0  00002a24  2**0
                  CONTENTS
169 .inttab_tc0_078 00000000  801f4f00  801f4f00  00002a24  2**0
                  CONTENTS
170 .inttab_tc0_079 00000000  801f4f20  801f4f20  00002a24  2**0
                  CONTENTS
171 .inttab_tc0_07A 00000000  801f4f40  801f4f40  00002a24  2**0
                  CONTENTS
172 .inttab_tc0_07B 00000000  801f4f60  801f4f60  00002a24  2**0
                  CONTENTS
173 .inttab_tc0_07C 00000000  801f4f80  801f4f80  00002a24  2**0
                  CONTENTS
174 .inttab_tc0_07D 00000000  801f4fa0  801f4fa0  00002a24  2**0
                  CONTENTS
175 .inttab_tc0_07E 00000000  801f4fc0  801f4fc0  00002a24  2**0
                  CONTENTS
176 .inttab_tc0_07F 00000000  801f4fe0  801f4fe0  00002a24  2**0
                  CONTENTS
177 .inttab_tc0_080 00000000  801f5000  801f5000  00002a24  2**0
                  CONTENTS
178 .inttab_tc0_081 00000000  801f5020  801f5020  00002a24  2**0
                  CONTENTS
179 .inttab_tc0_082 00000000  801f5040  801f5040  00002a24  2**0
                  CONTENTS
180 .inttab_tc0_083 00000000  801f5060  801f5060  00002a24  2**0
                  CONTENTS
181 .inttab_tc0_084 00000000  801f5080  801f5080  00002a24  2**0
                  CONTENTS
182 .inttab_tc0_085 00000000  801f50a0  801f50a0  00002a24  2**0
                  CONTENTS
183 .inttab_tc0_086 00000000  801f50c0  801f50c0  00002a24  2**0
                  CONTENTS
184 .inttab_tc0_087 00000000  801f50e0  801f50e0  00002a24  2**0
                  CONTENTS
185 .inttab_tc0_088 00000000  801f5100  801f5100  00002a24  2**0
                  CONTENTS
186 .inttab_tc0_089 00000000  801f5120  801f5120  00002a24  2**0
                  CONTENTS
187 .inttab_tc0_08A 00000000  801f5140  801f5140  00002a24  2**0
                  CONTENTS
188 .inttab_tc0_08B 00000000  801f5160  801f5160  00002a24  2**0
                  CONTENTS
189 .inttab_tc0_08C 00000000  801f5180  801f5180  00002a24  2**0
                  CONTENTS
190 .inttab_tc0_08D 00000000  801f51a0  801f51a0  00002a24  2**0
                  CONTENTS
191 .inttab_tc0_08E 00000000  801f51c0  801f51c0  00002a24  2**0
                  CONTENTS
192 .inttab_tc0_08F 00000000  801f51e0  801f51e0  00002a24  2**0
                  CONTENTS
193 .inttab_tc0_090 00000000  801f5200  801f5200  00002a24  2**0
                  CONTENTS
194 .inttab_tc0_091 00000000  801f5220  801f5220  00002a24  2**0
                  CONTENTS
195 .inttab_tc0_092 00000000  801f5240  801f5240  00002a24  2**0
                  CONTENTS
196 .inttab_tc0_093 00000000  801f5260  801f5260  00002a24  2**0
                  CONTENTS
197 .inttab_tc0_094 00000000  801f5280  801f5280  00002a24  2**0
                  CONTENTS
198 .inttab_tc0_095 00000000  801f52a0  801f52a0  00002a24  2**0
                  CONTENTS
199 .inttab_tc0_096 00000000  801f52c0  801f52c0  00002a24  2**0
                  CONTENTS
200 .inttab_tc0_097 00000000  801f52e0  801f52e0  00002a24  2**0
                  CONTENTS
201 .inttab_tc0_098 00000000  801f5300  801f5300  00002a24  2**0
                  CONTENTS
202 .inttab_tc0_099 00000000  801f5320  801f5320  00002a24  2**0
                  CONTENTS
203 .inttab_tc0_09A 00000000  801f5340  801f5340  00002a24  2**0
                  CONTENTS
204 .inttab_tc0_09B 00000000  801f5360  801f5360  00002a24  2**0
                  CONTENTS
205 .inttab_tc0_09C 00000000  801f5380  801f5380  00002a24  2**0
                  CONTENTS
206 .inttab_tc0_09D 00000000  801f53a0  801f53a0  00002a24  2**0
                  CONTENTS
207 .inttab_tc0_09E 00000000  801f53c0  801f53c0  00002a24  2**0
                  CONTENTS
208 .inttab_tc0_09F 00000000  801f53e0  801f53e0  00002a24  2**0
                  CONTENTS
209 .inttab_tc0_0A0 00000000  801f5400  801f5400  00002a24  2**0
                  CONTENTS
210 .inttab_tc0_0A1 00000000  801f5420  801f5420  00002a24  2**0
                  CONTENTS
211 .inttab_tc0_0A2 00000000  801f5440  801f5440  00002a24  2**0
                  CONTENTS
212 .inttab_tc0_0A3 00000000  801f5460  801f5460  00002a24  2**0
                  CONTENTS
213 .inttab_tc0_0A4 00000000  801f5480  801f5480  00002a24  2**0
                  CONTENTS
214 .inttab_tc0_0A5 00000000  801f54a0  801f54a0  00002a24  2**0
                  CONTENTS
215 .inttab_tc0_0A6 00000000  801f54c0  801f54c0  00002a24  2**0
                  CONTENTS
216 .inttab_tc0_0A7 00000000  801f54e0  801f54e0  00002a24  2**0
                  CONTENTS
217 .inttab_tc0_0A8 00000000  801f5500  801f5500  00002a24  2**0
                  CONTENTS
218 .inttab_tc0_0A9 00000000  801f5520  801f5520  00002a24  2**0
                  CONTENTS
219 .inttab_tc0_0AA 00000000  801f5540  801f5540  00002a24  2**0
                  CONTENTS
220 .inttab_tc0_0AB 00000000  801f5560  801f5560  00002a24  2**0
                  CONTENTS
221 .inttab_tc0_0AC 00000000  801f5580  801f5580  00002a24  2**0
                  CONTENTS
222 .inttab_tc0_0AD 00000000  801f55a0  801f55a0  00002a24  2**0
                  CONTENTS
223 .inttab_tc0_0AE 00000000  801f55c0  801f55c0  00002a24  2**0
                  CONTENTS
224 .inttab_tc0_0AF 00000000  801f55e0  801f55e0  00002a24  2**0
                  CONTENTS
225 .inttab_tc0_0B0 00000000  801f5600  801f5600  00002a24  2**0
                  CONTENTS
226 .inttab_tc0_0B1 00000000  801f5620  801f5620  00002a24  2**0
                  CONTENTS
227 .inttab_tc0_0B2 00000000  801f5640  801f5640  00002a24  2**0
                  CONTENTS
228 .inttab_tc0_0B3 00000000  801f5660  801f5660  00002a24  2**0
                  CONTENTS
229 .inttab_tc0_0B4 00000000  801f5680  801f5680  00002a24  2**0
                  CONTENTS
230 .inttab_tc0_0B5 00000000  801f56a0  801f56a0  00002a24  2**0
                  CONTENTS
231 .inttab_tc0_0B6 00000000  801f56c0  801f56c0  00002a24  2**0
                  CONTENTS
232 .inttab_tc0_0B7 00000000  801f56e0  801f56e0  00002a24  2**0
                  CONTENTS
233 .inttab_tc0_0B8 00000000  801f5700  801f5700  00002a24  2**0
                  CONTENTS
234 .inttab_tc0_0B9 00000000  801f5720  801f5720  00002a24  2**0
                  CONTENTS
235 .inttab_tc0_0BA 00000000  801f5740  801f5740  00002a24  2**0
                  CONTENTS
236 .inttab_tc0_0BB 00000000  801f5760  801f5760  00002a24  2**0
                  CONTENTS
237 .inttab_tc0_0BC 00000000  801f5780  801f5780  00002a24  2**0
                  CONTENTS
238 .inttab_tc0_0BD 00000000  801f57a0  801f57a0  00002a24  2**0
                  CONTENTS
239 .inttab_tc0_0BE 00000000  801f57c0  801f57c0  00002a24  2**0
                  CONTENTS
240 .inttab_tc0_0BF 00000000  801f57e0  801f57e0  00002a24  2**0
                  CONTENTS
241 .inttab_tc0_0C0 00000000  801f5800  801f5800  00002a24  2**0
                  CONTENTS
242 .inttab_tc0_0C1 00000000  801f5820  801f5820  00002a24  2**0
                  CONTENTS
243 .inttab_tc0_0C2 00000000  801f5840  801f5840  00002a24  2**0
                  CONTENTS
244 .inttab_tc0_0C3 00000000  801f5860  801f5860  00002a24  2**0
                  CONTENTS
245 .inttab_tc0_0C4 00000000  801f5880  801f5880  00002a24  2**0
                  CONTENTS
246 .inttab_tc0_0C5 00000000  801f58a0  801f58a0  00002a24  2**0
                  CONTENTS
247 .inttab_tc0_0C6 00000000  801f58c0  801f58c0  00002a24  2**0
                  CONTENTS
248 .inttab_tc0_0C7 00000000  801f58e0  801f58e0  00002a24  2**0
                  CONTENTS
249 .inttab_tc0_0C8 00000000  801f5900  801f5900  00002a24  2**0
                  CONTENTS
250 .inttab_tc0_0C9 00000000  801f5920  801f5920  00002a24  2**0
                  CONTENTS
251 .inttab_tc0_0CA 00000000  801f5940  801f5940  00002a24  2**0
                  CONTENTS
252 .inttab_tc0_0CB 00000000  801f5960  801f5960  00002a24  2**0
                  CONTENTS
253 .inttab_tc0_0CC 00000000  801f5980  801f5980  00002a24  2**0
                  CONTENTS
254 .inttab_tc0_0CD 00000000  801f59a0  801f59a0  00002a24  2**0
                  CONTENTS
255 .inttab_tc0_0CE 00000000  801f59c0  801f59c0  00002a24  2**0
                  CONTENTS
256 .inttab_tc0_0CF 00000000  801f59e0  801f59e0  00002a24  2**0
                  CONTENTS
257 .inttab_tc0_0D0 00000000  801f5a00  801f5a00  00002a24  2**0
                  CONTENTS
258 .inttab_tc0_0D1 00000000  801f5a20  801f5a20  00002a24  2**0
                  CONTENTS
259 .inttab_tc0_0D2 00000000  801f5a40  801f5a40  00002a24  2**0
                  CONTENTS
260 .inttab_tc0_0D3 00000000  801f5a60  801f5a60  00002a24  2**0
                  CONTENTS
261 .inttab_tc0_0D4 00000000  801f5a80  801f5a80  00002a24  2**0
                  CONTENTS
262 .inttab_tc0_0D5 00000000  801f5aa0  801f5aa0  00002a24  2**0
                  CONTENTS
263 .inttab_tc0_0D6 00000000  801f5ac0  801f5ac0  00002a24  2**0
                  CONTENTS
264 .inttab_tc0_0D7 00000000  801f5ae0  801f5ae0  00002a24  2**0
                  CONTENTS
265 .inttab_tc0_0D8 00000000  801f5b00  801f5b00  00002a24  2**0
                  CONTENTS
266 .inttab_tc0_0D9 00000000  801f5b20  801f5b20  00002a24  2**0
                  CONTENTS
267 .inttab_tc0_0DA 00000000  801f5b40  801f5b40  00002a24  2**0
                  CONTENTS
268 .inttab_tc0_0DB 00000000  801f5b60  801f5b60  00002a24  2**0
                  CONTENTS
269 .inttab_tc0_0DC 00000000  801f5b80  801f5b80  00002a24  2**0
                  CONTENTS
270 .inttab_tc0_0DD 00000000  801f5ba0  801f5ba0  00002a24  2**0
                  CONTENTS
271 .inttab_tc0_0DE 00000000  801f5bc0  801f5bc0  00002a24  2**0
                  CONTENTS
272 .inttab_tc0_0DF 00000000  801f5be0  801f5be0  00002a24  2**0
                  CONTENTS
273 .inttab_tc0_0E0 00000000  801f5c00  801f5c00  00002a24  2**0
                  CONTENTS
274 .inttab_tc0_0E1 00000000  801f5c20  801f5c20  00002a24  2**0
                  CONTENTS
275 .inttab_tc0_0E2 00000000  801f5c40  801f5c40  00002a24  2**0
                  CONTENTS
276 .inttab_tc0_0E3 00000000  801f5c60  801f5c60  00002a24  2**0
                  CONTENTS
277 .inttab_tc0_0E4 00000000  801f5c80  801f5c80  00002a24  2**0
                  CONTENTS
278 .inttab_tc0_0E5 00000000  801f5ca0  801f5ca0  00002a24  2**0
                  CONTENTS
279 .inttab_tc0_0E6 00000000  801f5cc0  801f5cc0  00002a24  2**0
                  CONTENTS
280 .inttab_tc0_0E7 00000000  801f5ce0  801f5ce0  00002a24  2**0
                  CONTENTS
281 .inttab_tc0_0E8 00000000  801f5d00  801f5d00  00002a24  2**0
                  CONTENTS
282 .inttab_tc0_0E9 00000000  801f5d20  801f5d20  00002a24  2**0
                  CONTENTS
283 .inttab_tc0_0EA 00000000  801f5d40  801f5d40  00002a24  2**0
                  CONTENTS
284 .inttab_tc0_0EB 00000000  801f5d60  801f5d60  00002a24  2**0
                  CONTENTS
285 .inttab_tc0_0EC 00000000  801f5d80  801f5d80  00002a24  2**0
                  CONTENTS
286 .inttab_tc0_0ED 00000000  801f5da0  801f5da0  00002a24  2**0
                  CONTENTS
287 .inttab_tc0_0EE 00000000  801f5dc0  801f5dc0  00002a24  2**0
                  CONTENTS
288 .inttab_tc0_0EF 00000000  801f5de0  801f5de0  00002a24  2**0
                  CONTENTS
289 .inttab_tc0_0F0 00000000  801f5e00  801f5e00  00002a24  2**0
                  CONTENTS
290 .inttab_tc0_0F1 00000000  801f5e20  801f5e20  00002a24  2**0
                  CONTENTS
291 .inttab_tc0_0F2 00000000  801f5e40  801f5e40  00002a24  2**0
                  CONTENTS
292 .inttab_tc0_0F3 00000000  801f5e60  801f5e60  00002a24  2**0
                  CONTENTS
293 .inttab_tc0_0F4 00000000  801f5e80  801f5e80  00002a24  2**0
                  CONTENTS
294 .inttab_tc0_0F5 00000000  801f5ea0  801f5ea0  00002a24  2**0
                  CONTENTS
295 .inttab_tc0_0F6 00000000  801f5ec0  801f5ec0  00002a24  2**0
                  CONTENTS
296 .inttab_tc0_0F7 00000000  801f5ee0  801f5ee0  00002a24  2**0
                  CONTENTS
297 .inttab_tc0_0F8 00000000  801f5f00  801f5f00  00002a24  2**0
                  CONTENTS
298 .inttab_tc0_0F9 00000000  801f5f20  801f5f20  00002a24  2**0
                  CONTENTS
299 .inttab_tc0_0FA 00000000  801f5f40  801f5f40  00002a24  2**0
                  CONTENTS
300 .inttab_tc0_0FB 00000000  801f5f60  801f5f60  00002a24  2**0
                  CONTENTS
301 .inttab_tc0_0FC 00000000  801f5f80  801f5f80  00002a24  2**0
                  CONTENTS
302 .inttab_tc0_0FD 00000000  801f5fa0  801f5fa0  00002a24  2**0
                  CONTENTS
303 .inttab_tc0_0FE 00000000  801f5fc0  801f5fc0  00002a24  2**0
                  CONTENTS
304 .inttab_tc0_0FF 00000000  801f5fe0  801f5fe0  00002a24  2**0
                  CONTENTS
305 .comment      00000082  00000000  00000000  00002a24  2**0
                  CONTENTS, READONLY
306 .debug_aranges 000006c0  00000000  00000000  00002aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
307 .debug_info   00054c8a  00000000  00000000  00003168  2**0
                  CONTENTS, READONLY, DEBUGGING
308 .debug_abbrev 00003d39  00000000  00000000  00057df2  2**0
                  CONTENTS, READONLY, DEBUGGING
309 .debug_line   0000e669  00000000  00000000  0005bb2b  2**0
                  CONTENTS, READONLY, DEBUGGING
310 .debug_frame  00000d90  00000000  00000000  0006a194  2**2
                  CONTENTS, READONLY, DEBUGGING
311 .debug_str    0000105d  00000000  00000000  0006af24  2**0
                  CONTENTS, READONLY, DEBUGGING
312 .debug_loc    00004030  00000000  00000000  0006bf81  2**0
                  CONTENTS, READONLY, DEBUGGING
313 .debug_ranges 00000a08  00000000  00000000  0006ffb8  2**3
                  CONTENTS, READONLY, DEBUGGING
314 .debug_macro  00151bf8  00000000  00000000  000709c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .startup:

80000020 <_START>:
#elif defined(__DCC__)
#pragma section CODE ".start" X
#endif

void _START(void)
{
80000020:	40 ae       	mov.aa %a14,%sp
    __non_return_call(_Core0_start);
80000022:	91 00 00 28 	movh.a %a2,32768
80000026:	d9 22 5c 81 	lea %a2,[%a2]5660 <8000161c <_Core0_start>>
8000002a:	dc 02       	ji %a2
}
8000002c:	00 90       	ret 

8000002e <_START_end>:
8000002e:	08 00       	ld.bu %d0,[%a15]0

Disassembly of section .traptab_tc0:

80000100 <IfxCpu_Trap_vectorTable0>:
#pragma ghs section
#pragma ghs section text=".traptab_cpu0"
#endif
void IfxCpu_Trap_vectorTable0(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80000100:	0d 00 00 02 	svlcx 
80000104:	02 f4       	mov %d4,%d15
80000106:	91 00 00 28 	movh.a %a2,32768
8000010a:	d9 22 1e 71 	lea %a2,[%a2]4574 <800011de <IfxCpu_Trap_memoryManagementError>>
8000010e:	dc 02       	ji %a2
80000110:	00 80       	rfe 
	...
8000011e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80000120:	0d 00 00 02 	svlcx 
80000124:	02 f4       	mov %d4,%d15
80000126:	91 00 00 28 	movh.a %a2,32768
8000012a:	d9 22 0c 81 	lea %a2,[%a2]4620 <8000120c <IfxCpu_Trap_internalProtectionError>>
8000012e:	dc 02       	ji %a2
80000130:	00 80       	rfe 
	...
8000013e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80000140:	0d 00 00 02 	svlcx 
80000144:	02 f4       	mov %d4,%d15
80000146:	91 00 00 28 	movh.a %a2,32768
8000014a:	d9 22 3a 81 	lea %a2,[%a2]4666 <8000123a <IfxCpu_Trap_instructionError>>
8000014e:	dc 02       	ji %a2
80000150:	00 80       	rfe 
	...
8000015e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80000160:	02 f4       	mov %d4,%d15
80000162:	91 00 00 28 	movh.a %a2,32768
80000166:	d9 22 28 91 	lea %a2,[%a2]4712 <80001268 <IfxCpu_Trap_contextManagementError>>
8000016a:	dc 02       	ji %a2
8000016c:	00 80       	rfe 
	...
8000017e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80000180:	0d 00 00 02 	svlcx 
80000184:	02 f4       	mov %d4,%d15
80000186:	91 00 00 28 	movh.a %a2,32768
8000018a:	d9 22 16 a1 	lea %a2,[%a2]4758 <80001296 <IfxCpu_Trap_busError>>
8000018e:	dc 02       	ji %a2
80000190:	00 80       	rfe 
	...
8000019e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
800001a0:	0d 00 00 02 	svlcx 
800001a4:	02 f4       	mov %d4,%d15
800001a6:	91 00 00 28 	movh.a %a2,32768
800001aa:	d9 22 04 b1 	lea %a2,[%a2]4804 <800012c4 <IfxCpu_Trap_assertion>>
800001ae:	dc 02       	ji %a2
800001b0:	00 80       	rfe 
	...
800001be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu0);
800001c0:	0d 00 00 02 	svlcx 
800001c4:	02 f4       	mov %d4,%d15
800001c6:	91 00 00 28 	movh.a %a2,32768
800001ca:	d9 22 38 b1 	lea %a2,[%a2]4856 <800012f8 <IfxCpu_Trap_systemCall_Cpu0>>
800001ce:	dc 02       	ji %a2
800001d0:	00 80       	rfe 
	...
800001de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
800001e0:	0d 00 00 02 	svlcx 
800001e4:	02 f4       	mov %d4,%d15
800001e6:	91 00 00 28 	movh.a %a2,32768
800001ea:	d9 22 3c d1 	lea %a2,[%a2]4988 <8000137c <IfxCpu_Trap_nonMaskableInterrupt>>
800001ee:	dc 02       	ji %a2
800001f0:	00 80       	rfe 
}
800001f2:	00 90       	ret 

800001f4 <IfxCpu_Trap_vectorTable0_end>:
	...

Disassembly of section .text:

800003e8 <deregister_tm_clones>:
800003e8:	7b 00 00 26 	movh %d2,24576
800003ec:	1b 42 00 20 	addi %d2,%d2,4
800003f0:	91 00 00 46 	movh.a %a4,24576
800003f4:	60 22       	mov.a %a2,%d2
800003f6:	d9 44 04 00 	lea %a4,[%a4]4 <60000004 <__TMC_END__>>
800003fa:	7d 42 0a 00 	jeq.a %a2,%a4,8000040e <deregister_tm_clones+0x26>
800003fe:	91 00 00 20 	movh.a %a2,0
80000402:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x270>>
80000406:	bd 02 04 00 	jz.a %a2,8000040e <deregister_tm_clones+0x26>
8000040a:	2d 02 00 00 	calli %a2
8000040e:	00 90       	ret 

80000410 <register_tm_clones>:
80000410:	7b 00 00 26 	movh %d2,24576
80000414:	1b 42 00 20 	addi %d2,%d2,4
80000418:	91 00 00 46 	movh.a %a4,24576
8000041c:	60 22       	mov.a %a2,%d2
8000041e:	d9 44 04 00 	lea %a4,[%a4]4 <60000004 <__TMC_END__>>
80000422:	01 42 20 20 	sub.a %a2,%a2,%a4
80000426:	80 22       	mov.d %d2,%a2
80000428:	8f e2 3f 30 	sha %d3,%d2,-2
8000042c:	8f 12 1e 20 	sh %d2,%d2,-31
80000430:	42 32       	add %d2,%d3
80000432:	8f f2 3f 40 	sha %d4,%d2,-1
80000436:	df 04 0a 00 	jeq %d4,0,8000044a <register_tm_clones+0x3a>
8000043a:	91 00 00 20 	movh.a %a2,0
8000043e:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x270>>
80000442:	bd 02 04 00 	jz.a %a2,8000044a <register_tm_clones+0x3a>
80000446:	2d 02 00 00 	calli %a2
8000044a:	00 90       	ret 

8000044c <__do_global_dtors_aux>:
8000044c:	91 00 00 e6 	movh.a %a14,24576
80000450:	39 e2 08 00 	ld.bu %d2,[%a14]8 <60000008 <completed.1>>
80000454:	df 02 2d 80 	jne %d2,0,800004ae <__do_global_dtors_aux+0x62>
80000458:	91 00 00 38 	movh.a %a3,32768
8000045c:	91 00 00 28 	movh.a %a2,32768
80000460:	d9 33 48 92 	lea %a3,[%a3]9800 <80002648 <__DTOR_END__>>
80000464:	d9 22 7c 82 	lea %a2,[%a2]9788 <8000263c <__DTOR_LIST__>>
80000468:	01 23 20 20 	sub.a %a2,%a3,%a2
8000046c:	80 22       	mov.d %d2,%a2
8000046e:	86 e2       	sha %d2,-2
80000470:	1b f2 ff 8f 	addi %d8,%d2,-1
80000474:	91 00 00 c6 	movh.a %a12,24576
80000478:	7b 00 00 28 	movh %d2,32768
8000047c:	1b c2 63 22 	addi %d2,%d2,9788
80000480:	60 2d       	mov.a %a13,%d2
80000482:	19 c2 0c 00 	ld.w %d2,[%a12]12 <6000000c <dtor_idx.0>>
80000486:	7f 82 0f 80 	jge.u %d2,%d8,800004a4 <__do_global_dtors_aux+0x58>
8000048a:	d9 cc 0c 00 	lea %a12,[%a12]12 <6000000c <dtor_idx.0>>
8000048e:	c2 12       	add %d2,1
80000490:	74 c2       	st.w [%a12],%d2
80000492:	06 22       	sh %d2,2
80000494:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000498:	d4 22       	ld.a %a2,[%a2]
8000049a:	2d 02 00 00 	calli %a2
8000049e:	54 c2       	ld.w %d2,[%a12]
800004a0:	3f 82 f7 ff 	jlt.u %d2,%d8,8000048e <__do_global_dtors_aux+0x42>
800004a4:	6d ff a2 ff 	call 800003e8 <deregister_tm_clones>
800004a8:	82 12       	mov %d2,1
800004aa:	e9 e2 08 00 	st.b [%a14]8 <60000008 <completed.1>>,%d2
800004ae:	00 90       	ret 

800004b0 <frame_dummy>:
800004b0:	6d ff b0 ff 	call 80000410 <register_tm_clones>
800004b4:	00 90       	ret 

800004b6 <Task1ms>:
    }
}


void Task1ms(void)
{
800004b6:	40 ae       	mov.aa %a14,%sp
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
800004b8:	91 40 00 2f 	movh.a %a2,61444
800004bc:	d9 22 00 0b 	lea %a2,[%a2]-20480 <f003b000 <_SMALL_DATA4_+0x60033000>>
800004c0:	7b 40 00 20 	movh %d2,4
800004c4:	c2 42       	add %d2,4
800004c6:	59 22 04 00 	st.w [%a2]4 <f0040004 <_SMALL_DATA4_+0x60038004>>,%d2
    IfxPort_togglePin(PORT_102);
    cnt1ms++;
800004ca:	91 00 00 26 	movh.a %a2,24576
800004ce:	d9 23 2c 00 	lea %a3,[%a2]44 <6000002c <cnt1ms>>
800004d2:	54 32       	ld.w %d2,[%a3]
800004d4:	c2 12       	add %d2,1
800004d6:	59 22 2c 00 	st.w [%a2]44 <6000002c <cnt1ms>>,%d2
}
800004da:	00 90       	ret 

800004dc <Task10ms>:
void Task10ms(void)
{
800004dc:	40 ae       	mov.aa %a14,%sp
800004de:	91 40 00 2f 	movh.a %a2,61444
800004e2:	d9 22 00 0b 	lea %a2,[%a2]-20480 <f003b000 <_SMALL_DATA4_+0x60033000>>
800004e6:	7b 20 00 20 	movh %d2,2
800004ea:	c2 22       	add %d2,2
800004ec:	59 22 04 00 	st.w [%a2]4 <f0040004 <_SMALL_DATA4_+0x60038004>>,%d2
    IfxPort_togglePin(PORT_101);
    cnt10ms++;
800004f0:	91 00 00 26 	movh.a %a2,24576
800004f4:	d9 23 28 00 	lea %a3,[%a2]40 <60000028 <cnt10ms>>
800004f8:	54 32       	ld.w %d2,[%a3]
800004fa:	c2 12       	add %d2,1
800004fc:	59 22 28 00 	st.w [%a2]40 <60000028 <cnt10ms>>,%d2
}
80000500:	00 90       	ret 

80000502 <Task100ms>:
void Task100ms(void)
{
80000502:	40 ae       	mov.aa %a14,%sp
80000504:	91 40 00 2f 	movh.a %a2,61444
80000508:	d9 22 00 0b 	lea %a2,[%a2]-20480 <f003b000 <_SMALL_DATA4_+0x60033000>>
8000050c:	7b 00 02 20 	movh %d2,32
80000510:	1b 02 02 20 	addi %d2,%d2,32
80000514:	59 22 04 00 	st.w [%a2]4 <f0040004 <_SMALL_DATA4_+0x60038004>>,%d2
    IfxPort_togglePin(PORT_105);
    cnt100ms++;
80000518:	91 00 00 26 	movh.a %a2,24576
8000051c:	d9 23 24 00 	lea %a3,[%a2]36 <60000024 <cnt100ms>>
80000520:	54 32       	ld.w %d2,[%a3]
80000522:	c2 12       	add %d2,1
80000524:	59 22 24 00 	st.w [%a2]36 <60000024 <cnt100ms>>,%d2
}
80000528:	00 90       	ret 

8000052a <AppScheduling>:
{
8000052a:	40 ae       	mov.aa %a14,%sp
    if (Scheduler1msFlag == 1)
8000052c:	91 00 00 26 	movh.a %a2,24576
80000530:	19 22 18 00 	ld.w %d2,[%a2]24 <60000018 <Scheduler1msFlag>>
80000534:	df 12 03 00 	jeq %d2,1,8000053a <AppScheduling+0x10>
}
80000538:	00 90       	ret 
        Scheduler1msFlag = 0;
8000053a:	82 02       	mov %d2,0
8000053c:	59 22 18 00 	st.w [%a2]24,%d2
        Task1ms();
80000540:	6d ff bb ff 	call 800004b6 <Task1ms>
        if (Scheduler10msFlag == 1)
80000544:	91 00 00 26 	movh.a %a2,24576
80000548:	19 22 14 00 	ld.w %d2,[%a2]20 <60000014 <Scheduler10msFlag>>
8000054c:	df 12 0f 00 	jeq %d2,1,8000056a <AppScheduling+0x40>
        if (Scheduler100msFlag == 1)
80000550:	91 00 00 26 	movh.a %a2,24576
80000554:	19 22 10 00 	ld.w %d2,[%a2]16 <60000010 <Scheduler100msFlag>>
80000558:	df 12 f0 ff 	jne %d2,1,80000538 <AppScheduling+0xe>
            Scheduler100msFlag = 0;
8000055c:	82 02       	mov %d2,0
8000055e:	59 22 10 00 	st.w [%a2]16 <60000010 <Scheduler100msFlag>>,%d2
            Task100ms();
80000562:	6d ff d0 ff 	call 80000502 <Task100ms>
}
80000566:	1d ff e9 ff 	j 80000538 <AppScheduling+0xe>
            Scheduler10msFlag = 0;
8000056a:	82 02       	mov %d2,0
8000056c:	59 22 14 00 	st.w [%a2]20,%d2
            Task10ms();
80000570:	6d ff b6 ff 	call 800004dc <Task10ms>
80000574:	1d ff ee ff 	j 80000550 <AppScheduling+0x26>

80000578 <init_STM>:
uint32 Scheduler10msFlag = 0;
uint32 Scheduler100msFlag = 0;

//IfxStm_CompareConfig     stmConfig;
void init_STM(void)
{
80000578:	40 ae       	mov.aa %a14,%sp
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000057a:	4d c0 e2 8f 	mfcr %d8,$icr
    return reg.B.IE != 0;
8000057e:	37 08 e1 87 	extr.u %d8,%d8,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80000582:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80000586:	00 00       	nop 
    boolean ISR_State = IfxCpu_disableInterrupts();     // 진행 중인 인터럽트를 반환 및 인터럽트 중지

    IfxStm_enableOcdsSuspend(STM0);                     //OCDS: on chip debugging system [디버깅 시,cpu 중단하면 타이머도 같이 중단되도록 설정(시스템 상태분석 용이)]
80000588:	c5 f4 00 00 	lea %a4,f0000000 <_SMALL_DATA4_+0x5fff8000>
8000058c:	6d 00 9a 00 	call 800006c0 <IfxStm_enableOcdsSuspend>
    IfxStm_initCompareConfig(&stmConfig);                // 비교기능 구조체 초기화 (초기값 정의)
80000590:	91 00 00 c6 	movh.a %a12,24576
80000594:	d9 cc 30 00 	lea %a12,[%a12]48 <60000030 <stmConfig>>
80000598:	40 c4       	mov.aa %a4,%a12
8000059a:	6d 00 70 01 	call 8000087a <IfxStm_initCompareConfig>

    stmConfig.ticks           = 100000u;             // 주기 (비교 값) 설정 1초 뒤 시작
8000059e:	7b 20 00 20 	movh %d2,2
800005a2:	1b 02 6a 28 	addi %d2,%d2,-31072
800005a6:	59 c2 10 00 	st.w [%a12]16 <60000010 <Scheduler100msFlag>>,%d2
    stmConfig.triggerPriority = 100u;                   // STM 모듈에서 발생한 인터럽트 우선순위 설정 100번째 함수
800005aa:	3b 40 06 20 	mov %d2,100
800005ae:	f9 c2 14 00 	st.h [%a12]20 <60000014 <Scheduler10msFlag>>,%d2
    stmConfig.typeOfService   = IfxSrc_Tos_cpu0;        // STM에서 발생한 인터럽트를 cpu0에서 처리하도록 설정
800005b2:	82 02       	mov %d2,0
800005b4:	59 c2 18 00 	st.w [%a12]24 <60000018 <Scheduler1msFlag>>,%d2

    IfxStm_initCompare(STM0, &stmConfig);               // STM0의 비교기 초기화 및 설정 값 적용 (stmConfig로 바꿈)
800005b8:	40 c5       	mov.aa %a5,%a12
800005ba:	c5 f4 00 00 	lea %a4,f0000000 <_SMALL_DATA4_+0x5fff8000>
800005be:	6d 00 b5 00 	call 80000728 <IfxStm_initCompare>
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800005c2:	df 08 04 00 	jeq %d8,0,800005ca <init_STM+0x52>
    {
        __enable();
800005c6:	0d 00 00 03 	enable 

    IfxCpu_restoreInterrupts(ISR_State);                // 진행 중이던 인터럽트 상태 복원
}
800005ca:	00 90       	ret 

800005cc <ISR_STM>:


IFX_INTERRUPT(ISR_STM,0,100);
void ISR_STM(void)
{
800005cc:	40 ae       	mov.aa %a14,%sp
    __enable();
800005ce:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    IfxStm_clearCompareFlag(STM0, stmConfig.comparator);
800005d2:	91 00 00 c6 	movh.a %a12,24576
800005d6:	19 c4 30 00 	ld.w %d4,[%a12]48 <60000030 <stmConfig>>
800005da:	c5 f4 00 00 	lea %a4,f0000000 <_SMALL_DATA4_+0x5fff8000>
800005de:	6d 00 43 00 	call 80000664 <IfxStm_clearCompareFlag>
    IfxStm_increaseCompare(STM0, stmConfig.comparator, 10000000u);     // 비교 값 업데이트 (10000000u를 바꾸면 주기가 바뀜)
800005e2:	19 c2 30 00 	ld.w %d2,[%a12]48 <60000030 <stmConfig>>
}


IFX_INLINE void IfxStm_increaseCompare(Ifx_STM *stm, IfxStm_Comparator comparator, uint32 ticks)
{
    stm->CMP[comparator].B.CMPVAL = stm->CMP[comparator].B.CMPVAL + ticks;
800005e6:	1b c2 00 20 	addi %d2,%d2,12
800005ea:	06 22       	sh %d2,2
800005ec:	60 22       	mov.a %a2,%d2
800005ee:	11 02 00 2f 	addih.a %a2,%a2,61440
800005f2:	54 22       	ld.w %d2,[%a2]
800005f4:	7b 90 09 30 	movh %d3,153
800005f8:	1b 03 68 39 	addi %d3,%d3,-27008
800005fc:	42 32       	add %d2,%d3
800005fe:	74 22       	st.w [%a2],%d2

    counter1ms++;
80000600:	91 00 00 26 	movh.a %a2,24576
80000604:	d9 23 1c 00 	lea %a3,[%a2]28 <6000001c <counter1ms>>
80000608:	54 32       	ld.w %d2,[%a3]
8000060a:	c2 12       	add %d2,1
8000060c:	59 22 1c 00 	st.w [%a2]28 <6000001c <counter1ms>>,%d2

    if((counter1ms % 1) ==0){Scheduler1msFlag = 1;}
80000610:	91 00 00 26 	movh.a %a2,24576
80000614:	82 13       	mov %d3,1
80000616:	59 23 18 00 	st.w [%a2]24 <60000018 <Scheduler1msFlag>>,%d3
    if((counter1ms % 10) ==0){Scheduler10msFlag = 1;}
8000061a:	7b d0 cc 4c 	movh %d4,52429
8000061e:	1b d4 cc 4c 	addi %d4,%d4,-13107
80000622:	73 42 68 40 	mul.u %e4,%d2,%d4
80000626:	8f d5 1f 30 	sh %d3,%d5,-3
8000062a:	53 a3 20 30 	mul %d3,%d3,10
8000062e:	5f 32 07 80 	jne %d2,%d3,8000063c <ISR_STM+0x70>
80000632:	91 00 00 26 	movh.a %a2,24576
80000636:	82 13       	mov %d3,1
80000638:	59 23 14 00 	st.w [%a2]20 <60000014 <Scheduler10msFlag>>,%d3
    if((counter1ms % 100) ==0){Scheduler100msFlag = 1;}
8000063c:	7b c0 1e 45 	movh %d4,20972
80000640:	1b f4 51 48 	addi %d4,%d4,-31457
80000644:	73 42 68 40 	mul.u %e4,%d2,%d4
80000648:	8f b5 1f 30 	sh %d3,%d5,-5
8000064c:	53 43 26 30 	mul %d3,%d3,100
80000650:	5f 32 07 80 	jne %d2,%d3,8000065e <ISR_STM+0x92>
80000654:	91 00 00 26 	movh.a %a2,24576
80000658:	82 12       	mov %d2,1
8000065a:	59 22 10 00 	st.w [%a2]16 <60000010 <Scheduler100msFlag>>,%d2
}
8000065e:	0d 00 40 02 	rslcx 
80000662:	00 80       	rfe 

80000664 <IfxStm_clearCompareFlag>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxStm_clearCompareFlag(Ifx_STM *stm, IfxStm_Comparator comparator)
{
80000664:	40 ae       	mov.aa %a14,%sp
    if (comparator == IfxStm_Comparator_0)
80000666:	df 04 0a 80 	jne %d4,0,8000067a <IfxStm_clearCompareFlag+0x16>
    {
        stm->ISCR.B.CMP0IRR = 1U;
8000066a:	d9 42 00 10 	lea %a2,[%a4]64
8000066e:	19 42 00 10 	ld.w %d2,[%a4]64
80000672:	b7 12 01 20 	insert %d2,%d2,1,0,1
80000676:	74 22       	st.w [%a2],%d2
80000678:	00 90       	ret 
    }
    else if (comparator == IfxStm_Comparator_1)
8000067a:	df 14 03 00 	jeq %d4,1,80000680 <IfxStm_clearCompareFlag+0x1c>
    {
        stm->ISCR.B.CMP1IRR = 1U;
    }
}
8000067e:	00 90       	ret 
        stm->ISCR.B.CMP1IRR = 1U;
80000680:	d9 42 00 10 	lea %a2,[%a4]64
80000684:	19 42 00 10 	ld.w %d2,[%a4]64
80000688:	b7 12 01 21 	insert %d2,%d2,1,2,1
8000068c:	74 22       	st.w [%a2],%d2
}
8000068e:	1d ff f8 ff 	j 8000067e <IfxStm_clearCompareFlag+0x1a>

80000692 <IfxStm_enableComparatorInterrupt>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxStm_enableComparatorInterrupt(Ifx_STM *stm, IfxStm_Comparator comparator)
{
80000692:	40 ae       	mov.aa %a14,%sp
    if (comparator == IfxStm_Comparator_0)
80000694:	df 04 0a 80 	jne %d4,0,800006a8 <IfxStm_enableComparatorInterrupt+0x16>
    {
        stm->ICR.B.CMP0EN = 1U;
80000698:	d9 42 3c 00 	lea %a2,[%a4]60
8000069c:	19 42 3c 00 	ld.w %d2,[%a4]60
800006a0:	b7 12 01 20 	insert %d2,%d2,1,0,1
800006a4:	74 22       	st.w [%a2],%d2
800006a6:	00 90       	ret 
    }
    else if (comparator == IfxStm_Comparator_1)
800006a8:	df 14 03 00 	jeq %d4,1,800006ae <IfxStm_enableComparatorInterrupt+0x1c>
    {
        stm->ICR.B.CMP1EN = 1U;
    }
}
800006ac:	00 90       	ret 
        stm->ICR.B.CMP1EN = 1U;
800006ae:	d9 42 3c 00 	lea %a2,[%a4]60
800006b2:	19 42 3c 00 	ld.w %d2,[%a4]60
800006b6:	b7 12 01 22 	insert %d2,%d2,1,4,1
800006ba:	74 22       	st.w [%a2],%d2
}
800006bc:	1d ff f8 ff 	j 800006ac <IfxStm_enableComparatorInterrupt+0x1a>

800006c0 <IfxStm_enableOcdsSuspend>:


void IfxStm_enableOcdsSuspend(Ifx_STM *stm)
{
800006c0:	40 ae       	mov.aa %a14,%sp
    Ifx_STM_OCS ocs = stm->OCS;
800006c2:	d9 42 28 30 	lea %a2,[%a4]232
800006c6:	19 42 28 30 	ld.w %d2,[%a4]232

    /* Only if OCDS is enabled write into the OCS register */
    if (MODULE_CBS.OSTATE.B.OEN == 1U)
800006ca:	85 f3 40 20 	ld.w %d3,f0000480 <_SMALL_DATA4_+0x5fff8480>
800006ce:	6f 03 03 80 	jnz.t %d3,0,800006d4 <IfxStm_enableOcdsSuspend+0x14>
        ocs.B.SUS_P      = 1;
        ocs.B.SUS        = 2;
        stm->OCS         = ocs;
        stm->OCS.B.SUS_P = 0;
    }
}
800006d2:	00 90       	ret 
        ocs.B.SUS_P      = 1;
800006d4:	b7 12 01 2e 	insert %d2,%d2,1,28,1
        ocs.B.SUS        = 2;
800006d8:	b7 22 04 2c 	insert %d2,%d2,2,24,4
        stm->OCS         = ocs;
800006dc:	74 22       	st.w [%a2],%d2
        stm->OCS.B.SUS_P = 0;
800006de:	54 22       	ld.w %d2,[%a2]
800006e0:	b7 02 01 2e 	insert %d2,%d2,0,28,1
800006e4:	74 22       	st.w [%a2],%d2
}
800006e6:	1d ff f6 ff 	j 800006d2 <IfxStm_enableOcdsSuspend+0x12>

800006ea <IfxStm_getIndex>:
    return module;
}


IfxStm_Index IfxStm_getIndex(Ifx_STM *stm)
{
800006ea:	40 ae       	mov.aa %a14,%sp
    uint32       index;
    IfxStm_Index result;

    result = IfxStm_Index_none;

    for (index = 0; index < IFXSTM_NUM_MODULES; index++)
800006ec:	82 02       	mov %d2,0
800006ee:	1d 00 03 00 	j 800006f4 <IfxStm_getIndex+0xa>
800006f2:	c2 12       	add %d2,1
800006f4:	ff 32 18 80 	jge.u %d2,3,80000724 <IfxStm_getIndex+0x3a>
    {
        if (IfxStm_cfg_indexMap[index].module == stm)
800006f8:	8f 32 00 30 	sh %d3,%d2,3
800006fc:	91 00 00 28 	movh.a %a2,32768
80000700:	d9 22 2c 80 	lea %a2,[%a2]556 <8000022c <IfxStm_cfg_indexMap>>
80000704:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80000708:	54 23       	ld.w %d3,[%a2]
8000070a:	80 44       	mov.d %d4,%a4
8000070c:	5f 43 f3 ff 	jne %d3,%d4,800006f2 <IfxStm_getIndex+0x8>
        {
            result = (IfxStm_Index)IfxStm_cfg_indexMap[index].index;
80000710:	06 32       	sh %d2,3
80000712:	91 00 00 28 	movh.a %a2,32768
80000716:	d9 22 2c 80 	lea %a2,[%a2]556 <8000022c <IfxStm_cfg_indexMap>>
8000071a:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
8000071e:	19 22 04 00 	ld.w %d2,[%a2]4
            break;
80000722:	00 90       	ret 
    result = IfxStm_Index_none;
80000724:	82 f2       	mov %d2,-1
        }
    }

    return result;
}
80000726:	00 90       	ret 

80000728 <IfxStm_initCompare>:
    return comparator == IfxStm_Comparator_0 ? &MODULE_SRC.STM.STM[index].SR0 : &MODULE_SRC.STM.STM[index].SR1;
}


boolean IfxStm_initCompare(Ifx_STM *stm, const IfxStm_CompareConfig *config)
{
80000728:	40 ae       	mov.aa %a14,%sp
8000072a:	40 4d       	mov.aa %a13,%a4
8000072c:	40 5c       	mov.aa %a12,%a5
    sint32        index;
    boolean       result;
    Ifx_STM_CMCON comcon = stm->CMCON;
8000072e:	19 42 38 00 	ld.w %d2,[%a4]56
    Ifx_STM_ICR   icr    = stm->ICR;
80000732:	19 43 3c 00 	ld.w %d3,[%a4]60

    if (config->comparator == 0)
80000736:	54 54       	ld.w %d4,[%a5]
80000738:	df 04 82 80 	jne %d4,0,8000083c <IfxStm_initCompare+0x114>
    {
        comcon.B.MSIZE0  = config->compareSize;
8000073c:	19 54 0c 00 	ld.w %d4,[%a5]12
80000740:	37 42 05 20 	insert %d2,%d2,%d4,0,5
        comcon.B.MSTART0 = config->compareOffset;
80000744:	19 54 08 00 	ld.w %d4,[%a5]8
80000748:	37 42 05 24 	insert %d2,%d2,%d4,8,5
        icr.B.CMP0OS     = config->comparatorInterrupt;
8000074c:	19 54 04 00 	ld.w %d4,[%a5]4
80000750:	67 43 02 30 	ins.t %d3,%d3,2,%d4,0
        result           = TRUE;
80000754:	82 18       	mov %d8,1
    {
        /*Invalid value */
        result = FALSE;
    }

    stm->ICR.U   = icr.U;
80000756:	59 d3 3c 00 	st.w [%a13]60,%d3
    stm->CMCON.U = comcon.U;
8000075a:	59 d2 38 00 	st.w [%a13]56,%d2

    /* configure interrupt */
    index = IfxStm_getIndex(stm);
8000075e:	40 d4       	mov.aa %a4,%a13
80000760:	6d ff c5 ff 	call 800006ea <IfxStm_getIndex>

    if (config->triggerPriority > 0)
80000764:	b9 c3 14 00 	ld.hu %d3,[%a12]20
80000768:	df 03 20 00 	jeq %d3,0,800007a8 <IfxStm_initCompare+0x80>
    {
        volatile Ifx_SRC_SRCR *srcr;

        if (config->comparatorInterrupt == IfxStm_ComparatorInterrupt_ir0)
8000076c:	19 c4 04 00 	ld.w %d4,[%a12]4
80000770:	df 04 7a 80 	jne %d4,0,80000864 <IfxStm_initCompare+0x13c>
        {
            srcr = &(MODULE_SRC.STM.STM[index].SR0);
80000774:	06 32       	sh %d2,3
80000776:	7b 40 00 4f 	movh %d4,61444
8000077a:	1b 04 49 48 	addi %d4,%d4,-31600
8000077e:	60 42       	mov.a %a2,%d4
80000780:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
        else
        {
            srcr = &(MODULE_SRC.STM.STM[index].SR1);
        }

        IfxSrc_init(srcr, config->typeOfService, config->triggerPriority);
80000784:	19 c4 18 00 	ld.w %d4,[%a12]24
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80000788:	54 22       	ld.w %d2,[%a2]
8000078a:	37 32 08 20 	insert %d2,%d2,%d3,0,8
8000078e:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80000790:	54 22       	ld.w %d2,[%a2]
80000792:	37 42 82 25 	insert %d2,%d2,%d4,11,2
80000796:	74 22       	st.w [%a2],%d2
    src->B.CLRR = 1;
80000798:	54 22       	ld.w %d2,[%a2]
8000079a:	b7 12 81 2c 	insert %d2,%d2,1,25,1
8000079e:	74 22       	st.w [%a2],%d2
    src->B.SRE = 1;
800007a0:	54 22       	ld.w %d2,[%a2]
800007a2:	b7 12 01 25 	insert %d2,%d2,1,10,1
800007a6:	74 22       	st.w [%a2],%d2
        IfxSrc_enable(srcr);
    }

    /*Configure the comparator ticks to current value to avoid any wrong triggering*/
    stm->CMP[config->comparator].U = IfxStm_getOffsetTimer(stm, (uint8)config->compareOffset);
800007a8:	39 c5 08 00 	ld.bu %d5,[%a12]8

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800007ac:	19 d6 10 00 	ld.w %d6,[%a13]16
    result |= ((uint64)stm->CAP.U) << 32;
800007b0:	19 d2 2c 00 	ld.w %d2,[%a13]44
800007b4:	8f 06 40 41 	or %d4,%d6,0
800007b8:	02 23       	mov %d3,%d2
{
    uint64 now;

    now = IfxStm_get(stm);

    return (uint32)(now >> offset);
800007ba:	8b 05 82 22 	ge %d2,%d5,32
800007be:	2b 34 50 42 	seln %d4,%d2,%d4,%d3
800007c2:	ab 03 a0 32 	seln %d3,%d2,%d3,0
800007c6:	8f f5 01 21 	and %d2,%d5,31
800007ca:	8b 02 02 51 	rsub %d5,%d2,32
800007ce:	17 43 80 35 	dextr %d3,%d3,%d4,%d5
800007d2:	2b 43 40 32 	sel %d3,%d2,%d3,%d4
800007d6:	54 c2       	ld.w %d2,[%a12]
800007d8:	1b c2 00 20 	addi %d2,%d2,12
800007dc:	06 22       	sh %d2,2
800007de:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
800007e2:	74 23       	st.w [%a2],%d3

    /* clear the interrupt flag of the selected comparator before enabling the interrupt */
    /* this is to avaoid the unneccesary interrupt for the compare match of reset values of the registers */
    IfxStm_clearCompareFlag(stm, config->comparator);
800007e4:	54 c4       	ld.w %d4,[%a12]
800007e6:	40 d4       	mov.aa %a4,%a13
800007e8:	6d ff 3e ff 	call 80000664 <IfxStm_clearCompareFlag>
    /* enable the interrupt for the selected comparator */
    IfxStm_enableComparatorInterrupt(stm, config->comparator);
800007ec:	54 c4       	ld.w %d4,[%a12]
800007ee:	40 d4       	mov.aa %a4,%a13
800007f0:	6d ff 51 ff 	call 80000692 <IfxStm_enableComparatorInterrupt>

    /*Configure the comparator ticks */
    stm->CMP[config->comparator].U = IfxStm_getOffsetTimer(stm, (uint8)config->compareOffset) + config->ticks;
800007f4:	39 c5 08 00 	ld.bu %d5,[%a12]8
    result  = stm->TIM0.U;
800007f8:	19 d6 10 00 	ld.w %d6,[%a13]16
    result |= ((uint64)stm->CAP.U) << 32;
800007fc:	19 d2 2c 00 	ld.w %d2,[%a13]44
80000800:	8f 06 40 41 	or %d4,%d6,0
80000804:	02 23       	mov %d3,%d2
    return (uint32)(now >> offset);
80000806:	8b 05 82 22 	ge %d2,%d5,32
8000080a:	2b 34 50 42 	seln %d4,%d2,%d4,%d3
8000080e:	ab 03 a0 32 	seln %d3,%d2,%d3,0
80000812:	8f f5 01 21 	and %d2,%d5,31
80000816:	8b 02 02 51 	rsub %d5,%d2,32
8000081a:	17 43 80 35 	dextr %d3,%d3,%d4,%d5
8000081e:	2b 43 40 32 	sel %d3,%d2,%d3,%d4
80000822:	02 34       	mov %d4,%d3
80000824:	19 c3 10 00 	ld.w %d3,[%a12]16
80000828:	54 c2       	ld.w %d2,[%a12]
8000082a:	42 43       	add %d3,%d4
8000082c:	1b c2 00 20 	addi %d2,%d2,12
80000830:	06 22       	sh %d2,2
80000832:	01 d2 00 d6 	addsc.a %a13,%a13,%d2,0
80000836:	74 d3       	st.w [%a13],%d3

    return result;
}
80000838:	02 82       	mov %d2,%d8
8000083a:	00 90       	ret 
    else if (config->comparator == 1)
8000083c:	df 14 05 00 	jeq %d4,1,80000846 <IfxStm_initCompare+0x11e>
        result = FALSE;
80000840:	82 08       	mov %d8,0
80000842:	1d ff 8a ff 	j 80000756 <IfxStm_initCompare+0x2e>
        comcon.B.MSIZE1  = config->compareSize;
80000846:	19 54 0c 00 	ld.w %d4,[%a5]12
8000084a:	37 42 05 28 	insert %d2,%d2,%d4,16,5
        comcon.B.MSTART1 = config->compareOffset;
8000084e:	19 54 08 00 	ld.w %d4,[%a5]8
80000852:	37 42 05 2c 	insert %d2,%d2,%d4,24,5
        icr.B.CMP1OS     = config->comparatorInterrupt;
80000856:	19 54 04 00 	ld.w %d4,[%a5]4
8000085a:	67 43 06 30 	ins.t %d3,%d3,6,%d4,0
        result           = TRUE;
8000085e:	82 18       	mov %d8,1
80000860:	1d ff 7b ff 	j 80000756 <IfxStm_initCompare+0x2e>
            srcr = &(MODULE_SRC.STM.STM[index].SR1);
80000864:	06 32       	sh %d2,3
80000866:	c2 42       	add %d2,4
80000868:	7b 40 00 4f 	movh %d4,61444
8000086c:	1b 04 49 48 	addi %d4,%d4,-31600
80000870:	60 42       	mov.a %a2,%d4
80000872:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80000876:	1d ff 87 ff 	j 80000784 <IfxStm_initCompare+0x5c>

8000087a <IfxStm_initCompareConfig>:


void IfxStm_initCompareConfig(IfxStm_CompareConfig *config)
{
8000087a:	40 ae       	mov.aa %a14,%sp
    config->comparator          = IfxStm_Comparator_0;
8000087c:	82 02       	mov %d2,0
8000087e:	74 42       	st.w [%a4],%d2
    config->compareOffset       = IfxStm_ComparatorOffset_0;
80000880:	59 42 08 00 	st.w [%a4]8,%d2
    config->compareSize         = IfxStm_ComparatorSize_32Bits;
80000884:	3b f0 01 30 	mov %d3,31
80000888:	59 43 0c 00 	st.w [%a4]12,%d3
    config->comparatorInterrupt = IfxStm_ComparatorInterrupt_ir0;     /*User must select the interrupt output */
8000088c:	59 42 04 00 	st.w [%a4]4,%d2
    config->ticks               = 0xFFFFFFFF;
80000890:	82 f3       	mov %d3,-1
80000892:	59 43 10 00 	st.w [%a4]16,%d3
    config->triggerPriority     = 0;
80000896:	f9 42 14 00 	st.h [%a4]20,%d2
    config->typeOfService       = IfxSrc_Tos_cpu0;
8000089a:	59 42 18 00 	st.w [%a4]24,%d2
}
8000089e:	00 90       	ret 

800008a0 <IfxScuCcu_isOscillatorStable>:
    *cfg = IfxScuCcu_defaultErayPllConfig;
}


IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
800008a0:	40 ae       	mov.aa %a14,%sp
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
800008a2:	6d 00 fd 03 	call 8000109c <IfxScuWdt_getCpuWatchdogPassword>
800008a6:	02 28       	mov %d8,%d2

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
800008a8:	91 30 00 2f 	movh.a %a2,61443
800008ac:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x6002e010>>
800008b0:	54 23       	ld.w %d3,[%a2]
800008b2:	8f 03 c6 31 	andn %d3,%d3,96
800008b6:	74 23       	st.w [%a2],%d3

    /* OSCVAL  defines the divider value that generates  the reference clock
     *  that is supervised by the oscillator watchdog.
     *  fOSC / (OSCVAL + 1) ~ 2.5Mhz  => OSCVAL = (fOSC / 2.5Mhz) - 1 */

    SCU_OSCCON.B.OSCVAL = ((uint32)IfxScuCcu_xtalFrequency / 2500000) - 1;
800008b8:	91 00 00 36 	movh.a %a3,24576
800008bc:	19 33 00 00 	ld.w %d3,[%a3]0 <60000000 <IfxScuCcu_xtalFrequency>>
800008c0:	7b 00 b6 26 	movh %d2,27488
800008c4:	1b b2 a6 2c 	addi %d2,%d2,-13717
800008c8:	73 23 68 20 	mul.u %e2,%d3,%d2
800008cc:	8f c3 1e 20 	sh %d2,%d3,-20
800008d0:	c2 f2       	add %d2,-1
800008d2:	54 23       	ld.w %d3,[%a2]
800008d4:	37 23 05 38 	insert %d3,%d3,%d2,16,5
800008d8:	74 23       	st.w [%a2],%d3

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;
800008da:	54 23       	ld.w %d3,[%a2]
800008dc:	b7 13 01 31 	insert %d3,%d3,1,2,1
800008e0:	74 23       	st.w [%a2],%d3
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
800008e2:	3b 00 28 30 	mov %d3,640

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
800008e6:	1d 00 05 00 	j 800008f0 <IfxScuCcu_isOscillatorStable+0x50>
    {
        TimeoutCtr--;
800008ea:	c2 f3       	add %d3,-1

        if (TimeoutCtr == 0)
800008ec:	df 03 25 00 	jeq %d3,0,80000936 <IfxScuCcu_isOscillatorStable+0x96>
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
800008f0:	91 30 00 2f 	movh.a %a2,61443
800008f4:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x6002e010>>
800008f8:	54 25       	ld.w %d5,[%a2]
800008fa:	6f 15 f8 7f 	jz.t %d5,1,800008ea <IfxScuCcu_isOscillatorStable+0x4a>
800008fe:	54 25       	ld.w %d5,[%a2]
80000900:	6f 85 f5 7f 	jz.t %d5,8,800008ea <IfxScuCcu_isOscillatorStable+0x4a>
    boolean status     = 0;
80000904:	82 09       	mov %d9,0
        }
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
80000906:	02 84       	mov %d4,%d8
80000908:	6d 00 61 02 	call 80000dca <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
8000090c:	91 30 00 2f 	movh.a %a2,61443
80000910:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x6002e12c>>
80000914:	54 23       	ld.w %d3,[%a2]
80000916:	b7 13 81 31 	insert %d3,%d3,1,3,1
8000091a:	74 23       	st.w [%a2],%d3
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
8000091c:	91 30 00 2f 	movh.a %a2,61443
80000920:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x6002e130>>
80000924:	54 23       	ld.w %d3,[%a2]
80000926:	b7 13 81 31 	insert %d3,%d3,1,3,1
8000092a:	74 23       	st.w [%a2],%d3
        IfxScuWdt_setCpuEndinit(endinitPw);
8000092c:	02 84       	mov %d4,%d8
8000092e:	6d 00 d4 03 	call 800010d6 <IfxScuWdt_setCpuEndinit>
    }

    return status;
}
80000932:	02 92       	mov %d2,%d9
80000934:	00 90       	ret 
            status = 1;
80000936:	82 19       	mov %d9,1
80000938:	1d ff e7 ff 	j 80000906 <IfxScuCcu_isOscillatorStable+0x66>

8000093c <IfxScuCcu_getOscFrequency>:
{
8000093c:	40 ae       	mov.aa %a14,%sp
    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
8000093e:	91 30 00 2f 	movh.a %a2,61443
80000942:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80000946:	54 22       	ld.w %d2,[%a2]
80000948:	37 02 62 2e 	extr.u %d2,%d2,28,2
8000094c:	df 02 10 00 	jeq %d2,0,8000096c <IfxScuCcu_getOscFrequency+0x30>
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
80000950:	54 22       	ld.w %d2,[%a2]
80000952:	37 02 62 2e 	extr.u %d2,%d2,28,2
80000956:	df 12 04 00 	jeq %d2,1,8000095e <IfxScuCcu_getOscFrequency+0x22>
        freq = 0.0f;
8000095a:	82 02       	mov %d2,0
}
8000095c:	00 90       	ret 
        freq = (float32)IfxScuCcu_xtalFrequency;
8000095e:	91 00 00 26 	movh.a %a2,24576
80000962:	19 22 00 00 	ld.w %d2,[%a2]0 <60000000 <IfxScuCcu_xtalFrequency>>
80000966:	4b 02 61 21 	utof %d2,%d2
8000096a:	00 90       	ret 
        freq = IFXSCU_EVR_OSC_FREQUENCY;
8000096c:	7b f0 cb 24 	movh %d2,19647
80000970:	1b 02 c2 2b 	addi %d2,%d2,-17376
80000974:	00 90       	ret 

80000976 <IfxScuCcu_getPllFrequency>:
{
80000976:	40 ae       	mov.aa %a14,%sp
    oscFreq = IfxScuCcu_getOscFrequency();
80000978:	6d ff e2 ff 	call 8000093c <IfxScuCcu_getOscFrequency>
8000097c:	02 24       	mov %d4,%d2
    if (scu->PLLSTAT.B.VCOBYST == 1)
8000097e:	91 30 00 2f 	movh.a %a2,61443
80000982:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80000986:	19 23 14 00 	ld.w %d3,[%a2]20 <f0030014 <_SMALL_DATA4_+0x60028014>>
8000098a:	6f 03 27 80 	jnz.t %d3,0,800009d8 <IfxScuCcu_getPllFrequency+0x62>
    else if (scu->PLLSTAT.B.FINDIS == 1)
8000098e:	91 30 00 2f 	movh.a %a2,61443
80000992:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80000996:	19 22 14 00 	ld.w %d2,[%a2]20 <f0030014 <_SMALL_DATA4_+0x60028014>>
8000099a:	6f 32 2d 80 	jnz.t %d2,3,800009f4 <IfxScuCcu_getPllFrequency+0x7e>
        freq = (oscFreq * (scu->PLLCON0.B.NDIV + 1)) / ((scu->PLLCON1.B.K2DIV + 1) * (scu->PLLCON0.B.PDIV + 1));
8000099e:	91 30 00 2f 	movh.a %a2,61443
800009a2:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
800009a6:	19 22 18 00 	ld.w %d2,[%a2]24 <f0030018 <_SMALL_DATA4_+0x60028018>>
800009aa:	37 02 e7 24 	extr.u %d2,%d2,9,7
800009ae:	c2 12       	add %d2,1
800009b0:	4b 02 41 21 	itof %d2,%d2
800009b4:	4b 42 41 30 	mul.f %d3,%d2,%d4
800009b8:	19 24 1c 00 	ld.w %d4,[%a2]28 <f003001c <_SMALL_DATA4_+0x6002801c>>
800009bc:	8f f4 07 41 	and %d4,%d4,127
800009c0:	19 22 18 00 	ld.w %d2,[%a2]24 <f0030018 <_SMALL_DATA4_+0x60028018>>
800009c4:	37 02 64 2c 	extr.u %d2,%d2,24,4
800009c8:	c2 12       	add %d2,1
800009ca:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
800009ce:	4b 02 41 21 	itof %d2,%d2
800009d2:	4b 23 51 20 	div.f %d2,%d3,%d2
}
800009d6:	00 90       	ret 
        freq = oscFreq / (scu->PLLCON1.B.K1DIV + 1);
800009d8:	91 30 00 2f 	movh.a %a2,61443
800009dc:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
800009e0:	19 22 1c 00 	ld.w %d2,[%a2]28 <f003001c <_SMALL_DATA4_+0x6002801c>>
800009e4:	37 02 67 28 	extr.u %d2,%d2,16,7
800009e8:	c2 12       	add %d2,1
800009ea:	4b 02 41 21 	itof %d2,%d2
800009ee:	4b 24 51 20 	div.f %d2,%d4,%d2
800009f2:	00 90       	ret 
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLCON1.B.K2DIV + 1);
800009f4:	91 30 00 2f 	movh.a %a2,61443
800009f8:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
800009fc:	19 24 1c 00 	ld.w %d4,[%a2]28 <f003001c <_SMALL_DATA4_+0x6002801c>>
80000a00:	8f f4 07 41 	and %d4,%d4,127
80000a04:	c2 14       	add %d4,1
80000a06:	6d 00 d8 0b 	call 800021b6 <__floatsidf>
80000a0a:	0b 23 10 68 	mov %e6,%d3,%d2
80000a0e:	82 04       	mov %d4,0
80000a10:	7b 80 19 54 	movh %d5,16792
80000a14:	1b 45 78 5d 	addi %d5,%d5,-10364
80000a18:	6d 00 27 0b 	call 80002066 <__divdf3>
80000a1c:	0b 23 10 48 	mov %e4,%d3,%d2
80000a20:	6d 00 06 0c 	call 8000222c <__truncdfsf2>
80000a24:	00 90       	ret 

80000a26 <IfxScuCcu_getSourceFrequency>:
{
80000a26:	40 ae       	mov.aa %a14,%sp
    switch (SCU_CCUCON0.B.CLKSEL)
80000a28:	91 30 00 2f 	movh.a %a2,61443
80000a2c:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80000a30:	54 22       	ld.w %d2,[%a2]
80000a32:	37 02 62 2e 	extr.u %d2,%d2,28,2
80000a36:	df 02 07 00 	jeq %d2,0,80000a44 <IfxScuCcu_getSourceFrequency+0x1e>
80000a3a:	df 12 0a 80 	jne %d2,1,80000a4e <IfxScuCcu_getSourceFrequency+0x28>
        sourcefreq = IfxScuCcu_getPllFrequency();
80000a3e:	6d ff 9c ff 	call 80000976 <IfxScuCcu_getPllFrequency>
        break;
80000a42:	00 90       	ret 
    switch (SCU_CCUCON0.B.CLKSEL)
80000a44:	7b f0 cb 24 	movh %d2,19647
80000a48:	1b 02 c2 2b 	addi %d2,%d2,-17376
80000a4c:	00 90       	ret 
        sourcefreq = 0;
80000a4e:	82 02       	mov %d2,0
}
80000a50:	00 90       	ret 

80000a52 <IfxScuCcu_wait>:
    }
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
80000a52:	40 ae       	mov.aa %a14,%sp
80000a54:	02 48       	mov %d8,%d4
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
80000a56:	6d ff e8 ff 	call 80000a26 <IfxScuCcu_getSourceFrequency>
80000a5a:	91 30 00 2f 	movh.a %a2,61443
80000a5e:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80000a62:	54 23       	ld.w %d3,[%a2]
80000a64:	37 03 64 34 	extr.u %d3,%d3,8,4
80000a68:	4b 03 41 31 	itof %d3,%d3
80000a6c:	4b 32 51 20 	div.f %d2,%d2,%d3
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
80000a70:	4b 28 41 40 	mul.f %d4,%d8,%d2
80000a74:	4b 04 71 41 	ftouz %d4,%d4
    uint32 stmCountBegin = STM0_TIM0.U;
80000a78:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x5fff8010>

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
80000a7c:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x5fff8010>
80000a80:	a2 32       	sub %d2,%d3
80000a82:	3f 42 fd ff 	jlt.u %d2,%d4,80000a7c <IfxScuCcu_wait+0x2a>
         * the subtraction result will be as expected, as long as both are unsigned 32 bits
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }
}
80000a86:	00 90       	ret 

80000a88 <IfxScuCcu_init>:
{
80000a88:	40 ae       	mov.aa %a14,%sp
80000a8a:	40 4c       	mov.aa %a12,%a4
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
80000a8c:	19 42 10 10 	ld.w %d2,[%a4]80
80000a90:	91 00 00 26 	movh.a %a2,24576
80000a94:	59 22 00 00 	st.w [%a2]0 <60000000 <IfxScuCcu_xtalFrequency>>,%d2
    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
80000a98:	6d 00 02 03 	call 8000109c <IfxScuWdt_getCpuWatchdogPassword>
80000a9c:	02 2a       	mov %d10,%d2
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
80000a9e:	6d 00 11 03 	call 800010c0 <IfxScuWdt_getSafetyWatchdogPassword>
80000aa2:	02 28       	mov %d8,%d2
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80000aa4:	02 a4       	mov %d4,%d10
80000aa6:	6d 00 92 01 	call 80000dca <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80000aaa:	91 30 00 2f 	movh.a %a2,61443
80000aae:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x6002e130>>
80000ab2:	54 2d       	ld.w %d13,[%a2]
80000ab4:	37 0d e1 d1 	extr.u %d13,%d13,3,1
        SCU_TRAPDIS.B.SMUT = 1U;
80000ab8:	54 22       	ld.w %d2,[%a2]
80000aba:	b7 12 81 21 	insert %d2,%d2,1,3,1
80000abe:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(endinit_pw);
80000ac0:	02 a4       	mov %d4,%d10
80000ac2:	6d 00 0a 03 	call 800010d6 <IfxScuWdt_setCpuEndinit>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80000ac6:	02 84       	mov %d4,%d8
80000ac8:	6d 00 a6 01 	call 80000e14 <IfxScuWdt_clearSafetyEndinit>
        while (SCU_CCUCON0.B.LCK != 0U)
80000acc:	91 30 00 2f 	movh.a %a2,61443
80000ad0:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80000ad4:	54 23       	ld.w %d3,[%a2]
80000ad6:	bf 03 fb 7f 	jlt %d3,0,80000acc <IfxScuCcu_init+0x44>
        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
80000ada:	54 22       	ld.w %d2,[%a2]
80000adc:	b7 02 02 2e 	insert %d2,%d2,0,28,2
80000ae0:	74 22       	st.w [%a2],%d2
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
80000ae2:	54 22       	ld.w %d2,[%a2]
80000ae4:	b7 12 01 2f 	insert %d2,%d2,1,30,1
80000ae8:	74 22       	st.w [%a2],%d2
        SCU_PLLCON0.B.SETFINDIS = 1;
80000aea:	91 30 00 2f 	movh.a %a2,61443
80000aee:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
80000af2:	54 22       	ld.w %d2,[%a2]
80000af4:	b7 12 01 22 	insert %d2,%d2,1,4,1
80000af8:	74 22       	st.w [%a2],%d2
        while (SCU_CCUCON1.B.LCK != 0U)
80000afa:	91 30 00 2f 	movh.a %a2,61443
80000afe:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80000b02:	54 23       	ld.w %d3,[%a2]
80000b04:	bf 03 fb 7f 	jlt %d3,0,80000afa <IfxScuCcu_init+0x72>
        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
80000b08:	54 22       	ld.w %d2,[%a2]
80000b0a:	b7 12 02 2e 	insert %d2,%d2,1,28,2
80000b0e:	74 22       	st.w [%a2],%d2
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */
80000b10:	54 22       	ld.w %d2,[%a2]
80000b12:	b7 12 01 2f 	insert %d2,%d2,1,30,1
80000b16:	74 22       	st.w [%a2],%d2
        status             |= IfxScuCcu_isOscillatorStable();
80000b18:	6d ff c4 fe 	call 800008a0 <IfxScuCcu_isOscillatorStable>
80000b1c:	02 2c       	mov %d12,%d2
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80000b1e:	02 84       	mov %d4,%d8
80000b20:	6d 00 00 03 	call 80001120 <IfxScuWdt_setSafetyEndinit>
    if (status == 0)
80000b24:	df 0c 28 00 	jeq %d12,0,80000b74 <IfxScuCcu_init+0xec>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80000b28:	02 84       	mov %d4,%d8
80000b2a:	6d 00 75 01 	call 80000e14 <IfxScuWdt_clearSafetyEndinit>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
80000b2e:	91 30 00 2f 	movh.a %a2,61443
80000b32:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
80000b36:	54 23       	ld.w %d3,[%a2]
80000b38:	8f 03 c4 31 	andn %d3,%d3,64
80000b3c:	74 23       	st.w [%a2],%d3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80000b3e:	02 84       	mov %d4,%d8
80000b40:	6d 00 f0 02 	call 80001120 <IfxScuWdt_setSafetyEndinit>
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80000b44:	02 a4       	mov %d4,%d10
80000b46:	6d 00 42 01 	call 80000dca <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80000b4a:	91 30 00 2f 	movh.a %a2,61443
80000b4e:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x6002e12c>>
80000b52:	54 23       	ld.w %d3,[%a2]
80000b54:	b7 13 81 31 	insert %d3,%d3,1,3,1
80000b58:	74 23       	st.w [%a2],%d3
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80000b5a:	91 30 00 2f 	movh.a %a2,61443
80000b5e:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x6002e130>>
80000b62:	54 23       	ld.w %d3,[%a2]
80000b64:	67 d3 03 30 	ins.t %d3,%d3,3,%d13,0
80000b68:	74 23       	st.w [%a2],%d3
        IfxScuWdt_setCpuEndinit(endinit_pw);
80000b6a:	02 a4       	mov %d4,%d10
80000b6c:	6d 00 b5 02 	call 800010d6 <IfxScuWdt_setCpuEndinit>
}
80000b70:	02 c2       	mov %d2,%d12
80000b72:	00 90       	ret 
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80000b74:	02 84       	mov %d4,%d8
80000b76:	6d 00 4f 01 	call 80000e14 <IfxScuWdt_clearSafetyEndinit>
                while (SCU_PLLSTAT.B.K2RDY == 0U)
80000b7a:	91 30 00 2f 	movh.a %a2,61443
80000b7e:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x6002e014>>
80000b82:	54 23       	ld.w %d3,[%a2]
80000b84:	6f 53 fb 7f 	jz.t %d3,5,80000b7a <IfxScuCcu_init+0xf2>
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
80000b88:	39 c3 0a 00 	ld.bu %d3,[%a12]10
80000b8c:	91 30 00 2f 	movh.a %a2,61443
80000b90:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x6002e01c>>
80000b94:	54 22       	ld.w %d2,[%a2]
80000b96:	37 32 07 20 	insert %d2,%d2,%d3,0,7
80000b9a:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.PDIV = cfg->sysPll.pllInitialStep.pDivider;
80000b9c:	39 c3 08 00 	ld.bu %d3,[%a12]8
80000ba0:	91 30 00 2f 	movh.a %a2,61443
80000ba4:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
80000ba8:	54 22       	ld.w %d2,[%a2]
80000baa:	37 32 04 2c 	insert %d2,%d2,%d3,24,4
80000bae:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.NDIV = cfg->sysPll.pllInitialStep.nDivider;
80000bb0:	39 c3 09 00 	ld.bu %d3,[%a12]9
80000bb4:	54 22       	ld.w %d2,[%a2]
80000bb6:	37 32 87 24 	insert %d2,%d2,%d3,9,7
80000bba:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.OSCDISCDIS = 1;
80000bbc:	54 22       	ld.w %d2,[%a2]
80000bbe:	b7 12 01 23 	insert %d2,%d2,1,6,1
80000bc2:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.PLLPWD     = 0; // set PLL to power down
80000bc4:	54 22       	ld.w %d2,[%a2]
80000bc6:	b7 02 01 28 	insert %d2,%d2,0,16,1
80000bca:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.CLRFINDIS  = 1;
80000bcc:	54 22       	ld.w %d2,[%a2]
80000bce:	b7 12 81 22 	insert %d2,%d2,1,5,1
80000bd2:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal
80000bd4:	54 22       	ld.w %d2,[%a2]
80000bd6:	b7 12 01 28 	insert %d2,%d2,1,16,1
80000bda:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.RESLD = 1;
80000bdc:	54 22       	ld.w %d2,[%a2]
80000bde:	b7 12 01 29 	insert %d2,%d2,1,18,1
80000be2:	74 22       	st.w [%a2],%d2
                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
80000be4:	7b 20 85 43 	movh %d4,14418
80000be8:	1b 74 71 4b 	addi %d4,%d4,-18665
80000bec:	6d ff 33 ff 	call 80000a52 <IfxScuCcu_wait>
                    while (SCU_PLLSTAT.B.VCOLOCK == 0U)
80000bf0:	91 30 00 2f 	movh.a %a2,61443
80000bf4:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x6002e014>>
80000bf8:	54 23       	ld.w %d3,[%a2]
80000bfa:	6f 23 fb 7f 	jz.t %d3,2,80000bf0 <IfxScuCcu_init+0x168>
                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
80000bfe:	91 30 00 2f 	movh.a %a2,61443
80000c02:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
80000c06:	54 22       	ld.w %d2,[%a2]
80000c08:	8f 12 c0 21 	andn %d2,%d2,1
80000c0c:	74 22       	st.w [%a2],%d2
                    while (SCU_CCUCON0.B.LCK != 0U)
80000c0e:	91 30 00 2f 	movh.a %a2,61443
80000c12:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80000c16:	54 23       	ld.w %d3,[%a2]
80000c18:	bf 03 fb 7f 	jlt %d3,0,80000c0e <IfxScuCcu_init+0x186>
                    SCU_CCUCON0.B.CLKSEL = 0x01;
80000c1c:	54 22       	ld.w %d2,[%a2]
80000c1e:	b7 12 02 2e 	insert %d2,%d2,1,28,2
80000c22:	74 22       	st.w [%a2],%d2
                    while (SCU_CCUCON0.B.LCK != 0U)
80000c24:	91 30 00 2f 	movh.a %a2,61443
80000c28:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80000c2c:	54 23       	ld.w %d3,[%a2]
80000c2e:	bf 03 fb 7f 	jlt %d3,0,80000c24 <IfxScuCcu_init+0x19c>
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */
80000c32:	19 c4 0c 00 	ld.w %d4,[%a12]12
80000c36:	6d ff 0e ff 	call 80000a52 <IfxScuCcu_wait>
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
80000c3a:	91 30 00 2f 	movh.a %a2,61443
80000c3e:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80000c42:	54 23       	ld.w %d3,[%a2]
80000c44:	19 c4 14 00 	ld.w %d4,[%a12]20 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80000c48:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
80000c4c:	19 c2 10 00 	ld.w %d2,[%a12]16
80000c50:	26 42       	and %d2,%d4
80000c52:	a6 23       	or %d3,%d2
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
80000c54:	b7 13 02 3e 	insert %d3,%d3,1,28,2
                        ccucon0.B.UP     = 1;
80000c58:	b7 13 01 3f 	insert %d3,%d3,1,30,1
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
80000c5c:	74 23       	st.w [%a2],%d3
                    while (SCU_CCUCON1.B.LCK != 0U)
80000c5e:	91 30 00 2f 	movh.a %a2,61443
80000c62:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80000c66:	54 23       	ld.w %d3,[%a2]
80000c68:	bf 03 fb 7f 	jlt %d3,0,80000c5e <IfxScuCcu_init+0x1d6>
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
80000c6c:	54 23       	ld.w %d3,[%a2]
80000c6e:	19 c4 1c 00 	ld.w %d4,[%a12]28
80000c72:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
80000c76:	19 c2 18 00 	ld.w %d2,[%a12]24
80000c7a:	26 42       	and %d2,%d4
80000c7c:	a6 23       	or %d3,%d2
                        ccucon1.B.INSEL = 1;
80000c7e:	b7 13 02 3e 	insert %d3,%d3,1,28,2
                        ccucon1.B.UP    = 1;
80000c82:	b7 13 01 3f 	insert %d3,%d3,1,30,1
                        SCU_CCUCON1     = ccucon1;
80000c86:	74 23       	st.w [%a2],%d3
                    while (SCU_CCUCON2.B.LCK != 0U)
80000c88:	91 30 00 2f 	movh.a %a2,61443
80000c8c:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_SMALL_DATA4_+0x6002e040>>
80000c90:	54 23       	ld.w %d3,[%a2]
80000c92:	bf 03 fb 7f 	jlt %d3,0,80000c88 <IfxScuCcu_init+0x200>
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
80000c96:	54 23       	ld.w %d3,[%a2]
80000c98:	19 c4 24 00 	ld.w %d4,[%a12]36
80000c9c:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
80000ca0:	19 c2 20 00 	ld.w %d2,[%a12]32
80000ca4:	26 42       	and %d2,%d4
80000ca6:	a6 32       	or %d2,%d3
                        ccucon2.B.UP = 1;
80000ca8:	b7 12 01 2f 	insert %d2,%d2,1,30,1
                        SCU_CCUCON2  = ccucon2;
80000cac:	74 22       	st.w [%a2],%d2
                    while (SCU_CCUCON5.B.LCK != 0U)
80000cae:	91 30 00 2f 	movh.a %a2,61443
80000cb2:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_SMALL_DATA4_+0x6002e04c>>
80000cb6:	54 23       	ld.w %d3,[%a2]
80000cb8:	bf 03 fb 7f 	jlt %d3,0,80000cae <IfxScuCcu_init+0x226>
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
80000cbc:	54 23       	ld.w %d3,[%a2]
80000cbe:	19 c4 2c 00 	ld.w %d4,[%a12]44
80000cc2:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
80000cc6:	19 c2 28 00 	ld.w %d2,[%a12]40
80000cca:	26 42       	and %d2,%d4
80000ccc:	a6 32       	or %d2,%d3
                        ccucon5.B.UP = 1;
80000cce:	b7 12 01 2f 	insert %d2,%d2,1,30,1
                        SCU_CCUCON5  = ccucon5;
80000cd2:	74 22       	st.w [%a2],%d2
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
80000cd4:	91 30 00 2f 	movh.a %a2,61443
80000cd8:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_SMALL_DATA4_+0x6002e080>>
80000cdc:	54 23       	ld.w %d3,[%a2]
80000cde:	19 c4 34 00 	ld.w %d4,[%a12]52 <f0036080 <_SMALL_DATA4_+0x6002e080>>
80000ce2:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
80000ce6:	19 c2 30 00 	ld.w %d2,[%a12]48
80000cea:	26 42       	and %d2,%d4
80000cec:	a6 32       	or %d2,%d3
                        SCU_CCUCON6 = ccucon6;
80000cee:	74 22       	st.w [%a2],%d2
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
80000cf0:	91 30 00 2f 	movh.a %a2,61443
80000cf4:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_SMALL_DATA4_+0x6002e084>>
80000cf8:	54 23       	ld.w %d3,[%a2]
80000cfa:	19 c4 3c 00 	ld.w %d4,[%a12]60 <f0036084 <_SMALL_DATA4_+0x6002e084>>
80000cfe:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
80000d02:	19 c2 38 00 	ld.w %d2,[%a12]56
80000d06:	26 42       	and %d2,%d4
80000d08:	a6 32       	or %d2,%d3
                        SCU_CCUCON7 = ccucon7;
80000d0a:	74 22       	st.w [%a2],%d2
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
80000d0c:	91 30 00 2f 	movh.a %a2,61443
80000d10:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_SMALL_DATA4_+0x6002e088>>
80000d14:	54 23       	ld.w %d3,[%a2]
80000d16:	19 c4 04 10 	ld.w %d4,[%a12]68 <f0036088 <_SMALL_DATA4_+0x6002e088>>
80000d1a:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
80000d1e:	19 c2 00 10 	ld.w %d2,[%a12]64
80000d22:	26 42       	and %d2,%d4
80000d24:	a6 32       	or %d2,%d3
                        SCU_CCUCON8 = ccucon8;
80000d26:	74 22       	st.w [%a2],%d2
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80000d28:	02 84       	mov %d4,%d8
80000d2a:	6d 00 fb 01 	call 80001120 <IfxScuWdt_setSafetyEndinit>
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;
80000d2e:	91 00 80 df 	movh.a %a13,63488
80000d32:	d9 dd 14 02 	lea %a13,[%a13]8212 <f8002014 <_SMALL_DATA4_+0x67ffa014>>
80000d36:	54 d9       	ld.w %d9,[%a13]
80000d38:	19 c4 0c 10 	ld.w %d4,[%a12]76 <f8002014 <_SMALL_DATA4_+0x67ffa014>>
80000d3c:	0f 49 e0 90 	andn %d9,%d9,%d4
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
80000d40:	19 c2 08 10 	ld.w %d2,[%a12]72
80000d44:	26 42       	and %d2,%d4
80000d46:	a6 29       	or %d9,%d2
                IfxScuWdt_clearCpuEndinit(endinit_pw);
80000d48:	02 a4       	mov %d4,%d10
80000d4a:	6d 00 40 00 	call 80000dca <IfxScuWdt_clearCpuEndinit>
                FLASH0_FCON = fcon;
80000d4e:	74 d9       	st.w [%a13],%d9
                IfxScuWdt_setCpuEndinit(endinit_pw);
80000d50:	02 a4       	mov %d4,%d10
80000d52:	6d 00 c2 01 	call 800010d6 <IfxScuWdt_setCpuEndinit>
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
80000d56:	02 c9       	mov %d9,%d12
80000d58:	1d 00 0d 00 	j 80000d72 <IfxScuCcu_init+0x2ea>
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount].waitTime);
80000d5c:	99 c2 04 00 	ld.a %a2,[%a12]4
80000d60:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
80000d64:	19 24 04 00 	ld.w %d4,[%a2]4
80000d68:	6d ff 75 fe 	call 80000a52 <IfxScuCcu_wait>
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
80000d6c:	c2 19       	add %d9,1
80000d6e:	8f f9 0f 91 	and %d9,%d9,255
80000d72:	14 c3       	ld.bu %d3,[%a12]
80000d74:	7f 39 da fe 	jge.u %d9,%d3,80000b28 <IfxScuCcu_init+0xa0>
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80000d78:	02 84       	mov %d4,%d8
80000d7a:	6d 00 4d 00 	call 80000e14 <IfxScuWdt_clearSafetyEndinit>
                while (SCU_PLLSTAT.B.K2RDY == 0U)
80000d7e:	91 30 00 2f 	movh.a %a2,61443
80000d82:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x6002e014>>
80000d86:	54 23       	ld.w %d3,[%a2]
80000d88:	6f 53 fb 7f 	jz.t %d3,5,80000d7e <IfxScuCcu_init+0x2f6>
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
80000d8c:	53 c9 20 b0 	mul %d11,%d9,12
80000d90:	99 c2 04 00 	ld.a %a2,[%a12]4
80000d94:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
80000d98:	14 24       	ld.bu %d4,[%a2]
80000d9a:	91 30 00 2f 	movh.a %a2,61443
80000d9e:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x6002e01c>>
80000da2:	54 23       	ld.w %d3,[%a2]
80000da4:	37 43 07 30 	insert %d3,%d3,%d4,0,7
80000da8:	74 23       	st.w [%a2],%d3
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80000daa:	02 84       	mov %d4,%d8
80000dac:	6d 00 ba 01 	call 80001120 <IfxScuWdt_setSafetyEndinit>
            if (cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction != (IfxScuCcu_PllStepsFunctionHook)0)
80000db0:	99 c2 04 00 	ld.a %a2,[%a12]4
80000db4:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
80000db8:	d9 22 08 00 	lea %a2,[%a2]8
80000dbc:	d4 22       	ld.a %a2,[%a2]
80000dbe:	bd 02 cf 7f 	jz.a %a2,80000d5c <IfxScuCcu_init+0x2d4>
                cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction();
80000dc2:	2d 02 00 00 	calli %a2
80000dc6:	1d ff cb ff 	j 80000d5c <IfxScuCcu_init+0x2d4>

80000dca <IfxScuWdt_clearCpuEndinit>:
    {}
}


void IfxScuWdt_clearCpuEndinit(uint16 password)
{
80000dca:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80000dcc:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80000dd0:	8f 72 00 21 	and %d2,%d2,7
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
80000dd4:	7b 30 00 3f 	movh %d3,61443
80000dd8:	1b 03 10 36 	addi %d3,%d3,24832
80000ddc:	13 c2 20 23 	madd %d2,%d3,%d2,12
80000de0:	60 22       	mov.a %a2,%d2
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80000de2:	54 22       	ld.w %d2,[%a2]
80000de4:	6f 12 0b 00 	jz.t %d2,1,80000dfa <IfxScuWdt_clearCpuEndinit+0x30>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000de8:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80000dec:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000df0:	54 22       	ld.w %d2,[%a2]
80000df2:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000df6:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000df8:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000dfa:	8f 24 00 30 	sh %d3,%d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80000dfe:	8f 23 40 31 	or %d3,%d3,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000e02:	54 22       	ld.w %d2,[%a2]
80000e04:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000e08:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000e0a:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80000e0c:	54 22       	ld.w %d2,[%a2]
80000e0e:	6f 02 ff ff 	jnz.t %d2,0,80000e0c <IfxScuWdt_clearCpuEndinit+0x42>
}
80000e12:	00 90       	ret 

80000e14 <IfxScuWdt_clearSafetyEndinit>:


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
80000e14:	40 ae       	mov.aa %a14,%sp
80000e16:	37 04 70 40 	extr.u %d4,%d4,0,16
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80000e1a:	91 30 00 2f 	movh.a %a2,61443
80000e1e:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000e22:	54 22       	ld.w %d2,[%a2]
80000e24:	6f 12 0b 00 	jz.t %d2,1,80000e3a <IfxScuWdt_clearSafetyEndinit+0x26>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000e28:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80000e2c:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80000e30:	54 22       	ld.w %d2,[%a2]
80000e32:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000e36:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80000e38:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000e3a:	8f 24 00 30 	sh %d3,%d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80000e3e:	8f 23 40 31 	or %d3,%d3,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80000e42:	91 30 00 2f 	movh.a %a2,61443
80000e46:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000e4a:	54 22       	ld.w %d2,[%a2]
80000e4c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000e50:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80000e52:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80000e54:	91 30 00 2f 	movh.a %a2,61443
80000e58:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000e5c:	54 22       	ld.w %d2,[%a2]
80000e5e:	6f 02 fb ff 	jnz.t %d2,0,80000e54 <IfxScuWdt_clearSafetyEndinit+0x40>
    IfxScuWdt_clearSafetyEndinitInline(password);
}
80000e62:	00 90       	ret 

80000e64 <IfxScuWdt_disableCpuWatchdog>:


void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
80000e64:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80000e66:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80000e6a:	8f 72 00 21 	and %d2,%d2,7
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
80000e6e:	7b 30 00 3f 	movh %d3,61443
80000e72:	1b 03 10 36 	addi %d3,%d3,24832
80000e76:	13 c2 20 23 	madd %d2,%d3,%d2,12
80000e7a:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
80000e7c:	54 22       	ld.w %d2,[%a2]
80000e7e:	6f 12 0b 00 	jz.t %d2,1,80000e94 <IfxScuWdt_disableCpuWatchdog+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000e82:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80000e86:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000e8a:	54 22       	ld.w %d2,[%a2]
80000e8c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000e90:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000e92:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000e94:	06 24       	sh %d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80000e96:	8f 24 40 31 	or %d3,%d4,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000e9a:	54 22       	ld.w %d2,[%a2]
80000e9c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000ea0:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000ea2:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80000ea4:	54 22       	ld.w %d2,[%a2]
80000ea6:	6f 02 ff ff 	jnz.t %d2,0,80000ea4 <IfxScuWdt_disableCpuWatchdog+0x40>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
80000eaa:	d9 23 04 00 	lea %a3,[%a2]4
80000eae:	19 22 04 00 	ld.w %d2,[%a2]4
80000eb2:	b7 12 81 21 	insert %d2,%d2,1,3,1
80000eb6:	74 32       	st.w [%a3],%d2
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80000eb8:	54 22       	ld.w %d2,[%a2]
80000eba:	6f 12 09 00 	jz.t %d2,1,80000ecc <IfxScuWdt_disableCpuWatchdog+0x68>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80000ebe:	8f 14 40 31 	or %d3,%d4,1
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000ec2:	54 22       	ld.w %d2,[%a2]
80000ec4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000ec8:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000eca:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80000ecc:	8f 34 40 41 	or %d4,%d4,3
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000ed0:	54 22       	ld.w %d2,[%a2]
80000ed2:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000ed6:	a6 42       	or %d2,%d4
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000ed8:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80000eda:	54 22       	ld.w %d2,[%a2]
80000edc:	6f 02 ff 7f 	jz.t %d2,0,80000eda <IfxScuWdt_disableCpuWatchdog+0x76>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
80000ee0:	00 90       	ret 

80000ee2 <IfxScuWdt_disableSafetyWatchdog>:


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
80000ee2:	40 ae       	mov.aa %a14,%sp
80000ee4:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
80000ee8:	91 30 00 2f 	movh.a %a2,61443
80000eec:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000ef0:	54 22       	ld.w %d2,[%a2]
80000ef2:	6f 12 0b 00 	jz.t %d2,1,80000f08 <IfxScuWdt_disableSafetyWatchdog+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000ef6:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80000efa:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80000efe:	54 22       	ld.w %d2,[%a2]
80000f00:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000f04:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80000f06:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000f08:	06 24       	sh %d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80000f0a:	8f 24 40 31 	or %d3,%d4,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80000f0e:	91 30 00 2f 	movh.a %a2,61443
80000f12:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000f16:	54 22       	ld.w %d2,[%a2]
80000f18:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000f1c:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80000f1e:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80000f20:	91 30 00 2f 	movh.a %a2,61443
80000f24:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000f28:	54 22       	ld.w %d2,[%a2]
80000f2a:	6f 02 fb ff 	jnz.t %d2,0,80000f20 <IfxScuWdt_disableSafetyWatchdog+0x3e>
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
80000f2e:	91 30 00 2f 	movh.a %a2,61443
80000f32:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x6002e0f4>>
80000f36:	54 22       	ld.w %d2,[%a2]
80000f38:	b7 12 81 21 	insert %d2,%d2,1,3,1
80000f3c:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80000f3e:	91 30 00 2f 	movh.a %a2,61443
80000f42:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000f46:	54 22       	ld.w %d2,[%a2]
80000f48:	6f 12 09 00 	jz.t %d2,1,80000f5a <IfxScuWdt_disableSafetyWatchdog+0x78>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80000f4c:	8f 14 40 31 	or %d3,%d4,1
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80000f50:	54 22       	ld.w %d2,[%a2]
80000f52:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000f56:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80000f58:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80000f5a:	8f 34 40 41 	or %d4,%d4,3
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80000f5e:	91 30 00 2f 	movh.a %a2,61443
80000f62:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000f66:	54 22       	ld.w %d2,[%a2]
80000f68:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000f6c:	a6 42       	or %d2,%d4
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80000f6e:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80000f70:	91 30 00 2f 	movh.a %a2,61443
80000f74:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000f78:	54 22       	ld.w %d2,[%a2]
80000f7a:	6f 02 fb 7f 	jz.t %d2,0,80000f70 <IfxScuWdt_disableSafetyWatchdog+0x8e>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80000f7e:	00 90       	ret 

80000f80 <IfxScuWdt_enableCpuWatchdog>:


void IfxScuWdt_enableCpuWatchdog(uint16 password)
{
80000f80:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80000f82:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80000f86:	8f 72 00 21 	and %d2,%d2,7
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
80000f8a:	7b 30 00 3f 	movh %d3,61443
80000f8e:	1b 03 10 36 	addi %d3,%d3,24832
80000f92:	13 c2 20 23 	madd %d2,%d3,%d2,12
80000f96:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
80000f98:	54 22       	ld.w %d2,[%a2]
80000f9a:	6f 12 0b 00 	jz.t %d2,1,80000fb0 <IfxScuWdt_enableCpuWatchdog+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000f9e:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80000fa2:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000fa6:	54 22       	ld.w %d2,[%a2]
80000fa8:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000fac:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000fae:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000fb0:	06 24       	sh %d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80000fb2:	8f 24 40 31 	or %d3,%d4,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000fb6:	54 22       	ld.w %d2,[%a2]
80000fb8:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000fbc:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000fbe:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80000fc0:	54 22       	ld.w %d2,[%a2]
80000fc2:	6f 02 ff ff 	jnz.t %d2,0,80000fc0 <IfxScuWdt_enableCpuWatchdog+0x40>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 0;         //Clear DR bit in Config_1 register
80000fc6:	d9 23 04 00 	lea %a3,[%a2]4
80000fca:	19 22 04 00 	ld.w %d2,[%a2]4
80000fce:	8f 82 c0 21 	andn %d2,%d2,8
80000fd2:	74 32       	st.w [%a3],%d2
    if (watchdog->CON0.B.LCK)
80000fd4:	54 22       	ld.w %d2,[%a2]
80000fd6:	6f 12 09 00 	jz.t %d2,1,80000fe8 <IfxScuWdt_enableCpuWatchdog+0x68>
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80000fda:	8f 14 40 31 	or %d3,%d4,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000fde:	54 22       	ld.w %d2,[%a2]
80000fe0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000fe4:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000fe6:	74 22       	st.w [%a2],%d2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80000fe8:	8f 34 40 41 	or %d4,%d4,3
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000fec:	54 22       	ld.w %d2,[%a2]
80000fee:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000ff2:	a6 42       	or %d2,%d4
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000ff4:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80000ff6:	54 22       	ld.w %d2,[%a2]
80000ff8:	6f 02 ff 7f 	jz.t %d2,0,80000ff6 <IfxScuWdt_enableCpuWatchdog+0x76>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
80000ffc:	00 90       	ret 

80000ffe <IfxScuWdt_enableSafetyWatchdog>:


void IfxScuWdt_enableSafetyWatchdog(uint16 password)
{
80000ffe:	40 ae       	mov.aa %a14,%sp
80001000:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
80001004:	91 30 00 2f 	movh.a %a2,61443
80001008:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000100c:	54 22       	ld.w %d2,[%a2]
8000100e:	6f 12 0b 00 	jz.t %d2,1,80001024 <IfxScuWdt_enableSafetyWatchdog+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001012:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001016:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000101a:	54 22       	ld.w %d2,[%a2]
8000101c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001020:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001022:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001024:	06 24       	sh %d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001026:	8f 24 40 31 	or %d3,%d4,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000102a:	91 30 00 2f 	movh.a %a2,61443
8000102e:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001032:	54 22       	ld.w %d2,[%a2]
80001034:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001038:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000103a:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
8000103c:	91 30 00 2f 	movh.a %a2,61443
80001040:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001044:	54 22       	ld.w %d2,[%a2]
80001046:	6f 02 fb ff 	jnz.t %d2,0,8000103c <IfxScuWdt_enableSafetyWatchdog+0x3e>
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 0;     //Clear DR bit in Config_1 register
8000104a:	91 30 00 2f 	movh.a %a2,61443
8000104e:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x6002e0f4>>
80001052:	54 22       	ld.w %d2,[%a2]
80001054:	8f 82 c0 21 	andn %d2,%d2,8
80001058:	74 22       	st.w [%a2],%d2
    if (SCU_WDTS_CON0.B.LCK)
8000105a:	91 30 00 2f 	movh.a %a2,61443
8000105e:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001062:	54 22       	ld.w %d2,[%a2]
80001064:	6f 12 09 00 	jz.t %d2,1,80001076 <IfxScuWdt_enableSafetyWatchdog+0x78>
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001068:	8f 14 40 31 	or %d3,%d4,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000106c:	54 22       	ld.w %d2,[%a2]
8000106e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001072:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001074:	74 22       	st.w [%a2],%d2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001076:	8f 34 40 41 	or %d4,%d4,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000107a:	91 30 00 2f 	movh.a %a2,61443
8000107e:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001082:	54 22       	ld.w %d2,[%a2]
80001084:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001088:	a6 42       	or %d2,%d4
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000108a:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
8000108c:	91 30 00 2f 	movh.a %a2,61443
80001090:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001094:	54 22       	ld.w %d2,[%a2]
80001096:	6f 02 fb 7f 	jz.t %d2,0,8000108c <IfxScuWdt_enableSafetyWatchdog+0x8e>
    IfxScuWdt_setSafetyEndinitInline(password);
}
8000109a:	00 90       	ret 

8000109c <IfxScuWdt_getCpuWatchdogPassword>:


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
8000109c:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
8000109e:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800010a2:	8f 72 00 21 	and %d2,%d2,7
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
800010a6:	7b 30 00 3f 	movh %d3,61443
800010aa:	1b 03 10 36 	addi %d3,%d3,24832
800010ae:	13 c2 20 23 	madd %d2,%d3,%d2,12
    password  = watchdog->CON0.B.PW;
800010b2:	60 22       	mov.a %a2,%d2
800010b4:	54 22       	ld.w %d2,[%a2]
800010b6:	37 02 6e 21 	extr.u %d2,%d2,2,14
}
800010ba:	8f f2 83 21 	xor %d2,%d2,63
800010be:	00 90       	ret 

800010c0 <IfxScuWdt_getSafetyWatchdogPassword>:
    return (boolean)IfxScuWdt_getCpuWatchdogEndInitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
}


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
800010c0:	40 ae       	mov.aa %a14,%sp
    password  = watchdog->CON0.B.PW;
800010c2:	91 30 00 2f 	movh.a %a2,61443
800010c6:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
800010ca:	54 22       	ld.w %d2,[%a2]
800010cc:	37 02 6e 21 	extr.u %d2,%d2,2,14
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
800010d0:	8f f2 83 21 	xor %d2,%d2,63
800010d4:	00 90       	ret 

800010d6 <IfxScuWdt_setCpuEndinit>:
    IfxScuWdt_setSafetyEndinit(password);
}


void IfxScuWdt_setCpuEndinit(uint16 password)
{
800010d6:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
800010d8:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800010dc:	8f 72 00 21 	and %d2,%d2,7
    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
800010e0:	7b 30 00 3f 	movh %d3,61443
800010e4:	1b 03 10 36 	addi %d3,%d3,24832
800010e8:	13 c2 20 23 	madd %d2,%d3,%d2,12
800010ec:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
800010ee:	54 22       	ld.w %d2,[%a2]
800010f0:	6f 12 0b 00 	jz.t %d2,1,80001106 <IfxScuWdt_setCpuEndinit+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800010f4:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
800010f8:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800010fc:	54 22       	ld.w %d2,[%a2]
800010fe:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001102:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001104:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001106:	8f 24 00 30 	sh %d3,%d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
8000110a:	8f 33 40 31 	or %d3,%d3,3
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000110e:	54 22       	ld.w %d2,[%a2]
80001110:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001114:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001116:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80001118:	54 22       	ld.w %d2,[%a2]
8000111a:	6f 02 ff 7f 	jz.t %d2,0,80001118 <IfxScuWdt_setCpuEndinit+0x42>
}
8000111e:	00 90       	ret 

80001120 <IfxScuWdt_setSafetyEndinit>:


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
80001120:	40 ae       	mov.aa %a14,%sp
80001122:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
80001126:	91 30 00 2f 	movh.a %a2,61443
8000112a:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000112e:	54 22       	ld.w %d2,[%a2]
80001130:	6f 12 0b 00 	jz.t %d2,1,80001146 <IfxScuWdt_setSafetyEndinit+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001134:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001138:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000113c:	54 22       	ld.w %d2,[%a2]
8000113e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001142:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001144:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001146:	8f 24 00 30 	sh %d3,%d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
8000114a:	8f 33 40 31 	or %d3,%d3,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000114e:	91 30 00 2f 	movh.a %a2,61443
80001152:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001156:	54 22       	ld.w %d2,[%a2]
80001158:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000115c:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000115e:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80001160:	91 30 00 2f 	movh.a %a2,61443
80001164:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001168:	54 22       	ld.w %d2,[%a2]
8000116a:	6f 02 fb 7f 	jz.t %d2,0,80001160 <IfxScuWdt_setSafetyEndinit+0x40>
    IfxScuWdt_setSafetyEndinitInline(password);
}
8000116e:	00 90       	ret 

80001170 <IfxPort_setPinMode>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
80001170:	40 ae       	mov.aa %a14,%sp
80001172:	40 4c       	mov.aa %a12,%a4
80001174:	02 5a       	mov %d10,%d5
80001176:	8f f4 0f c1 	and %d12,%d4,255
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
8000117a:	80 42       	mov.d %d2,%a4
8000117c:	1b 02 01 b0 	addi %d11,%d2,16
    uint8                 iocrIndex = (pinIndex / 4);
80001180:	37 04 66 91 	extr.u %d9,%d4,2,6
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80001184:	8f 34 00 41 	and %d4,%d4,3
80001188:	8f 34 00 80 	sh %d8,%d4,3

    if (port == &MODULE_P40)
8000118c:	7b 40 00 2f 	movh %d2,61444
80001190:	1b 02 00 2e 	addi %d2,%d2,-8192
80001194:	80 43       	mov.d %d3,%a4
80001196:	5f 23 12 00 	jeq %d3,%d2,800011ba <IfxPort_setPinMode+0x4a>
        IfxScuWdt_clearCpuEndinit(passwd);
        port->PDISC.U &= ~(1 << pinIndex);
        IfxScuWdt_setCpuEndinit(passwd);
    }

    __ldmst(&iocr[iocrIndex].U, (0xFFUL << shift), (mode << shift));
8000119a:	8f 29 00 20 	sh %d2,%d9,2
8000119e:	60 b2       	mov.a %a2,%d11
800011a0:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800011a4:	3b f0 0f 40 	mov %d4,255
800011a8:	0f 84 00 40 	sh %d4,%d4,%d8
800011ac:	0f 8a 00 20 	sh %d2,%d10,%d8
                     ::"a"(address), "d"(mask), "d"((long long)value));
800011b0:	82 03       	mov %d3,0
    __asm__ volatile("mov %H2,%1 \n\
800011b2:	02 43       	mov %d3,%d4
800011b4:	49 22 40 08 	ldmst [%a2]0,%e2
}
800011b8:	00 90       	ret 
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800011ba:	6d ff 71 ff 	call 8000109c <IfxScuWdt_getCpuWatchdogPassword>
800011be:	02 2d       	mov %d13,%d2
        IfxScuWdt_clearCpuEndinit(passwd);
800011c0:	02 24       	mov %d4,%d2
800011c2:	6d ff 04 fe 	call 80000dca <IfxScuWdt_clearCpuEndinit>
        port->PDISC.U &= ~(1 << pinIndex);
800011c6:	d9 c2 20 10 	lea %a2,[%a12]96
800011ca:	19 c2 20 10 	ld.w %d2,[%a12]96
800011ce:	d7 02 01 2c 	insert %d2,%d2,0,%d12,1
800011d2:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(passwd);
800011d4:	02 d4       	mov %d4,%d13
800011d6:	6d ff 80 ff 	call 800010d6 <IfxScuWdt_setCpuEndinit>
800011da:	1d ff e0 ff 	j 8000119a <IfxPort_setPinMode+0x2a>

800011de <IfxCpu_Trap_memoryManagementError>:
{
800011de:	40 ae       	mov.aa %a14,%sp
800011e0:	20 08       	sub.a %sp,8
}

IFX_INLINE void* Ifx__getA11(void)
{
    uint32 *res;
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
800011e2:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
800011e4:	8f f4 0f 41 	and %d4,%d4,255
    reg.U = __mfcr(CPU_CORE_ID);
800011e8:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
800011ec:	8f 72 00 21 	and %d2,%d2,7
800011f0:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
800011f4:	80 22       	mov.d %d2,%a2
800011f6:	0f 54 a0 30 	or %d3,%d4,%d5
800011fa:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_MME_HOOK(trapWatch);
800011fe:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80001202:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001204:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001208:	00 80       	rfe 
}
8000120a:	00 90       	ret 

8000120c <IfxCpu_Trap_internalProtectionError>:
{
8000120c:	40 ae       	mov.aa %a14,%sp
8000120e:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80001210:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001212:	b7 14 18 44 	insert %d4,%d4,1,8,24
80001216:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
8000121a:	8f 72 00 21 	and %d2,%d2,7
8000121e:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001222:	80 22       	mov.d %d2,%a2
80001224:	0f 54 a0 30 	or %d3,%d4,%d5
80001228:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_IPE_HOOK(trapWatch);
8000122c:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80001230:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001232:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001236:	00 80       	rfe 
}
80001238:	00 90       	ret 

8000123a <IfxCpu_Trap_instructionError>:
{
8000123a:	40 ae       	mov.aa %a14,%sp
8000123c:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
8000123e:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001240:	b7 24 18 44 	insert %d4,%d4,2,8,24
80001244:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001248:	8f 72 00 21 	and %d2,%d2,7
8000124c:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001250:	80 22       	mov.d %d2,%a2
80001252:	0f 54 a0 30 	or %d3,%d4,%d5
80001256:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_IE_HOOK(trapWatch);
8000125a:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
8000125e:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001260:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001264:	00 80       	rfe 
}
80001266:	00 90       	ret 

80001268 <IfxCpu_Trap_contextManagementError>:
{
80001268:	40 ae       	mov.aa %a14,%sp
8000126a:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
8000126c:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
8000126e:	b7 34 18 44 	insert %d4,%d4,3,8,24
80001272:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001276:	8f 72 00 21 	and %d2,%d2,7
8000127a:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
8000127e:	80 22       	mov.d %d2,%a2
80001280:	0f 54 a0 30 	or %d3,%d4,%d5
80001284:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_CME_HOOK(trapWatch);
80001288:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
8000128c:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
8000128e:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001292:	00 80       	rfe 
}
80001294:	00 90       	ret 

80001296 <IfxCpu_Trap_busError>:
{
80001296:	40 ae       	mov.aa %a14,%sp
80001298:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
8000129a:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
8000129c:	b7 44 18 44 	insert %d4,%d4,4,8,24
800012a0:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
800012a4:	8f 72 00 21 	and %d2,%d2,7
800012a8:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
800012ac:	80 22       	mov.d %d2,%a2
800012ae:	0f 54 a0 30 	or %d3,%d4,%d5
800012b2:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_BE_HOOK(trapWatch);
800012b6:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
800012ba:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
800012bc:	0d 00 40 02 	rslcx 
    __asm("rfe");
800012c0:	00 80       	rfe 
}
800012c2:	00 90       	ret 

800012c4 <IfxCpu_Trap_assertion>:
{
800012c4:	40 ae       	mov.aa %a14,%sp
800012c6:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
800012c8:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
800012ca:	8f f4 0f 41 	and %d4,%d4,255
800012ce:	3b 00 50 20 	mov %d2,1280
800012d2:	a6 24       	or %d4,%d2
800012d4:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
800012d8:	8f 72 00 21 	and %d2,%d2,7
800012dc:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
800012e0:	80 22       	mov.d %d2,%a2
800012e2:	0f 54 a0 30 	or %d3,%d4,%d5
800012e6:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_ASSERT_HOOK(trapWatch);
800012ea:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
800012ee:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
800012f0:	0d 00 40 02 	rslcx 
    __asm("rfe");
800012f4:	00 80       	rfe 
}
800012f6:	00 90       	ret 

800012f8 <IfxCpu_Trap_systemCall_Cpu0>:
{
800012f8:	40 ae       	mov.aa %a14,%sp
800012fa:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
800012fc:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
800012fe:	b7 64 18 44 	insert %d4,%d4,6,8,24
80001302:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001306:	8f 72 00 21 	and %d2,%d2,7
8000130a:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
8000130e:	80 22       	mov.d %d2,%a2
80001310:	0f 54 a0 30 	or %d3,%d4,%d5
80001314:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU0_HOOK(trapWatch);
80001318:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
8000131c:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001320:	00 80       	rfe 
}
80001322:	00 90       	ret 

80001324 <IfxCpu_Trap_systemCall_Cpu1>:
{
80001324:	40 ae       	mov.aa %a14,%sp
80001326:	20 08       	sub.a %sp,8
80001328:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
8000132a:	b7 64 18 44 	insert %d4,%d4,6,8,24
8000132e:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001332:	8f 72 00 21 	and %d2,%d2,7
80001336:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
8000133a:	80 22       	mov.d %d2,%a2
8000133c:	0f 54 a0 30 	or %d3,%d4,%d5
80001340:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU1_HOOK(trapWatch);
80001344:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001348:	0d 00 40 02 	rslcx 
    __asm("rfe");
8000134c:	00 80       	rfe 
}
8000134e:	00 90       	ret 

80001350 <IfxCpu_Trap_systemCall_Cpu2>:
{
80001350:	40 ae       	mov.aa %a14,%sp
80001352:	20 08       	sub.a %sp,8
80001354:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001356:	b7 64 18 44 	insert %d4,%d4,6,8,24
8000135a:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
8000135e:	8f 72 00 21 	and %d2,%d2,7
80001362:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001366:	80 22       	mov.d %d2,%a2
80001368:	0f 54 a0 30 	or %d3,%d4,%d5
8000136c:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU2_HOOK(trapWatch);
80001370:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001374:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001378:	00 80       	rfe 
}
8000137a:	00 90       	ret 

8000137c <IfxCpu_Trap_nonMaskableInterrupt>:
{
8000137c:	40 ae       	mov.aa %a14,%sp
8000137e:	20 08       	sub.a %sp,8
80001380:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001382:	b7 74 18 44 	insert %d4,%d4,7,8,24
80001386:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
8000138a:	8f 72 00 21 	and %d2,%d2,7
8000138e:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001392:	80 22       	mov.d %d2,%a2
80001394:	0f 54 a0 30 	or %d3,%d4,%d5
80001398:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_NMI_HOOK(trapWatch);    
8000139c:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
800013a0:	0d 00 40 02 	rslcx 
    __asm("rfe");
800013a4:	00 80       	rfe 
}
800013a6:	00 90       	ret 

800013a8 <IfxCpu_getIndex>:
    return cpuMode;
}


IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu)
{
800013a8:	40 ae       	mov.aa %a14,%sp
    IfxCpu_ResourceCpu result;
    uint32             index;
    result = IfxCpu_ResourceCpu_none;

    for (index = 0; index < IFXCPU_NUM_MODULES; index++)
800013aa:	82 02       	mov %d2,0
800013ac:	1d 00 03 00 	j 800013b2 <IfxCpu_getIndex+0xa>
800013b0:	c2 12       	add %d2,1
800013b2:	ff 32 18 80 	jge.u %d2,3,800013e2 <IfxCpu_getIndex+0x3a>
    {
        if (IfxCpu_cfg_indexMap[index].module == cpu)
800013b6:	8f 32 00 30 	sh %d3,%d2,3
800013ba:	91 00 00 28 	movh.a %a2,32768
800013be:	d9 22 14 80 	lea %a2,[%a2]532 <80000214 <IfxCpu_cfg_indexMap>>
800013c2:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800013c6:	54 23       	ld.w %d3,[%a2]
800013c8:	80 44       	mov.d %d4,%a4
800013ca:	5f 43 f3 ff 	jne %d3,%d4,800013b0 <IfxCpu_getIndex+0x8>
        {
            result = (IfxCpu_ResourceCpu)IfxCpu_cfg_indexMap[index].index;
800013ce:	06 32       	sh %d2,3
800013d0:	91 00 00 28 	movh.a %a2,32768
800013d4:	d9 22 14 80 	lea %a2,[%a2]532 <80000214 <IfxCpu_cfg_indexMap>>
800013d8:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800013dc:	19 22 04 00 	ld.w %d2,[%a2]4
            break;
800013e0:	00 90       	ret 
    result = IfxCpu_ResourceCpu_none;
800013e2:	82 32       	mov %d2,3
        }
    }

    return result;
}
800013e4:	00 90       	ret 

800013e6 <IfxCpu_getCoreMode>:
{
800013e6:	40 ae       	mov.aa %a14,%sp
800013e8:	80 48       	mov.d %d8,%a4
    IfxCpu_ResourceCpu index = IfxCpu_getIndex(cpu);
800013ea:	6d ff df ff 	call 800013a8 <IfxCpu_getIndex>


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800013ee:	4d c0 e1 3f 	mfcr %d3,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800013f2:	8f 73 00 31 	and %d3,%d3,7
    if (IfxCpu_getCoreIndex() != index)
800013f6:	5f 32 22 00 	jeq %d2,%d3,8000143a <IfxCpu_getCoreMode+0x54>
        dbgsr = cpu->DBGSR;
800013fa:	bb 00 d0 3f 	mov.u %d3,64768
800013fe:	60 82       	mov.a %a2,%d8
80001400:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80001404:	54 23       	ld.w %d3,[%a2]
    if (dbgsr.B.HALT == (uint32)IfxCpu_DBGST_HALT_halt)
80001406:	37 03 e2 40 	extr.u %d4,%d3,1,2
8000140a:	df 14 1c 00 	jeq %d4,1,80001442 <IfxCpu_getCoreMode+0x5c>
        if (dbgsr.B.HALT == (uint32)IfxCpu_DBGST_HALT_run)
8000140e:	df 04 1c 80 	jne %d4,0,80001446 <IfxCpu_getCoreMode+0x60>
            pmcsr_val = &MODULE_SCU.PMCSR[index];
80001412:	06 22       	sh %d2,2
80001414:	7b 30 00 3f 	movh %d3,61443
80001418:	1b 43 0d 36 	addi %d3,%d3,24788
8000141c:	60 32       	mov.a %a2,%d3
8000141e:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
            if (pmcsr_val->B.PMST == (uint32)IfxCpu_PMCSR_PMST_normalMode)
80001422:	54 22       	ld.w %d2,[%a2]
80001424:	37 02 63 24 	extr.u %d2,%d2,8,3
80001428:	df 12 11 00 	jeq %d2,1,8000144a <IfxCpu_getCoreMode+0x64>
                if (pmcsr_val->B.PMST == (uint32)IfxCpu_PMCSR_PMST_idleMode)
8000142c:	54 22       	ld.w %d2,[%a2]
8000142e:	37 02 63 24 	extr.u %d2,%d2,8,3
80001432:	df 32 0e 00 	jeq %d2,3,8000144e <IfxCpu_getCoreMode+0x68>
    cpuMode = IfxCpu_CoreMode_unknown;
80001436:	82 52       	mov %d2,5
80001438:	00 90       	ret 
        dbgsr.U = __mfcr(CPU_DBGSR);
8000143a:	4d 00 d0 3f 	mfcr %d3,$dbgsr
8000143e:	1d ff e4 ff 	j 80001406 <IfxCpu_getCoreMode+0x20>
        cpuMode = IfxCpu_CoreMode_halt;
80001442:	82 02       	mov %d2,0
80001444:	00 90       	ret 
            cpuMode = IfxCpu_CoreMode_unknown;
80001446:	82 52       	mov %d2,5
80001448:	00 90       	ret 
                cpuMode = IfxCpu_CoreMode_run;
8000144a:	82 12       	mov %d2,1
8000144c:	00 90       	ret 
                    cpuMode = IfxCpu_CoreMode_idle;
8000144e:	82 22       	mov %d2,2
}
80001450:	00 90       	ret 

80001452 <IfxCpu_setCoreMode>:
    *lock = 0;
}


boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode)
{
80001452:	40 ae       	mov.aa %a14,%sp
80001454:	80 4c       	mov.d %d12,%a4
80001456:	02 48       	mov %d8,%d4
    uint8              reqslp;
    boolean            retValue;
    IfxCpu_ResourceCpu index = IfxCpu_getIndex(cpu);
80001458:	6d ff a8 ff 	call 800013a8 <IfxCpu_getIndex>
8000145c:	02 2a       	mov %d10,%d2

    /*Modes such as HALT, SLEEP and STBY are not handled at CPU level */
    retValue = ((mode == IfxCpu_CoreMode_halt) || (mode == IfxCpu_CoreMode_sleep)
8000145e:	8b 08 20 42 	ne %d4,%d8,0
80001462:	8b 38 20 32 	ne %d3,%d8,3
80001466:	26 43       	and %d3,%d4
                || (mode == IfxCpu_CoreMode_stby)) ? FALSE : TRUE;
80001468:	df 03 0a 00 	jeq %d3,0,8000147c <IfxCpu_setCoreMode+0x2a>
8000146c:	df 48 05 00 	jeq %d8,4,80001476 <IfxCpu_setCoreMode+0x24>
80001470:	82 19       	mov %d9,1
80001472:	1d 00 06 00 	j 8000147e <IfxCpu_setCoreMode+0x2c>
80001476:	82 09       	mov %d9,0
80001478:	1d 00 03 00 	j 8000147e <IfxCpu_setCoreMode+0x2c>
8000147c:	82 09       	mov %d9,0
    retValue = ((mode == IfxCpu_CoreMode_halt) || (mode == IfxCpu_CoreMode_sleep)
8000147e:	8f f9 0f 91 	and %d9,%d9,255

    reqslp = (mode == IfxCpu_CoreMode_idle) ? IfxScu_PMCSR_REQSLP_Idle : IfxScu_PMCSR_REQSLP_Run;
80001482:	8b 28 00 82 	eq %d8,%d8,2

    if (retValue == TRUE)
80001486:	df 09 04 80 	jne %d9,0,8000148e <IfxCpu_setCoreMode+0x3c>
            IfxScuWdt_setCpuEndinit(cpuWdtPw);
        }
    }

    return retValue;
}
8000148a:	02 92       	mov %d2,%d9
8000148c:	00 90       	ret 
    reg.U = __mfcr(CPU_CORE_ID);
8000148e:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80001492:	8f 72 00 21 	and %d2,%d2,7
        if (IfxCpu_getCoreIndex() != index)
80001496:	5f 2a 24 00 	jeq %d10,%d2,800014de <IfxCpu_setCoreMode+0x8c>
            uint16 safetyWdtPw = IfxScuWdt_getSafetyWatchdogPassword();
8000149a:	6d ff 13 fe 	call 800010c0 <IfxScuWdt_getSafetyWatchdogPassword>
8000149e:	02 2b       	mov %d11,%d2
            IfxScuWdt_clearSafetyEndinit(safetyWdtPw);
800014a0:	02 24       	mov %d4,%d2
800014a2:	6d ff b9 fc 	call 80000e14 <IfxScuWdt_clearSafetyEndinit>
            MODULE_SCU.PMCSR[(uint32)IfxCpu_getIndex(cpu)].B.REQSLP = reqslp;
800014a6:	1b 5a 03 20 	addi %d2,%d10,53
800014aa:	06 22       	sh %d2,2
800014ac:	7b 30 00 3f 	movh %d3,61443
800014b0:	1b 03 00 36 	addi %d3,%d3,24576
800014b4:	60 32       	mov.a %a2,%d3
800014b6:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800014ba:	54 23       	ld.w %d3,[%a2]
800014bc:	37 83 02 30 	insert %d3,%d3,%d8,0,2
800014c0:	74 23       	st.w [%a2],%d3
            IfxScuWdt_setSafetyEndinit(safetyWdtPw);
800014c2:	02 b4       	mov %d4,%d11
800014c4:	6d ff 2e fe 	call 80001120 <IfxScuWdt_setSafetyEndinit>
            cpu->DBGSR.B.HALT = 2; /*reset the HALT bit, if it is already done it is no harm in writing again */
800014c8:	bb 00 d0 2f 	mov.u %d2,64768
800014cc:	60 c2       	mov.a %a2,%d12
800014ce:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800014d2:	54 22       	ld.w %d2,[%a2]
800014d4:	b7 22 82 20 	insert %d2,%d2,2,1,2
800014d8:	74 22       	st.w [%a2],%d2
800014da:	1d ff d8 ff 	j 8000148a <IfxCpu_setCoreMode+0x38>
            uint16 cpuWdtPw = IfxScuWdt_getCpuWatchdogPassword();
800014de:	6d ff df fd 	call 8000109c <IfxScuWdt_getCpuWatchdogPassword>
800014e2:	02 2b       	mov %d11,%d2
            IfxScuWdt_clearCpuEndinit(cpuWdtPw);
800014e4:	02 24       	mov %d4,%d2
800014e6:	6d ff 72 fc 	call 80000dca <IfxScuWdt_clearCpuEndinit>
            MODULE_SCU.PMCSR[(uint32)index].B.REQSLP = reqslp;
800014ea:	1b 5a 03 20 	addi %d2,%d10,53
800014ee:	06 22       	sh %d2,2
800014f0:	7b 30 00 3f 	movh %d3,61443
800014f4:	1b 03 00 36 	addi %d3,%d3,24576
800014f8:	60 32       	mov.a %a2,%d3
800014fa:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800014fe:	54 23       	ld.w %d3,[%a2]
80001500:	37 83 02 30 	insert %d3,%d3,%d8,0,2
80001504:	74 23       	st.w [%a2],%d3
            IfxScuWdt_setCpuEndinit(cpuWdtPw);
80001506:	02 b4       	mov %d4,%d11
80001508:	6d ff e7 fd 	call 800010d6 <IfxScuWdt_setCpuEndinit>
8000150c:	1d ff bf ff 	j 8000148a <IfxCpu_setCoreMode+0x38>

80001510 <IfxCpu_setProgramCounter>:


boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter)
{
80001510:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80001512:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80001516:	8f 72 00 21 	and %d2,%d2,7
    if (cpu < IfxCpu_ResourceCpu_none)
8000151a:	ff 32 17 80 	jge.u %d2,3,80001548 <IfxCpu_setProgramCounter+0x38>
        module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
8000151e:	06 32       	sh %d2,3
80001520:	91 00 00 28 	movh.a %a2,32768
80001524:	d9 22 14 80 	lea %a2,[%a2]532 <80000214 <IfxCpu_cfg_indexMap>>
80001528:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
8000152c:	54 22       	ld.w %d2,[%a2]
    boolean retVal = TRUE;

    if (cpu == IfxCpu_getAddress(IfxCpu_getCoreIndex()))
8000152e:	80 43       	mov.d %d3,%a4
80001530:	5f 23 0f 00 	jeq %d3,%d2,8000154e <IfxCpu_setProgramCounter+0x3e>
    {
        retVal = FALSE;
    }
    else
    {
        cpu->PC.B.PC = programCounter >> 1;
80001534:	bb 80 e0 2f 	mov.u %d2,65032
80001538:	01 42 00 46 	addsc.a %a4,%a4,%d2,0
8000153c:	54 42       	ld.w %d2,[%a4]
8000153e:	37 24 01 20 	insert %d2,%d4,%d2,0,1
80001542:	74 42       	st.w [%a4],%d2
    boolean retVal = TRUE;
80001544:	82 12       	mov %d2,1
80001546:	00 90       	ret 
        module = NULL_PTR;
80001548:	82 02       	mov %d2,0
8000154a:	1d ff f2 ff 	j 8000152e <IfxCpu_setProgramCounter+0x1e>
        retVal = FALSE;
8000154e:	82 02       	mov %d2,0
    }

    return retVal;
}
80001550:	00 90       	ret 

80001552 <IfxCpu_startCore>:
    return retVal;
}


boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter)
{
80001552:	40 ae       	mov.aa %a14,%sp
80001554:	80 49       	mov.d %d9,%a4
    boolean retVal = TRUE;

    /* Set the PC for Core 1 */
    retVal &= IfxCpu_setProgramCounter(cpu, programCounter);
80001556:	6d ff dd ff 	call 80001510 <IfxCpu_setProgramCounter>
8000155a:	8f 12 00 81 	and %d8,%d2,1
    /* Get the mode for Core 1 and set it to RUNNING */

    /* Core not running already */
    if (IfxCpu_getCoreMode(cpu) == IfxCpu_CoreMode_halt)
8000155e:	60 94       	mov.a %a4,%d9
80001560:	6d ff 43 ff 	call 800013e6 <IfxCpu_getCoreMode>
80001564:	df 02 04 00 	jeq %d2,0,8000156c <IfxCpu_startCore+0x1a>
    {
        retVal &= IfxCpu_setCoreMode(cpu, IfxCpu_CoreMode_run);
    }

    return retVal;
}
80001568:	02 82       	mov %d2,%d8
8000156a:	00 90       	ret 
        retVal &= IfxCpu_setCoreMode(cpu, IfxCpu_CoreMode_run);
8000156c:	82 14       	mov %d4,1
8000156e:	60 94       	mov.a %a4,%d9
80001570:	6d ff 71 ff 	call 80001452 <IfxCpu_setCoreMode>
80001574:	26 28       	and %d8,%d2
80001576:	1d ff f9 ff 	j 80001568 <IfxCpu_startCore+0x16>

8000157a <IfxCpu_waitEvent>:


boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec)
{
8000157a:	40 ae       	mov.aa %a14,%sp
8000157c:	40 4c       	mov.aa %a12,%a4
8000157e:	02 48       	mov %d8,%d4
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
80001580:	80 42       	mov.d %d2,%a4
80001582:	b7 02 1c 20 	insert %d2,%d2,0,0,28
80001586:	7b 00 00 3d 	movh %d3,53248
8000158a:	5f 32 28 00 	jeq %d2,%d3,800015da <IfxCpu_waitEvent+0x60>
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
8000158e:	6d ff 4c fa 	call 80000a26 <IfxScuCcu_getSourceFrequency>
80001592:	91 30 00 2f 	movh.a %a2,61443
80001596:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
8000159a:	54 23       	ld.w %d3,[%a2]
8000159c:	37 03 64 34 	extr.u %d3,%d3,8,4
800015a0:	4b 03 41 31 	itof %d3,%d3
800015a4:	4b 32 51 20 	div.f %d2,%d2,%d3

    boolean          errorcnt      = 0U;
    /* Divide with 1000, gives the count value equivalent to milliseconds */
    uint32           stmCount      = (uint32)((IfxScuCcu_getStmFrequency() / 1000) * timeoutMilliSec);
800015a8:	7b a0 47 34 	movh %d3,17530
800015ac:	4b 32 51 20 	div.f %d2,%d2,%d3
800015b0:	4b 08 61 41 	utof %d4,%d8
800015b4:	4b 24 41 40 	mul.f %d4,%d4,%d2
800015b8:	4b 04 71 31 	ftouz %d3,%d4
    uint32           stmCountBegin = STM0_TIM0.U;
800015bc:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x5fff8010>

    while ((*sync & IFXCPU_CFG_ALLCORE_DONE) != IFXCPU_CFG_ALLCORE_DONE)
800015c0:	54 c2       	ld.w %d2,[%a12]
800015c2:	8f 72 00 21 	and %d2,%d2,7
800015c6:	df 72 18 00 	jeq %d2,7,800015f6 <IfxCpu_waitEvent+0x7c>
    __asm__ volatile ("nop" : : : "memory");
800015ca:	00 00       	nop 
    {
        __nop();

        if ((uint32)(STM0_TIM0.U - stmCountBegin) >= stmCount)
800015cc:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x5fff8010>
800015d0:	a2 42       	sub %d2,%d4
800015d2:	3f 32 f7 ff 	jlt.u %d2,%d3,800015c0 <IfxCpu_waitEvent+0x46>
        {
            errorcnt = 1;
800015d6:	82 12       	mov %d2,1
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }

    return errorcnt;
}
800015d8:	00 90       	ret 
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
800015da:	80 42       	mov.d %d2,%a4
800015dc:	b7 02 0c 3a 	insert %d3,%d2,0,20,12
800015e0:	b7 f3 03 3e 	insert %d3,%d3,15,28,3
800015e4:	4d c0 e1 2f 	mfcr %d2,$core_id
800015e8:	8f c2 01 20 	sh %d2,%d2,28
800015ec:	0b 23 80 20 	sub %d2,%d3,%d2
800015f0:	60 2c       	mov.a %a12,%d2
800015f2:	1d ff ce ff 	j 8000158e <IfxCpu_waitEvent+0x14>
    boolean          errorcnt      = 0U;
800015f6:	82 02       	mov %d2,0
800015f8:	00 90       	ret 

800015fa <IfxCpu_emitEvent>:


void IfxCpu_emitEvent(IfxCpu_syncEvent *event)
{
800015fa:	40 ae       	mov.aa %a14,%sp
    Ifx__imaskldmst(event, 1, __mfcr(CPU_CORE_ID), 1);
800015fc:	4d c0 e1 2f 	mfcr %d2,$core_id
80001600:	82 13       	mov %d3,1
80001602:	57 30 21 22 	imask %e2,%d3,%d2,1
80001606:	49 42 40 08 	ldmst [%a4]0,%e2
}
8000160a:	00 90       	ret 

8000160c <Ifx_Cpp_Init>:
#pragma section
#elif defined(__DCC__)
#pragma section CONST
#endif
static void Ifx_Cpp_Init(void)
{
8000160c:	40 ae       	mov.aa %a14,%sp
    Ifx_C_Init();           /*Initialization of C runtime variables */
8000160e:	6d 00 1f 04 	call 80001e4c <Ifx_C_Init>
#elif defined (__HIGHTEC__)
extern void _init(void); /* cpp initialization */
    _init();
#elif defined (__GNUC__) && !defined(__HIGHTEC__)
    extern void _init(void); /* cpp initialization */
    _init();
80001612:	6d 00 01 08 	call 80002614 <_init>
#endif
}
80001616:	00 90       	ret 

80001618 <hardware_init_hook>:
{}
80001618:	00 90       	ret 

8000161a <software_init_hook>:
{}
8000161a:	00 90       	ret 

8000161c <_Core0_start>:
    uint16 password;

    /* Read Password from CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
8000161c:	91 30 00 2f 	movh.a %a2,61443
80001620:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
    __setareg(sp, __USTACK(0));
80001624:	91 20 00 37 	movh.a %a3,28674
80001628:	37 02 6e 21 	extr.u %d2,%d2,2,14
8000162c:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80001630:	8f f2 83 81 	xor %d8,%d2,63
80001634:	80 32       	mov.d %d2,%a3
80001636:	1b 02 60 29 	addi %d2,%d2,-27136
8000163a:	60 2a       	mov.a %sp,%d2
    __asm__ volatile ("dsync" : : : "memory");
8000163c:	0d 00 80 04 	dsync 
    __mtcr(CPU_PSW, IFXCSTART0_PSW_DEFAULT);
80001640:	3b 00 98 20 	mov %d2,2432
80001644:	cd 42 e0 0f 	mtcr $psw,%d2
    pcxi  = __mfcr(CPU_PCXI);
80001648:	4d 00 e0 2f 	mfcr %d2,$pcxi
    pcxi &= IFXCSTART0_PCX_O_S_DEFAULT; /*0xfff00000; */
8000164c:	b7 02 14 20 	insert %d2,%d2,0,0,20
    __mtcr(CPU_PCXI, pcxi);
80001650:	cd 02 e0 0f 	mtcr $pcxi,%d2
    if (enable)
    {                           /* Step 3: Initiate invalidation of current cache contents if any */
        Ifx_CPU_PCON1 pcon1;
        pcon1.U       = 0;
        pcon1.B.PCINV = 1;
        __mtcr(CPU_PCON1, pcon1.U);
80001654:	82 12       	mov %d2,1
80001656:	cd 42 20 09 	mtcr $pcon1,%d2
    reg.U = __mfcr(CPU_CORE_ID);
8000165a:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000165e:	8f 72 00 21 	and %d2,%d2,7
    }

    uint32 coreIndex   = IfxCpu_getCoreIndex();
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80001662:	01 22 03 26 	addsc.a %a2,%a2,%d2,3
80001666:	01 22 02 26 	addsc.a %a2,%a2,%d2,2
8000166a:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
8000166c:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
8000166e:	37 02 6e 21 	extr.u %d2,%d2,2,14
    /*PCACHE enable steps */
    {                           /* Step 1: Set PCBYP to 0 if cache is enabled */
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
80001672:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80001676:	6f 13 41 81 	jnz.t %d3,1,800018f8 <_Core0_start+0x2dc>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000167a:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000167e:	54 22       	ld.w %d2,[%a2]
80001680:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001684:	a6 32       	or %d2,%d3
80001686:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000168a:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
8000168c:	54 22       	ld.w %d2,[%a2]
8000168e:	6f 02 ff ff 	jnz.t %d2,0,8000168c <_Core0_start+0x70>
        Ifx_CPU_PCON0 pcon0;
        pcon0.U       = 0;
        pcon0.B.PCBYP = enable ? 0 : 1; /*depending on the enable bypass bit is reset/set */
        __mtcr(CPU_PCON0, pcon0.U);
80001692:	82 02       	mov %d2,0
80001694:	cd c2 20 09 	mtcr $pcon0,%d2
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80001698:	54 22       	ld.w %d2,[%a2]
8000169a:	6f 12 09 00 	jz.t %d2,1,800016ac <_Core0_start+0x90>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000169e:	54 22       	ld.w %d2,[%a2]
800016a0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800016a4:	a6 32       	or %d2,%d3
800016a6:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800016aa:	74 22       	st.w [%a2],%d2

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800016ac:	54 22       	ld.w %d2,[%a2]
800016ae:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800016b2:	a6 32       	or %d2,%d3
800016b4:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800016b8:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800016ba:	54 22       	ld.w %d2,[%a2]
800016bc:	6f 02 ff 7f 	jz.t %d2,0,800016ba <_Core0_start+0x9e>
    __asm__ volatile ("isync" : : : "memory");
800016c0:	0d 00 c0 04 	isync 
    reg.U = __mfcr(CPU_CORE_ID);
800016c4:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800016c8:	7b 30 00 3f 	movh %d3,61443
800016cc:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800016d0:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800016d4:	13 c2 20 23 	madd %d2,%d3,%d2,12
800016d8:	60 22       	mov.a %a2,%d2
    password  = watchdog->CON0.B.PW;
800016da:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
800016dc:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
800016de:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
800016e2:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
800016e6:	6f 13 fd 80 	jnz.t %d3,1,800018e0 <_Core0_start+0x2c4>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800016ea:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800016ee:	54 22       	ld.w %d2,[%a2]
800016f0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800016f4:	a6 32       	or %d2,%d3
800016f6:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800016fa:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
800016fc:	54 22       	ld.w %d2,[%a2]
800016fe:	6f 02 ff ff 	jnz.t %d2,0,800016fc <_Core0_start+0xe0>
        __mtcr(CPU_DCON0, dcon0.U);
80001702:	82 22       	mov %d2,2
80001704:	cd 02 04 09 	mtcr $dcon0,%d2
    if (watchdog->CON0.B.LCK)
80001708:	54 22       	ld.w %d2,[%a2]
8000170a:	6f 12 09 00 	jz.t %d2,1,8000171c <_Core0_start+0x100>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000170e:	54 22       	ld.w %d2,[%a2]
80001710:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001714:	a6 32       	or %d2,%d3
80001716:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000171a:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000171c:	54 22       	ld.w %d2,[%a2]
8000171e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001722:	a6 32       	or %d2,%d3
80001724:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001728:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
8000172a:	54 22       	ld.w %d2,[%a2]
8000172c:	6f 02 ff 7f 	jz.t %d2,0,8000172a <_Core0_start+0x10e>
80001730:	0d 00 c0 04 	isync 
    if (watchdog->CON0.B.LCK)
80001734:	91 30 00 2f 	movh.a %a2,61443
80001738:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
8000173c:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001740:	8f 28 00 30 	sh %d3,%d8,2
    if (watchdog->CON0.B.LCK)
80001744:	6f 12 09 00 	jz.t %d2,1,80001756 <_Core0_start+0x13a>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001748:	54 22       	ld.w %d2,[%a2]
8000174a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000174e:	a6 32       	or %d2,%d3
80001750:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001754:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001756:	91 30 00 2f 	movh.a %a2,61443
8000175a:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
8000175e:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80001762:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001766:	a6 32       	or %d2,%d3
80001768:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000176c:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
8000176e:	54 22       	ld.w %d2,[%a2]
80001770:	6f 02 ff ff 	jnz.t %d2,0,8000176e <_Core0_start+0x152>
    __mtcr(CPU_BTV, (uint32)__TRAPTAB(0));
80001774:	91 00 00 38 	movh.a %a3,32768
80001778:	80 32       	mov.d %d2,%a3
8000177a:	1b 02 10 20 	addi %d2,%d2,256
8000177e:	cd 42 e2 0f 	mtcr $btv,%d2
    __mtcr(CPU_BIV, (uint32)__INTTAB(0));
80001782:	91 f0 01 38 	movh.a %a3,32799
80001786:	80 32       	mov.d %d2,%a3
80001788:	1b 02 00 24 	addi %d2,%d2,16384
8000178c:	cd 02 e2 0f 	mtcr $biv,%d2
    __mtcr(CPU_ISP, (uint32)__ISTACK(0));
80001790:	91 20 00 37 	movh.a %a3,28674
80001794:	80 32       	mov.d %d2,%a3
80001796:	1b 02 b0 29 	addi %d2,%d2,-25856
8000179a:	cd 82 e2 0f 	mtcr $isp,%d2
    if (watchdog->CON0.B.LCK)
8000179e:	54 22       	ld.w %d2,[%a2]
800017a0:	6f 12 09 00 	jz.t %d2,1,800017b2 <_Core0_start+0x196>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800017a4:	54 22       	ld.w %d2,[%a2]
800017a6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800017aa:	a6 32       	or %d2,%d3
800017ac:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800017b0:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800017b2:	91 30 00 2f 	movh.a %a2,61443
800017b6:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
800017ba:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
800017be:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800017c2:	a6 32       	or %d2,%d3
800017c4:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800017c8:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
800017ca:	54 22       	ld.w %d2,[%a2]
800017cc:	6f 02 ff 7f 	jz.t %d2,0,800017ca <_Core0_start+0x1ae>
    __setareg(a0, __SDATA1(0));
800017d0:	91 10 00 26 	movh.a %a2,24577
800017d4:	80 22       	mov.d %d2,%a2
800017d6:	1b 02 00 28 	addi %d2,%d2,-32768
800017da:	60 20       	mov.a %a0,%d2
    __setareg(a1, __SDATA2(0));
800017dc:	91 10 00 28 	movh.a %a2,32769
800017e0:	80 22       	mov.d %d2,%a2
800017e2:	1b 02 00 28 	addi %d2,%d2,-32768
800017e6:	60 21       	mov.a %a1,%d2
    __setareg(a8, __SDATA3(0));
800017e8:	91 10 00 28 	movh.a %a2,32769
800017ec:	80 22       	mov.d %d2,%a2
800017ee:	1b 02 00 28 	addi %d2,%d2,-32768
800017f2:	60 28       	mov.a %a8,%d2
    __setareg(a9, __SDATA4(0));
800017f4:	91 10 00 29 	movh.a %a2,36865
800017f8:	80 22       	mov.d %d2,%a2
800017fa:	1b 02 00 28 	addi %d2,%d2,-32768
800017fe:	60 29       	mov.a %a9,%d2
    uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
80001800:	91 20 00 37 	movh.a %a3,28674
80001804:	91 20 00 27 	movh.a %a2,28674
80001808:	d9 33 c0 09 	lea %a3,[%a3]-25600 <70019c00 <__CSA0>>
8000180c:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <7001bc00 <__CSA0_END>>
80001810:	01 32 20 20 	sub.a %a2,%a2,%a3
80001814:	80 22       	mov.d %d2,%a2
80001816:	8f a2 1f 70 	sh %d7,%d2,-6
    uint32 *prvCsa      = csaBegin;
8000181a:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
8000181c:	1b d7 ff 0f 	addi %d0,%d7,-3
    for (k = 0U; k < numOfCsa; k++)
80001820:	82 03       	mov %d3,0
    uint32 *nxtCsa      = csaBegin;
80001822:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80001824:	7b f0 00 40 	movh %d4,15
    for (k = 0U; k < numOfCsa; k++)
80001828:	df 07 27 00 	jeq %d7,0,80001876 <_Core0_start+0x25a>
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
8000182c:	37 02 70 53 	extr.u %d5,%d2,6,16
80001830:	8f 42 1f 60 	sh %d6,%d2,-12
80001834:	26 46       	and %d6,%d4
80001836:	a6 65       	or %d5,%d6
        if (k == 0U)
80001838:	df 03 16 00 	jeq %d3,0,80001864 <_Core0_start+0x248>
            *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
8000183c:	74 25       	st.w [%a2],%d5
        if (k == (numOfCsa - 3U))
8000183e:	5f 03 04 80 	jne %d3,%d0,80001846 <_Core0_start+0x22a>
            __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80001842:	cd c5 e3 0f 	mtcr $lcx,%d5
    for (k = 0U; k < numOfCsa; k++)
80001846:	c2 13       	add %d3,1
80001848:	60 22       	mov.a %a2,%d2
        nxtCsa += 16U;           /* next CSA */
8000184a:	1b 02 04 50 	addi %d5,%d2,64
    for (k = 0U; k < numOfCsa; k++)
8000184e:	5f 37 0f 00 	jeq %d7,%d3,8000186c <_Core0_start+0x250>
        nxtCsa += 16U;           /* next CSA */
80001852:	02 52       	mov %d2,%d5
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80001854:	37 02 70 53 	extr.u %d5,%d2,6,16
80001858:	8f 42 1f 60 	sh %d6,%d2,-12
8000185c:	26 46       	and %d6,%d4
8000185e:	a6 65       	or %d5,%d6
        if (k == 0U)
80001860:	df 03 ee ff 	jne %d3,0,8000183c <_Core0_start+0x220>
            __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80001864:	cd 85 e3 0f 	mtcr $fcx,%d5
80001868:	1d ff eb ff 	j 8000183e <_Core0_start+0x222>
8000186c:	1b f7 ff 2f 	addi %d2,%d7,-1
80001870:	06 62       	sh %d2,6
80001872:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;
80001876:	82 02       	mov %d2,0
80001878:	74 22       	st.w [%a2],%d2
        uint16 safetyWdtPassword = IfxScuWdt_getSafetyWatchdogPassword();
8000187a:	6d ff 23 fc 	call 800010c0 <IfxScuWdt_getSafetyWatchdogPassword>
        IfxScuWdt_disableCpuWatchdog(cpuWdtPassword);
8000187e:	02 84       	mov %d4,%d8
        uint16 safetyWdtPassword = IfxScuWdt_getSafetyWatchdogPassword();
80001880:	02 29       	mov %d9,%d2
        IfxScuWdt_disableCpuWatchdog(cpuWdtPassword);
80001882:	6d ff f1 fa 	call 80000e64 <IfxScuWdt_disableCpuWatchdog>
        IfxScuWdt_disableSafetyWatchdog(safetyWdtPassword);
80001886:	02 94       	mov %d4,%d9
80001888:	6d ff 2d fb 	call 80000ee2 <IfxScuWdt_disableSafetyWatchdog>
       	hardware_init_hook();
8000188c:	6d ff c6 fe 	call 80001618 <hardware_init_hook>
        Ifx_Cpp_Init();
80001890:	6d ff be fe 	call 8000160c <Ifx_Cpp_Init>
       	software_init_hook();
80001894:	6d ff c3 fe 	call 8000161a <software_init_hook>
        IfxScuWdt_enableCpuWatchdog(cpuWdtPassword);
80001898:	02 84       	mov %d4,%d8
8000189a:	6d ff 73 fb 	call 80000f80 <IfxScuWdt_enableCpuWatchdog>
        IfxScuWdt_enableSafetyWatchdog(safetyWdtPassword);
8000189e:	02 94       	mov %d4,%d9
800018a0:	6d ff af fb 	call 80000ffe <IfxScuWdt_enableSafetyWatchdog>
    IFXCPU_CSTART_CCU_INIT_HOOK();
800018a4:	91 00 00 48 	movh.a %a4,32768
800018a8:	d9 44 04 90 	lea %a4,[%a4]580 <80000244 <IfxScuCcu_defaultClockConfig>>
800018ac:	6d ff ee f8 	call 80000a88 <IfxScuCcu_init>
    (void)IfxCpu_startCore(&MODULE_CPU1, (uint32)&_Core1_start);       /*The status returned by function call is ignored */
800018b0:	91 00 00 28 	movh.a %a2,32768
800018b4:	80 22       	mov.d %d2,%a2
800018b6:	1b 02 91 41 	addi %d4,%d2,6416
800018ba:	91 30 88 4f 	movh.a %a4,63619
800018be:	6d ff 4a fe 	call 80001552 <IfxCpu_startCore>
    (void)IfxCpu_startCore(&MODULE_CPU2, (uint32)&_Core2_start);       /*The status returned by function call is ignored */
800018c2:	91 00 00 28 	movh.a %a2,32768
800018c6:	80 22       	mov.d %d2,%a2
800018c8:	1b e2 ba 41 	addi %d4,%d2,7086
800018cc:	91 50 88 4f 	movh.a %a4,63621
800018d0:	6d ff 41 fe 	call 80001552 <IfxCpu_startCore>
    __non_return_call(core0_main);
800018d4:	91 00 00 28 	movh.a %a2,32768
800018d8:	d9 22 d2 f1 	lea %a2,[%a2]8146 <80001fd2 <core0_main>>
800018dc:	dc 02       	ji %a2
}
800018de:	00 90       	ret 
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800018e0:	54 24       	ld.w %d4,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800018e2:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800018e6:	b7 04 10 40 	insert %d4,%d4,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800018ea:	0f 34 a0 20 	or %d2,%d4,%d3
800018ee:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800018f2:	74 22       	st.w [%a2],%d2
800018f4:	1d ff fd fe 	j 800016ee <_Core0_start+0xd2>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800018f8:	54 24       	ld.w %d4,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800018fa:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800018fe:	b7 04 10 40 	insert %d4,%d4,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001902:	0f 34 a0 20 	or %d2,%d4,%d3
80001906:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000190a:	74 22       	st.w [%a2],%d2
8000190c:	1d ff b9 fe 	j 8000167e <_Core0_start+0x62>

80001910 <_Core1_start>:
    password  = watchdog->CON0.B.PW;
80001910:	91 30 00 2f 	movh.a %a2,61443
80001914:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80001918:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
8000191c:	37 02 6e 21 	extr.u %d2,%d2,2,14
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[1]);

    IFX_CFG_CPU_CSTART_PRE_C_INIT_HOOK(1);  /*Test Stack, CSA and Cache */

    /* Load user stack pointer */
    __setareg(sp, __USTACK(1));
80001920:	91 20 00 26 	movh.a %a2,24578
80001924:	8f f2 83 41 	xor %d4,%d2,63
80001928:	80 22       	mov.d %d2,%a2
8000192a:	1b 02 60 2b 	addi %d2,%d2,-18944
8000192e:	60 2a       	mov.a %sp,%d2
    __asm__ volatile ("dsync" : : : "memory");
80001930:	0d 00 80 04 	dsync 
    __dsync();

    /* Set the PSW to its reset value in case of a warm start,clear PSW.IS */
    __mtcr(CPU_PSW, IFXCSTART1_PSW_DEFAULT);    /* 0x00000980 */
80001934:	3b 00 98 20 	mov %d2,2432
80001938:	cd 42 e0 0f 	mtcr $psw,%d2

    /* Set the PCXS and PCXO to its reset value in case of a warm start */
    pcxi  = __mfcr(CPU_PCXI);
8000193c:	4d 00 e0 2f 	mfcr %d2,$pcxi
    pcxi &= IFXCSTART1_PCX_O_S_DEFAULT; /*0xfff00000; */
80001940:	b7 02 14 20 	insert %d2,%d2,0,0,20
    __mtcr(CPU_PCXI, pcxi);
80001944:	cd 02 e0 0f 	mtcr $pcxi,%d2
        __mtcr(CPU_PCON1, pcon1.U);
80001948:	82 12       	mov %d2,1
8000194a:	cd 42 20 09 	mtcr $pcon1,%d2
    reg.U = __mfcr(CPU_CORE_ID);
8000194e:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80001952:	7b 30 00 3f 	movh %d3,61443
80001956:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000195a:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
8000195e:	13 c2 20 23 	madd %d2,%d3,%d2,12
80001962:	60 22       	mov.a %a2,%d2
80001964:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80001966:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80001968:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
8000196c:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80001970:	6f 13 13 81 	jnz.t %d3,1,80001b96 <_Core1_start+0x286>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001974:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001978:	54 22       	ld.w %d2,[%a2]
8000197a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000197e:	a6 32       	or %d2,%d3
80001980:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001984:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80001986:	54 22       	ld.w %d2,[%a2]
80001988:	6f 02 ff ff 	jnz.t %d2,0,80001986 <_Core1_start+0x76>
        __mtcr(CPU_PCON0, pcon0.U);
8000198c:	82 02       	mov %d2,0
8000198e:	cd c2 20 09 	mtcr $pcon0,%d2
    if (watchdog->CON0.B.LCK)
80001992:	54 22       	ld.w %d2,[%a2]
80001994:	6f 12 09 00 	jz.t %d2,1,800019a6 <_Core1_start+0x96>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001998:	54 22       	ld.w %d2,[%a2]
8000199a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000199e:	a6 32       	or %d2,%d3
800019a0:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800019a4:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800019a6:	54 22       	ld.w %d2,[%a2]
800019a8:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800019ac:	a6 32       	or %d2,%d3
800019ae:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800019b2:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
800019b4:	54 22       	ld.w %d2,[%a2]
800019b6:	6f 02 ff 7f 	jz.t %d2,0,800019b4 <_Core1_start+0xa4>
    __asm__ volatile ("isync" : : : "memory");
800019ba:	0d 00 c0 04 	isync 
    reg.U = __mfcr(CPU_CORE_ID);
800019be:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800019c2:	7b 30 00 3f 	movh %d3,61443
800019c6:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800019ca:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800019ce:	13 c2 20 23 	madd %d2,%d3,%d2,12
800019d2:	60 22       	mov.a %a2,%d2
    password  = watchdog->CON0.B.PW;
800019d4:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
800019d6:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
800019d8:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
800019dc:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
800019e0:	6f 13 cf 80 	jnz.t %d3,1,80001b7e <_Core1_start+0x26e>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800019e4:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800019e8:	54 22       	ld.w %d2,[%a2]
800019ea:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800019ee:	a6 32       	or %d2,%d3
800019f0:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800019f4:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
800019f6:	54 22       	ld.w %d2,[%a2]
800019f8:	6f 02 ff ff 	jnz.t %d2,0,800019f6 <_Core1_start+0xe6>
        __mtcr(CPU_DCON0, dcon0.U);
800019fc:	82 02       	mov %d2,0
800019fe:	cd 02 04 09 	mtcr $dcon0,%d2
    if (watchdog->CON0.B.LCK)
80001a02:	54 22       	ld.w %d2,[%a2]
80001a04:	6f 12 09 00 	jz.t %d2,1,80001a16 <_Core1_start+0x106>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001a08:	54 22       	ld.w %d2,[%a2]
80001a0a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001a0e:	a6 32       	or %d2,%d3
80001a10:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001a14:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001a16:	54 22       	ld.w %d2,[%a2]
80001a18:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001a1c:	a6 32       	or %d2,%d3
80001a1e:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001a22:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80001a24:	54 22       	ld.w %d2,[%a2]
80001a26:	6f 02 ff 7f 	jz.t %d2,0,80001a24 <_Core1_start+0x114>
80001a2a:	0d 00 c0 04 	isync 
    if (watchdog->CON0.B.LCK)
80001a2e:	91 30 00 2f 	movh.a %a2,61443
80001a32:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80001a36:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001a3a:	06 24       	sh %d4,2
    if (watchdog->CON0.B.LCK)
80001a3c:	6f 12 09 00 	jz.t %d2,1,80001a4e <_Core1_start+0x13e>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001a40:	54 22       	ld.w %d2,[%a2]
80001a42:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001a46:	a6 42       	or %d2,%d4
80001a48:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001a4c:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001a4e:	91 30 00 2f 	movh.a %a2,61443
80001a52:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80001a56:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80001a5a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001a5e:	a6 42       	or %d2,%d4
80001a60:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001a64:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80001a66:	54 22       	ld.w %d2,[%a2]
80001a68:	6f 02 ff ff 	jnz.t %d2,0,80001a66 <_Core1_start+0x156>

    /* Clear the ENDINIT bit in the WDT_CON1 register, inline funtion */
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[1], wdtPassword);

    /* Load Base Address of Trap Vector Table. */
    __mtcr(CPU_BTV, (uint32)__TRAPTAB(1));
80001a6c:	91 f0 01 38 	movh.a %a3,32799
80001a70:	80 32       	mov.d %d2,%a3
80001a72:	1b 02 20 26 	addi %d2,%d2,25088
80001a76:	cd 42 e2 0f 	mtcr $btv,%d2

    /* Load Base Address of Interrupt Vector Table. we will do this later in the program */
    __mtcr(CPU_BIV, (uint32)__INTTAB(1));
80001a7a:	91 f0 01 38 	movh.a %a3,32799
80001a7e:	80 32       	mov.d %d2,%a3
80001a80:	1b 02 00 24 	addi %d2,%d2,16384
80001a84:	cd 02 e2 0f 	mtcr $biv,%d2

    /* Load interupt stack pointer. */
    __mtcr(CPU_ISP, (uint32)__ISTACK(1));
80001a88:	91 20 00 36 	movh.a %a3,24578
80001a8c:	80 32       	mov.d %d2,%a3
80001a8e:	1b 02 b0 2b 	addi %d2,%d2,-17664
80001a92:	cd 82 e2 0f 	mtcr $isp,%d2
    if (watchdog->CON0.B.LCK)
80001a96:	54 22       	ld.w %d2,[%a2]
80001a98:	6f 12 09 00 	jz.t %d2,1,80001aaa <_Core1_start+0x19a>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001a9c:	54 22       	ld.w %d2,[%a2]
80001a9e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001aa2:	a6 42       	or %d2,%d4
80001aa4:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001aa8:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001aaa:	91 30 00 2f 	movh.a %a2,61443
80001aae:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80001ab2:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80001ab6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001aba:	a6 42       	or %d2,%d4
80001abc:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001ac0:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80001ac2:	54 22       	ld.w %d2,[%a2]
80001ac4:	6f 02 ff 7f 	jz.t %d2,0,80001ac2 <_Core1_start+0x1b2>

    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[1], wdtPassword);

    /* initialize SDA base pointers */
    __setareg(a0, __SDATA1(1));
80001ac8:	91 10 00 26 	movh.a %a2,24577
80001acc:	80 22       	mov.d %d2,%a2
80001ace:	1b 02 00 28 	addi %d2,%d2,-32768
80001ad2:	60 20       	mov.a %a0,%d2
    __setareg(a1, __SDATA2(1));
80001ad4:	91 10 00 28 	movh.a %a2,32769
80001ad8:	80 22       	mov.d %d2,%a2
80001ada:	1b 02 00 28 	addi %d2,%d2,-32768
80001ade:	60 21       	mov.a %a1,%d2

    /* These to be un commented if A8 and A9 are required to be initialised */
    __setareg(a8, __SDATA3(1));
80001ae0:	91 10 00 28 	movh.a %a2,32769
80001ae4:	80 22       	mov.d %d2,%a2
80001ae6:	1b 02 00 28 	addi %d2,%d2,-32768
80001aea:	60 28       	mov.a %a8,%d2
    __setareg(a9, __SDATA4(1));
80001aec:	91 10 00 29 	movh.a %a2,36865
80001af0:	80 22       	mov.d %d2,%a2
80001af2:	1b 02 00 28 	addi %d2,%d2,-32768
80001af6:	60 29       	mov.a %a9,%d2
    uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
80001af8:	91 20 00 36 	movh.a %a3,24578
80001afc:	91 20 00 26 	movh.a %a2,24578
80001b00:	d9 33 c0 0b 	lea %a3,[%a3]-17408 <6001bc00 <__CSA1>>
80001b04:	d9 22 c0 0d 	lea %a2,[%a2]-9216 <6001dc00 <__CSA1_END>>
80001b08:	01 32 20 20 	sub.a %a2,%a2,%a3
80001b0c:	80 22       	mov.d %d2,%a2
80001b0e:	8f a2 1f 60 	sh %d6,%d2,-6
    uint32 *prvCsa      = csaBegin;
80001b12:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
80001b14:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80001b18:	82 03       	mov %d3,0
    uint32 *nxtCsa      = csaBegin;
80001b1a:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80001b1c:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
80001b20:	df 06 27 00 	jeq %d6,0,80001b6e <_Core1_start+0x25e>
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80001b24:	37 02 70 43 	extr.u %d4,%d2,6,16
80001b28:	8f 42 1f 50 	sh %d5,%d2,-12
80001b2c:	26 75       	and %d5,%d7
80001b2e:	a6 54       	or %d4,%d5
        if (k == 0U)
80001b30:	df 03 16 00 	jeq %d3,0,80001b5c <_Core1_start+0x24c>
            *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
80001b34:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80001b36:	5f 03 04 80 	jne %d3,%d0,80001b3e <_Core1_start+0x22e>
            __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80001b3a:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
80001b3e:	c2 13       	add %d3,1
80001b40:	60 22       	mov.a %a2,%d2
        nxtCsa += 16U;           /* next CSA */
80001b42:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80001b46:	5f 36 0f 00 	jeq %d6,%d3,80001b64 <_Core1_start+0x254>
        nxtCsa += 16U;           /* next CSA */
80001b4a:	02 42       	mov %d2,%d4
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80001b4c:	37 02 70 43 	extr.u %d4,%d2,6,16
80001b50:	8f 42 1f 50 	sh %d5,%d2,-12
80001b54:	26 75       	and %d5,%d7
80001b56:	a6 54       	or %d4,%d5
        if (k == 0U)
80001b58:	df 03 ee ff 	jne %d3,0,80001b34 <_Core1_start+0x224>
            __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80001b5c:	cd 84 e3 0f 	mtcr $fcx,%d4
80001b60:	1d ff eb ff 	j 80001b36 <_Core1_start+0x226>
80001b64:	1b f6 ff 2f 	addi %d2,%d6,-1
80001b68:	06 62       	sh %d2,6
80001b6a:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;
80001b6e:	82 02       	mov %d2,0
80001b70:	74 22       	st.w [%a2],%d2

    IfxCpu_initCSA((uint32 *)__CSA(1), (uint32 *)__CSA_END(1));

    /*Call main function of Cpu0 */
    __non_return_call(core1_main);
80001b72:	91 00 00 28 	movh.a %a2,32768
80001b76:	d9 22 12 02 	lea %a2,[%a2]8210 <80002012 <core1_main>>
80001b7a:	dc 02       	ji %a2
}
80001b7c:	00 90       	ret 
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001b7e:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001b80:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001b84:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001b88:	0f 35 a0 20 	or %d2,%d5,%d3
80001b8c:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001b90:	74 22       	st.w [%a2],%d2
80001b92:	1d ff 2b ff 	j 800019e8 <_Core1_start+0xd8>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001b96:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001b98:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001b9c:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001ba0:	0f 35 a0 20 	or %d2,%d5,%d3
80001ba4:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001ba8:	74 22       	st.w [%a2],%d2
80001baa:	1d ff e7 fe 	j 80001978 <_Core1_start+0x68>

80001bae <_Core2_start>:
    password  = watchdog->CON0.B.PW;
80001bae:	91 30 00 2f 	movh.a %a2,61443
80001bb2:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80001bb6:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80001bba:	37 02 6e 21 	extr.u %d2,%d2,2,14
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[2]);

    IFX_CFG_CPU_CSTART_PRE_C_INIT_HOOK(2);  /*Test Stack, CSA and Cache */

    /* Load user stack pointer */
    __setareg(sp, __USTACK(2));
80001bbe:	91 20 00 25 	movh.a %a2,20482
80001bc2:	8f f2 83 41 	xor %d4,%d2,63
80001bc6:	80 22       	mov.d %d2,%a2
80001bc8:	1b 02 60 2b 	addi %d2,%d2,-18944
80001bcc:	60 2a       	mov.a %sp,%d2
    __asm__ volatile ("dsync" : : : "memory");
80001bce:	0d 00 80 04 	dsync 
    __dsync();

    /* Set the PSW to its reset value in case of a warm start,clear PSW.IS */
    __mtcr(CPU_PSW, IFXCSTART2_PSW_DEFAULT);    /* 0x00000980 */
80001bd2:	3b 00 98 20 	mov %d2,2432
80001bd6:	cd 42 e0 0f 	mtcr $psw,%d2

    /* Set the PCXS and PCXO to its reset value in case of a warm start */
    pcxi  = __mfcr(CPU_PCXI);
80001bda:	4d 00 e0 2f 	mfcr %d2,$pcxi
    pcxi &= IFXCSTART2_PCX_O_S_DEFAULT; /*0xfff00000; */
80001bde:	b7 02 14 20 	insert %d2,%d2,0,0,20
    __mtcr(CPU_PCXI, pcxi);
80001be2:	cd 02 e0 0f 	mtcr $pcxi,%d2
        __mtcr(CPU_PCON1, pcon1.U);
80001be6:	82 12       	mov %d2,1
80001be8:	cd 42 20 09 	mtcr $pcon1,%d2
    reg.U = __mfcr(CPU_CORE_ID);
80001bec:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80001bf0:	7b 30 00 3f 	movh %d3,61443
80001bf4:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80001bf8:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80001bfc:	13 c2 20 23 	madd %d2,%d3,%d2,12
80001c00:	60 22       	mov.a %a2,%d2
80001c02:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80001c04:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80001c06:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
80001c0a:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80001c0e:	6f 13 13 81 	jnz.t %d3,1,80001e34 <_Core2_start+0x286>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001c12:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001c16:	54 22       	ld.w %d2,[%a2]
80001c18:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001c1c:	a6 32       	or %d2,%d3
80001c1e:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001c22:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80001c24:	54 22       	ld.w %d2,[%a2]
80001c26:	6f 02 ff ff 	jnz.t %d2,0,80001c24 <_Core2_start+0x76>
        __mtcr(CPU_PCON0, pcon0.U);
80001c2a:	82 02       	mov %d2,0
80001c2c:	cd c2 20 09 	mtcr $pcon0,%d2
    if (watchdog->CON0.B.LCK)
80001c30:	54 22       	ld.w %d2,[%a2]
80001c32:	6f 12 09 00 	jz.t %d2,1,80001c44 <_Core2_start+0x96>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001c36:	54 22       	ld.w %d2,[%a2]
80001c38:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001c3c:	a6 32       	or %d2,%d3
80001c3e:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001c42:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001c44:	54 22       	ld.w %d2,[%a2]
80001c46:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001c4a:	a6 32       	or %d2,%d3
80001c4c:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001c50:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80001c52:	54 22       	ld.w %d2,[%a2]
80001c54:	6f 02 ff 7f 	jz.t %d2,0,80001c52 <_Core2_start+0xa4>
    __asm__ volatile ("isync" : : : "memory");
80001c58:	0d 00 c0 04 	isync 
    reg.U = __mfcr(CPU_CORE_ID);
80001c5c:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80001c60:	7b 30 00 3f 	movh %d3,61443
80001c64:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80001c68:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80001c6c:	13 c2 20 23 	madd %d2,%d3,%d2,12
80001c70:	60 22       	mov.a %a2,%d2
    password  = watchdog->CON0.B.PW;
80001c72:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80001c74:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80001c76:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
80001c7a:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80001c7e:	6f 13 cf 80 	jnz.t %d3,1,80001e1c <_Core2_start+0x26e>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001c82:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001c86:	54 22       	ld.w %d2,[%a2]
80001c88:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001c8c:	a6 32       	or %d2,%d3
80001c8e:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001c92:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80001c94:	54 22       	ld.w %d2,[%a2]
80001c96:	6f 02 ff ff 	jnz.t %d2,0,80001c94 <_Core2_start+0xe6>
        __mtcr(CPU_DCON0, dcon0.U);
80001c9a:	82 02       	mov %d2,0
80001c9c:	cd 02 04 09 	mtcr $dcon0,%d2
    if (watchdog->CON0.B.LCK)
80001ca0:	54 22       	ld.w %d2,[%a2]
80001ca2:	6f 12 09 00 	jz.t %d2,1,80001cb4 <_Core2_start+0x106>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001ca6:	54 22       	ld.w %d2,[%a2]
80001ca8:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001cac:	a6 32       	or %d2,%d3
80001cae:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001cb2:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001cb4:	54 22       	ld.w %d2,[%a2]
80001cb6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001cba:	a6 32       	or %d2,%d3
80001cbc:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001cc0:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80001cc2:	54 22       	ld.w %d2,[%a2]
80001cc4:	6f 02 ff 7f 	jz.t %d2,0,80001cc2 <_Core2_start+0x114>
80001cc8:	0d 00 c0 04 	isync 
    if (watchdog->CON0.B.LCK)
80001ccc:	91 30 00 2f 	movh.a %a2,61443
80001cd0:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80001cd4:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001cd8:	06 24       	sh %d4,2
    if (watchdog->CON0.B.LCK)
80001cda:	6f 12 09 00 	jz.t %d2,1,80001cec <_Core2_start+0x13e>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001cde:	54 22       	ld.w %d2,[%a2]
80001ce0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001ce4:	a6 42       	or %d2,%d4
80001ce6:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001cea:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001cec:	91 30 00 2f 	movh.a %a2,61443
80001cf0:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80001cf4:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80001cf8:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001cfc:	a6 42       	or %d2,%d4
80001cfe:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001d02:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80001d04:	54 22       	ld.w %d2,[%a2]
80001d06:	6f 02 ff ff 	jnz.t %d2,0,80001d04 <_Core2_start+0x156>

    /* Clear the ENDINIT bit in the Password register, inline funtion */
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[2], wdtPassword);

    /* Load Base Address of Trap Vector Table. */
    __mtcr(CPU_BTV, (uint32)__TRAPTAB(2));
80001d0a:	91 f0 01 38 	movh.a %a3,32799
80001d0e:	80 32       	mov.d %d2,%a3
80001d10:	1b 02 10 26 	addi %d2,%d2,24832
80001d14:	cd 42 e2 0f 	mtcr $btv,%d2

    /* Load Base Address of Interrupt Vector Table. we will do this later in the program */
    __mtcr(CPU_BIV, (uint32)__INTTAB(2));
80001d18:	91 f0 01 38 	movh.a %a3,32799
80001d1c:	80 32       	mov.d %d2,%a3
80001d1e:	1b 02 00 24 	addi %d2,%d2,16384
80001d22:	cd 02 e2 0f 	mtcr $biv,%d2

    /* Load interupt stack pointer. */
    __mtcr(CPU_ISP, (uint32)__ISTACK(2));
80001d26:	91 20 00 35 	movh.a %a3,20482
80001d2a:	80 32       	mov.d %d2,%a3
80001d2c:	1b 02 b0 2b 	addi %d2,%d2,-17664
80001d30:	cd 82 e2 0f 	mtcr $isp,%d2
    if (watchdog->CON0.B.LCK)
80001d34:	54 22       	ld.w %d2,[%a2]
80001d36:	6f 12 09 00 	jz.t %d2,1,80001d48 <_Core2_start+0x19a>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001d3a:	54 22       	ld.w %d2,[%a2]
80001d3c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001d40:	a6 42       	or %d2,%d4
80001d42:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001d46:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001d48:	91 30 00 2f 	movh.a %a2,61443
80001d4c:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80001d50:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80001d54:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001d58:	a6 42       	or %d2,%d4
80001d5a:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001d5e:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80001d60:	54 22       	ld.w %d2,[%a2]
80001d62:	6f 02 ff 7f 	jz.t %d2,0,80001d60 <_Core2_start+0x1b2>

    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[2], wdtPassword);

    /* initialize SDA base pointers */
    __setareg(a0, __SDATA1(2));
80001d66:	91 10 00 26 	movh.a %a2,24577
80001d6a:	80 22       	mov.d %d2,%a2
80001d6c:	1b 02 00 28 	addi %d2,%d2,-32768
80001d70:	60 20       	mov.a %a0,%d2
    __setareg(a1, __SDATA2(2));
80001d72:	91 10 00 28 	movh.a %a2,32769
80001d76:	80 22       	mov.d %d2,%a2
80001d78:	1b 02 00 28 	addi %d2,%d2,-32768
80001d7c:	60 21       	mov.a %a1,%d2

    /* These to be un commented if A8 and A9 are required to be initialized */
    __setareg(a8, __SDATA3(2));
80001d7e:	91 10 00 28 	movh.a %a2,32769
80001d82:	80 22       	mov.d %d2,%a2
80001d84:	1b 02 00 28 	addi %d2,%d2,-32768
80001d88:	60 28       	mov.a %a8,%d2
    __setareg(a9, __SDATA4(2));
80001d8a:	91 10 00 29 	movh.a %a2,36865
80001d8e:	80 22       	mov.d %d2,%a2
80001d90:	1b 02 00 28 	addi %d2,%d2,-32768
80001d94:	60 29       	mov.a %a9,%d2
    uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
80001d96:	91 20 00 35 	movh.a %a3,20482
80001d9a:	91 20 00 25 	movh.a %a2,20482
80001d9e:	d9 33 c0 0b 	lea %a3,[%a3]-17408 <5001bc00 <__CSA2>>
80001da2:	d9 22 c0 0d 	lea %a2,[%a2]-9216 <5001dc00 <__CSA2_END>>
80001da6:	01 32 20 20 	sub.a %a2,%a2,%a3
80001daa:	80 22       	mov.d %d2,%a2
80001dac:	8f a2 1f 60 	sh %d6,%d2,-6
    uint32 *prvCsa      = csaBegin;
80001db0:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
80001db2:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80001db6:	82 03       	mov %d3,0
    uint32 *nxtCsa      = csaBegin;
80001db8:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80001dba:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
80001dbe:	df 06 27 00 	jeq %d6,0,80001e0c <_Core2_start+0x25e>
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80001dc2:	37 02 70 43 	extr.u %d4,%d2,6,16
80001dc6:	8f 42 1f 50 	sh %d5,%d2,-12
80001dca:	26 75       	and %d5,%d7
80001dcc:	a6 54       	or %d4,%d5
        if (k == 0U)
80001dce:	df 03 16 00 	jeq %d3,0,80001dfa <_Core2_start+0x24c>
            *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
80001dd2:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80001dd4:	5f 03 04 80 	jne %d3,%d0,80001ddc <_Core2_start+0x22e>
            __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80001dd8:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
80001ddc:	c2 13       	add %d3,1
80001dde:	60 22       	mov.a %a2,%d2
        nxtCsa += 16U;           /* next CSA */
80001de0:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80001de4:	5f 36 0f 00 	jeq %d6,%d3,80001e02 <_Core2_start+0x254>
        nxtCsa += 16U;           /* next CSA */
80001de8:	02 42       	mov %d2,%d4
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80001dea:	37 02 70 43 	extr.u %d4,%d2,6,16
80001dee:	8f 42 1f 50 	sh %d5,%d2,-12
80001df2:	26 75       	and %d5,%d7
80001df4:	a6 54       	or %d4,%d5
        if (k == 0U)
80001df6:	df 03 ee ff 	jne %d3,0,80001dd2 <_Core2_start+0x224>
            __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80001dfa:	cd 84 e3 0f 	mtcr $fcx,%d4
80001dfe:	1d ff eb ff 	j 80001dd4 <_Core2_start+0x226>
80001e02:	1b f6 ff 2f 	addi %d2,%d6,-1
80001e06:	06 62       	sh %d2,6
80001e08:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;
80001e0c:	82 02       	mov %d2,0
80001e0e:	74 22       	st.w [%a2],%d2
    /* Setup the context save area linked list. */

    IfxCpu_initCSA((uint32 *)__CSA(2), (uint32 *)__CSA_END(2));

    /*Call main function of Cpu0 */
    __non_return_call(core2_main);
80001e10:	91 00 00 28 	movh.a %a2,32768
80001e14:	d9 22 3c 02 	lea %a2,[%a2]8252 <8000203c <core2_main>>
80001e18:	dc 02       	ji %a2
}
80001e1a:	00 90       	ret 
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001e1c:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001e1e:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001e22:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001e26:	0f 35 a0 20 	or %d2,%d5,%d3
80001e2a:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001e2e:	74 22       	st.w [%a2],%d2
80001e30:	1d ff 2b ff 	j 80001c86 <_Core2_start+0xd8>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001e34:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001e36:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001e3a:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001e3e:	0f 35 a0 20 	or %d2,%d5,%d3
80001e42:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001e46:	74 22       	st.w [%a2],%d2
80001e48:	1d ff e7 fe 	j 80001c16 <_Core2_start+0x68>

80001e4c <Ifx_C_Init>:
 *
 * Parameters: Nil
 * Return: Nil
 */
void Ifx_C_Init(void)
{
80001e4c:	40 ae       	mov.aa %a14,%sp
80001e4e:	20 08       	sub.a %sp,8
    IfxStart_CTablePtr pBlockDest, pBlockSrc;
    uint32             uiLength, uiCnt;
    uint32            *pTable;
    /* clear table */
    pTable = (uint32 *)&__clear_table;
80001e50:	91 00 00 28 	movh.a %a2,32768
80001e54:	d9 22 3c a0 	lea %a2,[%a2]700 <800002bc <__clear_table>>

    while (pTable)
80001e58:	1d 00 32 00 	j 80001ebc <Ifx_C_Init+0x70>
            break;
        }

        uiCnt = uiLength / 8;

        while (uiCnt--)
80001e5c:	91 00 00 28 	movh.a %a2,32768
80001e60:	d9 22 24 c0 	lea %a2,[%a2]804 <80000324 <__copy_table>>
80001e64:	1d 00 7c 00 	j 80001f5c <Ifx_C_Init+0x110>
            *pBlockDest.ullPtr++ = 0;
80001e68:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80001e6c:	80 22       	mov.d %d2,%a2
80001e6e:	1b 82 00 20 	addi %d2,%d2,8
80001e72:	59 e2 fc ff 	st.w [%a14]-4,%d2
80001e76:	d2 02       	mov %e2,0
80001e78:	89 22 40 09 	st.d [%a2],%e2
        while (uiCnt--)
80001e7c:	02 52       	mov %d2,%d5
80001e7e:	1b f2 ff 5f 	addi %d5,%d2,-1
80001e82:	df 02 f3 ff 	jne %d2,0,80001e68 <Ifx_C_Init+0x1c>
        if (uiLength & 0x4)
80001e86:	6f 24 0a 00 	jz.t %d4,2,80001e9a <Ifx_C_Init+0x4e>
            *pBlockDest.uiPtr++ = 0;
80001e8a:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80001e8e:	80 22       	mov.d %d2,%a2
80001e90:	c2 42       	add %d2,4
80001e92:	59 e2 fc ff 	st.w [%a14]-4,%d2
80001e96:	82 02       	mov %d2,0
80001e98:	74 22       	st.w [%a2],%d2
        if (uiLength & 0x2)
80001e9a:	6f 14 0a 00 	jz.t %d4,1,80001eae <Ifx_C_Init+0x62>
            *pBlockDest.usPtr++ = 0;
80001e9e:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80001ea2:	80 22       	mov.d %d2,%a2
80001ea4:	c2 22       	add %d2,2
80001ea6:	59 e2 fc ff 	st.w [%a14]-4,%d2
80001eaa:	82 02       	mov %d2,0
80001eac:	b4 22       	st.h [%a2],%d2
        if (uiLength & 0x1)
80001eae:	6f 04 06 00 	jz.t %d4,0,80001eba <Ifx_C_Init+0x6e>
            *pBlockDest.ucPtr = 0;
80001eb2:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80001eb6:	82 02       	mov %d2,0
80001eb8:	34 22       	st.b [%a2],%d2
        while (uiCnt--)
80001eba:	40 32       	mov.aa %a2,%a3
    while (pTable)
80001ebc:	bd 02 d0 7f 	jz.a %a2,80001e5c <Ifx_C_Init+0x10>
        pBlockDest.uiPtr = (uint32 *)*pTable++;
80001ec0:	d9 23 08 00 	lea %a3,[%a2]8
80001ec4:	54 22       	ld.w %d2,[%a2]
80001ec6:	59 e2 fc ff 	st.w [%a14]-4,%d2
        uiLength         = *pTable++;
80001eca:	19 24 04 00 	ld.w %d4,[%a2]4
        if (uiLength == 0xFFFFFFFF)
80001ece:	df f4 c7 7f 	jeq %d4,-1,80001e5c <Ifx_C_Init+0x10>
        uiCnt = uiLength / 8;
80001ed2:	8f d4 1f 20 	sh %d2,%d4,-3
        while (uiCnt--)
80001ed6:	1d ff d4 ff 	j 80001e7e <Ifx_C_Init+0x32>
        {
            *pBlockDest.ullPtr++ = *pBlockSrc.ullPtr++;
80001eda:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80001ede:	80 22       	mov.d %d2,%a2
80001ee0:	1b 82 00 20 	addi %d2,%d2,8
80001ee4:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80001ee8:	99 e3 fc ff 	ld.a %a3,[%a14]-4
80001eec:	80 32       	mov.d %d2,%a3
80001eee:	1b 82 00 20 	addi %d2,%d2,8
80001ef2:	59 e2 fc ff 	st.w [%a14]-4,%d2
80001ef6:	09 26 40 09 	ld.d %e6,[%a2]
80001efa:	89 36 40 09 	st.d [%a3],%e6
        while (uiCnt--)
80001efe:	02 42       	mov %d2,%d4
80001f00:	1b f2 ff 4f 	addi %d4,%d2,-1
80001f04:	df 02 eb ff 	jne %d2,0,80001eda <Ifx_C_Init+0x8e>
        }

        if (uiLength & 0x4)
80001f08:	6f 23 10 00 	jz.t %d3,2,80001f28 <Ifx_C_Init+0xdc>
        {
            *pBlockDest.uiPtr++ = *pBlockSrc.uiPtr++;
80001f0c:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80001f10:	80 22       	mov.d %d2,%a2
80001f12:	c2 42       	add %d2,4
80001f14:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80001f18:	99 e3 fc ff 	ld.a %a3,[%a14]-4
80001f1c:	80 32       	mov.d %d2,%a3
80001f1e:	c2 42       	add %d2,4
80001f20:	59 e2 fc ff 	st.w [%a14]-4,%d2
80001f24:	54 22       	ld.w %d2,[%a2]
80001f26:	74 32       	st.w [%a3],%d2
        }

        if (uiLength & 0x2)
80001f28:	6f 13 11 00 	jz.t %d3,1,80001f4a <Ifx_C_Init+0xfe>
        {
            *pBlockDest.usPtr++ = *pBlockSrc.usPtr++;
80001f2c:	99 e3 f8 ff 	ld.a %a3,[%a14]-8
80001f30:	80 32       	mov.d %d2,%a3
80001f32:	c2 22       	add %d2,2
80001f34:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80001f38:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80001f3c:	80 22       	mov.d %d2,%a2
80001f3e:	c2 22       	add %d2,2
80001f40:	59 e2 fc ff 	st.w [%a14]-4,%d2
80001f44:	b9 32 00 00 	ld.hu %d2,[%a3]0
80001f48:	b4 22       	st.h [%a2],%d2
        }

        if (uiLength & 0x1)
80001f4a:	6f 03 08 00 	jz.t %d3,0,80001f5a <Ifx_C_Init+0x10e>
        {
            *pBlockDest.ucPtr = *pBlockSrc.ucPtr;
80001f4e:	99 e3 f8 ff 	ld.a %a3,[%a14]-8
80001f52:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80001f56:	14 32       	ld.bu %d2,[%a3]
80001f58:	34 22       	st.b [%a2],%d2
        while (uiCnt--)
80001f5a:	60 52       	mov.a %a2,%d5
    while (pTable)
80001f5c:	bd 02 14 00 	jz.a %a2,80001f84 <Ifx_C_Init+0x138>
        pBlockSrc.uiPtr  = (uint32 *)*pTable++;
80001f60:	54 22       	ld.w %d2,[%a2]
80001f62:	59 e2 f8 ff 	st.w [%a14]-8,%d2
        pBlockDest.uiPtr = (uint32 *)*pTable++;
80001f66:	19 22 04 00 	ld.w %d2,[%a2]4
80001f6a:	59 e2 fc ff 	st.w [%a14]-4,%d2
        uiLength         = *pTable++;
80001f6e:	80 22       	mov.d %d2,%a2
80001f70:	1b c2 00 50 	addi %d5,%d2,12
80001f74:	19 23 08 00 	ld.w %d3,[%a2]8
        if (uiLength == 0xFFFFFFFF)
80001f78:	df f3 06 00 	jeq %d3,-1,80001f84 <Ifx_C_Init+0x138>
        uiCnt = uiLength / 8;
80001f7c:	8f d3 1f 20 	sh %d2,%d3,-3
        while (uiCnt--)
80001f80:	1d ff c0 ff 	j 80001f00 <Ifx_C_Init+0xb4>
        }
    }
}
80001f84:	00 90       	ret 

80001f86 <init_GPIO>:
#include "GPIO.h"



void init_GPIO(void)
{
80001f86:	40 ae       	mov.aa %a14,%sp
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
80001f88:	3b 00 08 50 	mov %d5,128
80001f8c:	82 54       	mov %d4,5
80001f8e:	91 40 00 4f 	movh.a %a4,61444
80001f92:	d9 44 00 0a 	lea %a4,[%a4]-24576 <f003a000 <_SMALL_DATA4_+0x60032000>>
80001f96:	6d ff ed f8 	call 80001170 <IfxPort_setPinMode>
80001f9a:	3b 00 08 50 	mov %d5,128
80001f9e:	82 24       	mov %d4,2
80001fa0:	91 40 00 4f 	movh.a %a4,61444
80001fa4:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x60033000>>
80001fa8:	6d ff e4 f8 	call 80001170 <IfxPort_setPinMode>
80001fac:	3b 00 08 50 	mov %d5,128
80001fb0:	82 14       	mov %d4,1
80001fb2:	91 40 00 4f 	movh.a %a4,61444
80001fb6:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x60033000>>
80001fba:	6d ff db f8 	call 80001170 <IfxPort_setPinMode>
80001fbe:	3b 00 08 50 	mov %d5,128
80001fc2:	82 54       	mov %d4,5
80001fc4:	91 40 00 4f 	movh.a %a4,61444
80001fc8:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x60033000>>
80001fcc:	6d ff d2 f8 	call 80001170 <IfxPort_setPinMode>
    IfxPort_setPinModeOutput(PORT_005, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(PORT_102, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(PORT_101, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(PORT_105, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
}
80001fd0:	00 90       	ret 

80001fd2 <core0_main>:

IfxCpu_syncEvent g_cpuSyncEvent = 0;


void core0_main(void)
{
80001fd2:	40 ae       	mov.aa %a14,%sp
    __enable();
80001fd4:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80001fd8:	6d ff 62 f8 	call 8000109c <IfxScuWdt_getCpuWatchdogPassword>
80001fdc:	02 24       	mov %d4,%d2
80001fde:	6d ff 43 f7 	call 80000e64 <IfxScuWdt_disableCpuWatchdog>
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
80001fe2:	6d ff 6f f8 	call 800010c0 <IfxScuWdt_getSafetyWatchdogPassword>
80001fe6:	02 24       	mov %d4,%d2
80001fe8:	6d ff 7d f7 	call 80000ee2 <IfxScuWdt_disableSafetyWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80001fec:	91 00 00 c6 	movh.a %a12,24576
80001ff0:	d9 cc 20 00 	lea %a12,[%a12]32 <60000020 <g_cpuSyncEvent>>
80001ff4:	40 c4       	mov.aa %a4,%a12
80001ff6:	6d ff 02 fb 	call 800015fa <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80001ffa:	82 14       	mov %d4,1
80001ffc:	40 c4       	mov.aa %a4,%a12
80001ffe:	6d ff be fa 	call 8000157a <IfxCpu_waitEvent>

    init_GPIO();
80002002:	6d ff c2 ff 	call 80001f86 <init_GPIO>
    init_STM();
80002006:	6d ff b9 f2 	call 80000578 <init_STM>

    while(1)
    {
        AppScheduling();
8000200a:	6d ff 90 f2 	call 8000052a <AppScheduling>
    while(1)
8000200e:	1d ff fe ff 	j 8000200a <core0_main+0x38>

80002012 <core1_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core1_main(void)
{
80002012:	40 ae       	mov.aa %a14,%sp
80002014:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG1 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80002018:	6d ff 42 f8 	call 8000109c <IfxScuWdt_getCpuWatchdogPassword>
8000201c:	02 24       	mov %d4,%d2
8000201e:	6d ff 23 f7 	call 80000e64 <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80002022:	91 00 00 c6 	movh.a %a12,24576
80002026:	d9 cc 20 00 	lea %a12,[%a12]32 <60000020 <g_cpuSyncEvent>>
8000202a:	40 c4       	mov.aa %a4,%a12
8000202c:	6d ff e7 fa 	call 800015fa <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80002030:	82 14       	mov %d4,1
80002032:	40 c4       	mov.aa %a4,%a12
80002034:	6d ff a3 fa 	call 8000157a <IfxCpu_waitEvent>
    
    while(1)
80002038:	1d 00 00 00 	j 80002038 <core1_main+0x26>

8000203c <core2_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core2_main(void)
{
8000203c:	40 ae       	mov.aa %a14,%sp
8000203e:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG2 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80002042:	6d ff 2d f8 	call 8000109c <IfxScuWdt_getCpuWatchdogPassword>
80002046:	02 24       	mov %d4,%d2
80002048:	6d ff 0e f7 	call 80000e64 <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
8000204c:	91 00 00 c6 	movh.a %a12,24576
80002050:	d9 cc 20 00 	lea %a12,[%a12]32 <60000020 <g_cpuSyncEvent>>
80002054:	40 c4       	mov.aa %a4,%a12
80002056:	6d ff d2 fa 	call 800015fa <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
8000205a:	82 14       	mov %d4,1
8000205c:	40 c4       	mov.aa %a4,%a12
8000205e:	6d ff 8e fa 	call 8000157a <IfxCpu_waitEvent>
    
    while(1)
80002062:	1d 00 00 00 	j 80002062 <core2_main+0x26>

80002066 <__divdf3>:
80002066:	20 38       	sub.a %sp,56
80002068:	d9 a5 10 00 	lea %a5,[%sp]16
8000206c:	40 a4       	mov.aa %a4,%sp
8000206e:	89 a4 40 09 	st.d [%sp],%e4
80002072:	89 a6 48 09 	st.d [%sp]8,%e6
80002076:	6d 00 d5 01 	call 80002420 <__unpack_d>
8000207a:	d9 a5 24 00 	lea %a5,[%sp]36
8000207e:	d9 a4 08 00 	lea %a4,[%sp]8
80002082:	6d 00 cf 01 	call 80002420 <__unpack_d>
80002086:	19 a2 10 00 	ld.w %d2,[%sp]16
8000208a:	ff 22 07 80 	jge.u %d2,2,80002098 <__divdf3+0x32>
8000208e:	d9 a4 10 00 	lea %a4,[%sp]16
80002092:	6d 00 f8 00 	call 80002282 <__pack_d>
80002096:	00 90       	ret 
80002098:	19 a3 24 00 	ld.w %d3,[%sp]36
8000209c:	d9 a4 24 00 	lea %a4,[%sp]36
800020a0:	bf 23 f9 ff 	jlt.u %d3,2,80002092 <__divdf3+0x2c>
800020a4:	19 a5 14 00 	ld.w %d5,[%sp]20
800020a8:	19 a4 28 00 	ld.w %d4,[%sp]40
800020ac:	c6 54       	xor %d4,%d5
800020ae:	59 a4 14 00 	st.w [%sp]20,%d4
800020b2:	1b e2 ff 4f 	addi %d4,%d2,-2
800020b6:	8f 24 c0 41 	andn %d4,%d4,2
800020ba:	df 04 0a 80 	jne %d4,0,800020ce <__divdf3+0x68>
800020be:	91 00 00 48 	movh.a %a4,32768
800020c2:	d9 44 00 80 	lea %a4,[%a4]512 <80000200 <__thenan_df>>
800020c6:	5f 32 e4 ff 	jne %d2,%d3,8000208e <__divdf3+0x28>
800020ca:	1d ff e4 ff 	j 80002092 <__divdf3+0x2c>
800020ce:	df 43 51 00 	jeq %d3,4,80002170 <__divdf3+0x10a>
800020d2:	df 23 5a 00 	jeq %d3,2,80002186 <__divdf3+0x120>
800020d6:	19 a3 18 00 	ld.w %d3,[%sp]24
800020da:	19 a2 2c 00 	ld.w %d2,[%sp]44
800020de:	09 a4 70 09 	ld.d %e4,[%sp]48
800020e2:	0b 23 80 00 	sub %d0,%d3,%d2
800020e6:	09 a2 5c 09 	ld.d %e2,[%sp]28
800020ea:	0b 53 00 61 	eq %d6,%d3,%d5
800020ee:	02 67       	mov %d7,%d6
800020f0:	0b 42 50 72 	and.ge.u %d7,%d2,%d4
800020f4:	59 a0 18 00 	st.w [%sp]24,%d0
800020f8:	0b 35 a0 72 	or.lt.u %d7,%d5,%d3
800020fc:	df 07 0b 80 	jne %d7,0,80002112 <__divdf3+0xac>
80002100:	1b f0 ff 6f 	addi %d6,%d0,-1
80002104:	77 23 80 30 	dextr %d3,%d3,%d2,1
80002108:	06 12       	sh %d2,1
8000210a:	59 a6 18 00 	st.w [%sp]24,%d6
8000210e:	0b 53 00 61 	eq %d6,%d3,%d5
80002112:	3b d0 03 10 	mov %d1,61
80002116:	d2 08       	mov %e8,0
80002118:	82 00       	mov %d0,0
8000211a:	7b 00 00 71 	movh %d7,4096
8000211e:	1d 00 04 00 	j 80002126 <__divdf3+0xc0>
80002122:	0b 53 00 61 	eq %d6,%d3,%d5
80002126:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
8000212a:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
8000212e:	df 06 0c 80 	jne %d6,0,80002146 <__divdf3+0xe0>
80002132:	0f 08 a0 a0 	or %d10,%d8,%d0
80002136:	0f 79 a0 60 	or %d6,%d9,%d7
8000213a:	0b 42 c0 20 	subx %d2,%d2,%d4
8000213e:	0b a6 10 88 	mov %e8,%d6,%d10
80002142:	0b 53 d0 30 	subc %d3,%d3,%d5
80002146:	c2 f1       	add %d1,-1
80002148:	77 07 80 0f 	dextr %d0,%d7,%d0,31
8000214c:	77 23 80 30 	dextr %d3,%d3,%d2,1
80002150:	06 f7       	sh %d7,-1
80002152:	06 12       	sh %d2,1
80002154:	df 01 e7 ff 	jne %d1,0,80002122 <__divdf3+0xbc>
80002158:	8f f8 0f 41 	and %d4,%d8,255
8000215c:	8b 04 28 42 	ne %d4,%d4,128
80002160:	df 04 1a 00 	jeq %d4,0,80002194 <__divdf3+0x12e>
80002164:	59 a8 1c 00 	st.w [%sp]28,%d8
80002168:	59 a9 20 00 	st.w [%sp]32,%d9
8000216c:	1d ff 91 ff 	j 8000208e <__divdf3+0x28>
80002170:	82 02       	mov %d2,0
80002172:	a0 02       	mov.a %a2,0
80002174:	a0 03       	mov.a %a3,0
80002176:	89 a2 dc 09 	st.da [%sp]28,%a2
8000217a:	59 a2 18 00 	st.w [%sp]24,%d2
8000217e:	d9 a4 10 00 	lea %a4,[%sp]16
80002182:	1d ff 88 ff 	j 80002092 <__divdf3+0x2c>
80002186:	82 42       	mov %d2,4
80002188:	d9 a4 10 00 	lea %a4,[%sp]16
8000218c:	59 a2 10 00 	st.w [%sp]16,%d2
80002190:	1d ff 81 ff 	j 80002092 <__divdf3+0x2c>
80002194:	a6 32       	or %d2,%d3
80002196:	77 89 00 4c 	dextr %d4,%d9,%d8,24
8000219a:	8b 02 20 32 	ne %d3,%d2,0
8000219e:	0f 43 e0 20 	andn %d2,%d3,%d4
800021a2:	df 02 e1 7f 	jeq %d2,0,80002164 <__divdf3+0xfe>
800021a6:	8b 08 88 80 	addx %d8,%d8,128
800021aa:	8b 09 a0 90 	addc %d9,%d9,0
800021ae:	8f f8 cf 81 	andn %d8,%d8,255
800021b2:	1d ff d9 ff 	j 80002164 <__divdf3+0xfe>

800021b6 <__floatsidf>:
800021b6:	82 32       	mov %d2,3
800021b8:	20 18       	sub.a %sp,24
800021ba:	59 a2 04 00 	st.w [%sp]4,%d2
800021be:	8f 14 1e 20 	sh %d2,%d4,-31
800021c2:	59 a2 08 00 	st.w [%sp]8,%d2
800021c6:	df 04 0e 80 	jne %d4,0,800021e2 <__floatsidf+0x2c>
800021ca:	82 22       	mov %d2,2
800021cc:	59 a2 04 00 	st.w [%sp]4,%d2
800021d0:	d9 a4 04 00 	lea %a4,[%sp]4
800021d4:	6d 00 57 00 	call 80002282 <__pack_d>
800021d8:	60 25       	mov.a %a5,%d2
800021da:	60 34       	mov.a %a4,%d3
800021dc:	80 52       	mov.d %d2,%a5
800021de:	80 43       	mov.d %d3,%a4
800021e0:	00 90       	ret 
800021e2:	ff 04 0a 00 	jge %d4,0,800021f6 <__floatsidf+0x40>
800021e6:	7b 00 00 28 	movh %d2,32768
800021ea:	a0 05       	mov.a %a5,0
800021ec:	91 00 1e 4c 	movh.a %a4,49632
800021f0:	5f 24 f6 7f 	jeq %d4,%d2,800021dc <__floatsidf+0x26>
800021f4:	32 54       	rsub %d4
800021f6:	0f 04 b0 61 	clz %d6,%d4
800021fa:	1b d6 01 60 	addi %d6,%d6,29
800021fe:	8f f6 01 21 	and %d2,%d6,31
80002202:	82 05       	mov %d5,0
80002204:	8b 06 82 72 	ge %d7,%d6,32
80002208:	17 45 80 32 	dextr %d3,%d5,%d4,%d2
8000220c:	0f 24 00 20 	sh %d2,%d4,%d2
80002210:	2b 23 50 37 	seln %d3,%d7,%d3,%d2
80002214:	8b c6 03 61 	rsub %d6,%d6,60
80002218:	ab 02 a0 27 	seln %d2,%d7,%d2,0
8000221c:	59 a3 14 00 	st.w [%sp]20,%d3
80002220:	59 a6 0c 00 	st.w [%sp]12,%d6
80002224:	59 a2 10 00 	st.w [%sp]16,%d2
80002228:	1d ff d4 ff 	j 800021d0 <__floatsidf+0x1a>

8000222c <__truncdfsf2>:
8000222c:	20 20       	sub.a %sp,32
8000222e:	d9 a5 0c 00 	lea %a5,[%sp]12
80002232:	d9 a4 04 00 	lea %a4,[%sp]4
80002236:	89 a4 44 09 	st.d [%sp]4,%e4
8000223a:	6d 00 f3 00 	call 80002420 <__unpack_d>
8000223e:	19 a3 18 00 	ld.w %d3,[%sp]24
80002242:	19 a2 1c 00 	ld.w %d2,[%sp]28
80002246:	77 32 00 21 	dextr %d2,%d2,%d3,2
8000224a:	b7 03 02 3f 	insert %d3,%d3,0,30,2
8000224e:	02 27       	mov %d7,%d2
80002250:	df 03 04 00 	jeq %d3,0,80002258 <__truncdfsf2+0x2c>
80002254:	8f 12 40 71 	or %d7,%d2,1
80002258:	19 a6 14 00 	ld.w %d6,[%sp]20
8000225c:	19 a5 10 00 	ld.w %d5,[%sp]16
80002260:	19 a4 0c 00 	ld.w %d4,[%sp]12
80002264:	6d 00 03 00 	call 8000226a <__make_fp>
80002268:	00 90       	ret 

8000226a <__make_fp>:
8000226a:	20 10       	sub.a %sp,16
8000226c:	40 a4       	mov.aa %a4,%sp
8000226e:	74 a4       	st.w [%sp],%d4
80002270:	59 a5 04 00 	st.w [%sp]4,%d5
80002274:	59 a6 08 00 	st.w [%sp]8,%d6
80002278:	59 a7 0c 00 	st.w [%sp]12,%d7
8000227c:	6d 00 31 01 	call 800024de <__pack_f>
80002280:	00 90       	ret 

80002282 <__pack_d>:
80002282:	54 44       	ld.w %d4,[%a4]
80002284:	19 43 0c 00 	ld.w %d3,[%a4]12
80002288:	19 42 10 00 	ld.w %d2,[%a4]16
8000228c:	19 41 04 00 	ld.w %d1,[%a4]4
80002290:	bf 24 56 80 	jlt.u %d4,2,8000233c <__pack_d+0xba>
80002294:	7b 00 ff 57 	movh %d5,32752
80002298:	d2 06       	mov %e6,0
8000229a:	df 44 0b 00 	jeq %d4,4,800022b0 <__pack_d+0x2e>
8000229e:	0f 23 a0 50 	or %d5,%d3,%d2
800022a2:	8b 05 00 02 	eq %d0,%d5,0
800022a6:	8b 24 e0 04 	or.eq %d0,%d4,2
800022aa:	82 05       	mov %d5,0
800022ac:	df 00 0c 00 	jeq %d0,0,800022c4 <__pack_d+0x42>
800022b0:	0b 10 00 28 	mov %e2,%d1
800022b4:	a6 75       	or %d5,%d7
800022b6:	8f f2 01 20 	sh %d2,%d2,31
800022ba:	0f 25 a0 40 	or %d4,%d5,%d2
800022be:	02 43       	mov %d3,%d4
800022c0:	02 62       	mov %d2,%d6
800022c2:	00 90       	ret 
800022c4:	19 44 08 00 	ld.w %d4,[%a4]8
800022c8:	3b 20 c0 0f 	mov %d0,-1022
800022cc:	3f 04 41 00 	jlt %d4,%d0,8000234e <__pack_d+0xcc>
800022d0:	3b 00 40 00 	mov %d0,1024
800022d4:	7b 00 ff 57 	movh %d5,32752
800022d8:	7f 04 ec 7f 	jge %d4,%d0,800022b0 <__pack_d+0x2e>
800022dc:	8f f3 0f 51 	and %d5,%d3,255
800022e0:	8b 05 28 52 	ne %d5,%d5,128
800022e4:	df 05 1b 00 	jeq %d5,0,8000231a <__pack_d+0x98>
800022e8:	8b f3 87 30 	addx %d3,%d3,127
800022ec:	8b 02 a0 20 	addc %d2,%d2,0
800022f0:	7b 00 00 52 	movh %d5,8192
800022f4:	0b 25 30 61 	lt.u %d6,%d5,%d2
800022f8:	0b 25 70 62 	or.eq %d6,%d5,%d2
800022fc:	df 06 19 80 	jne %d6,0,8000232e <__pack_d+0xac>
80002300:	1b f4 3f 40 	addi %d4,%d4,1023
80002304:	0b 40 00 48 	mov %e4,%d4
80002308:	77 32 00 6c 	dextr %d6,%d2,%d3,24
8000230c:	06 82       	sh %d2,-8
8000230e:	b7 02 0c 7a 	insert %d7,%d2,0,20,12
80002312:	8f 44 01 50 	sh %d5,%d4,20
80002316:	1d ff cd ff 	j 800022b0 <__pack_d+0x2e>
8000231a:	8f 03 10 51 	and %d5,%d3,256
8000231e:	df 05 e9 7f 	jeq %d5,0,800022f0 <__pack_d+0x6e>
80002322:	8b 03 88 30 	addx %d3,%d3,128
80002326:	8b 02 a0 20 	addc %d2,%d2,0
8000232a:	1d ff e3 ff 	j 800022f0 <__pack_d+0x6e>
8000232e:	77 32 80 3f 	dextr %d3,%d2,%d3,31
80002332:	1b 04 40 40 	addi %d4,%d4,1024
80002336:	06 f2       	sh %d2,-1
80002338:	1d ff e6 ff 	j 80002304 <__pack_d+0x82>
8000233c:	77 32 00 6c 	dextr %d6,%d2,%d3,24
80002340:	06 82       	sh %d2,-8
80002342:	b7 12 8d 79 	insert %d7,%d2,1,19,13
80002346:	7b 00 ff 57 	movh %d5,32752
8000234a:	1d ff b3 ff 	j 800022b0 <__pack_d+0x2e>
8000234e:	0b 40 80 40 	sub %d4,%d0,%d4
80002352:	8b 94 83 02 	ge %d0,%d4,57
80002356:	df 00 ad ff 	jne %d0,0,800022b0 <__pack_d+0x2e>
8000235a:	8b 04 82 52 	ge %d5,%d4,32
8000235e:	2b 23 50 05 	seln %d0,%d5,%d3,%d2
80002362:	ab 02 a0 75 	seln %d7,%d5,%d2,0
80002366:	8f f4 01 51 	and %d5,%d4,31
8000236a:	8b 05 02 61 	rsub %d6,%d5,32
8000236e:	17 07 80 66 	dextr %d6,%d7,%d0,%d6
80002372:	2b 06 40 65 	sel %d6,%d5,%d6,%d0
80002376:	8b 04 82 82 	ge %d8,%d4,32
8000237a:	32 55       	rsub %d5
8000237c:	02 60       	mov %d0,%d6
8000237e:	8f f4 01 41 	and %d4,%d4,31
80002382:	82 f6       	mov %d6,-1
80002384:	0f 57 00 70 	sh %d7,%d7,%d5
80002388:	17 66 80 54 	dextr %d5,%d6,%d6,%d4
8000238c:	0f 46 00 40 	sh %d4,%d6,%d4
80002390:	2b 45 50 58 	seln %d5,%d8,%d5,%d4
80002394:	ab 04 a0 48 	seln %d4,%d8,%d4,0
80002398:	0f 43 e0 30 	andn %d3,%d3,%d4
8000239c:	0f 52 e0 20 	andn %d2,%d2,%d5
800023a0:	a6 32       	or %d2,%d3
800023a2:	02 03       	mov %d3,%d0
800023a4:	8b 02 00 35 	or.ne %d3,%d2,0
800023a8:	8f f3 0f 51 	and %d5,%d3,255
800023ac:	82 12       	mov %d2,1
800023ae:	8b 05 08 24 	and.eq %d2,%d5,128
800023b2:	02 74       	mov %d4,%d7
800023b4:	df 02 14 80 	jne %d2,0,800023dc <__pack_d+0x15a>
800023b8:	8b f3 87 30 	addx %d3,%d3,127
800023bc:	8b 07 a0 20 	addc %d2,%d7,0
800023c0:	77 32 00 6c 	dextr %d6,%d2,%d3,24
800023c4:	7b 00 00 31 	movh %d3,4096
800023c8:	8f 82 1f 70 	sh %d7,%d2,-8
800023cc:	0b 32 50 21 	ge.u %d2,%d2,%d3
800023d0:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
800023d4:	8f 42 01 50 	sh %d5,%d2,20
800023d8:	1d ff 6c ff 	j 800022b0 <__pack_d+0x2e>
800023dc:	8b 03 88 60 	addx %d6,%d3,128
800023e0:	8b 07 a0 20 	addc %d2,%d7,0
800023e4:	7b 00 00 a1 	movh %d10,4096
800023e8:	8f 82 1f 70 	sh %d7,%d2,-8
800023ec:	77 62 00 6c 	dextr %d6,%d2,%d6,24
800023f0:	0b a2 50 21 	ge.u %d2,%d2,%d10
800023f4:	53 12 40 80 	mul.u %e8,%d2,1
800023f8:	8f 03 10 01 	and %d0,%d3,256
800023fc:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
80002400:	8f 48 01 50 	sh %d5,%d8,20
80002404:	df 00 56 ff 	jne %d0,0,800022b0 <__pack_d+0x2e>
80002408:	8f 84 1f 70 	sh %d7,%d4,-8
8000240c:	0b a4 50 21 	ge.u %d2,%d4,%d10
80002410:	77 34 00 6c 	dextr %d6,%d4,%d3,24
80002414:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
80002418:	8f 42 01 50 	sh %d5,%d2,20
8000241c:	1d ff 4a ff 	j 800022b0 <__pack_d+0x2e>

80002420 <__unpack_d>:
80002420:	09 48 40 09 	ld.d %e8,[%a4]
80002424:	3b f0 7f 00 	mov %d0,2047
80002428:	8f 19 1e 70 	sh %d7,%d9,-31
8000242c:	37 09 6b 5a 	extr.u %d5,%d9,20,11
80002430:	b7 09 0c 6a 	insert %d6,%d9,0,20,12
80002434:	59 57 04 00 	st.w [%a5]4,%d7
80002438:	df 05 26 80 	jne %d5,0,80002484 <__unpack_d+0x64>
8000243c:	8b 08 20 22 	ne %d2,%d8,0
80002440:	8b 06 00 25 	or.ne %d2,%d6,0
80002444:	df 02 33 00 	jeq %d2,0,800024aa <__unpack_d+0x8a>
80002448:	82 32       	mov %d2,3
8000244a:	77 86 00 34 	dextr %d3,%d6,%d8,8
8000244e:	8f 88 00 40 	sh %d4,%d8,8
80002452:	74 52       	st.w [%a5],%d2
80002454:	3b 10 c0 5f 	mov %d5,-1023
80002458:	7b 00 00 61 	movh %d6,4096
8000245c:	77 43 80 30 	dextr %d3,%d3,%d4,1
80002460:	02 57       	mov %d7,%d5
80002462:	0b 63 00 21 	eq %d2,%d3,%d6
80002466:	b7 02 01 20 	insert %d2,%d2,0,0,1
8000246a:	06 14       	sh %d4,1
8000246c:	0b 63 a0 22 	or.lt.u %d2,%d3,%d6
80002470:	c2 f5       	add %d5,-1
80002472:	df 02 f5 ff 	jne %d2,0,8000245c <__unpack_d+0x3c>
80002476:	59 57 08 00 	st.w [%a5]8,%d7
8000247a:	59 54 0c 00 	st.w [%a5]12,%d4
8000247e:	59 53 10 00 	st.w [%a5]16,%d3
80002482:	00 90       	ret 
80002484:	5f 05 16 00 	jeq %d5,%d0,800024b0 <__unpack_d+0x90>
80002488:	82 32       	mov %d2,3
8000248a:	1b 15 c0 5f 	addi %d5,%d5,-1023
8000248e:	8f 88 00 40 	sh %d4,%d8,8
80002492:	74 52       	st.w [%a5],%d2
80002494:	77 86 00 24 	dextr %d2,%d6,%d8,8
80002498:	59 55 08 00 	st.w [%a5]8,%d5
8000249c:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
800024a0:	59 54 0c 00 	st.w [%a5]12,%d4
800024a4:	59 52 10 00 	st.w [%a5]16,%d2
800024a8:	00 90       	ret 
800024aa:	82 22       	mov %d2,2
800024ac:	74 52       	st.w [%a5],%d2
800024ae:	00 90       	ret 
800024b0:	8b 08 20 52 	ne %d5,%d8,0
800024b4:	8b 06 00 55 	or.ne %d5,%d6,0
800024b8:	df 05 05 80 	jne %d5,0,800024c2 <__unpack_d+0xa2>
800024bc:	82 42       	mov %d2,4
800024be:	74 52       	st.w [%a5],%d2
800024c0:	00 90       	ret 
800024c2:	77 89 00 34 	dextr %d3,%d9,%d8,8
800024c6:	37 09 e1 49 	extr.u %d4,%d9,19,1
800024ca:	b7 03 85 3d 	insert %d3,%d3,0,27,5
800024ce:	8f 88 00 20 	sh %d2,%d8,8
800024d2:	74 54       	st.w [%a5],%d4
800024d4:	59 52 0c 00 	st.w [%a5]12,%d2
800024d8:	59 53 10 00 	st.w [%a5]16,%d3
800024dc:	00 90       	ret 

800024de <__pack_f>:
800024de:	54 44       	ld.w %d4,[%a4]
800024e0:	19 43 0c 00 	ld.w %d3,[%a4]12
800024e4:	19 47 04 00 	ld.w %d7,[%a4]4
800024e8:	bf 24 3f 80 	jlt.u %d4,2,80002566 <__pack_f+0x88>
800024ec:	7b 00 f8 57 	movh %d5,32640
800024f0:	82 06       	mov %d6,0
800024f2:	df 44 09 00 	jeq %d4,4,80002504 <__pack_f+0x26>
800024f6:	8b 03 00 22 	eq %d2,%d3,0
800024fa:	8b 24 e0 24 	or.eq %d2,%d4,2
800024fe:	82 05       	mov %d5,0
80002500:	df 02 08 00 	jeq %d2,0,80002510 <__pack_f+0x32>
80002504:	8f f7 01 70 	sh %d7,%d7,31
80002508:	0f 56 a0 20 	or %d2,%d6,%d5
8000250c:	a6 72       	or %d2,%d7
8000250e:	00 90       	ret 
80002510:	19 42 08 00 	ld.w %d2,[%a4]8
80002514:	8b 22 98 42 	ge %d4,%d2,-126
80002518:	df 04 33 00 	jeq %d4,0,8000257e <__pack_f+0xa0>
8000251c:	8b 02 88 42 	ge %d4,%d2,128
80002520:	7b 00 f8 57 	movh %d5,32640
80002524:	df 04 f0 ff 	jne %d4,0,80002504 <__pack_f+0x26>
80002528:	8f f3 07 51 	and %d5,%d3,127
8000252c:	8f 03 08 41 	and %d4,%d3,128
80002530:	8b 05 24 52 	ne %d5,%d5,64
80002534:	ab 03 04 44 	cadd %d4,%d4,%d3,64
80002538:	1b f3 03 30 	addi %d3,%d3,63
8000253c:	2b 43 40 35 	sel %d3,%d5,%d3,%d4
80002540:	1b f2 07 50 	addi %d5,%d2,127
80002544:	bf 03 0c 00 	jlt %d3,0,8000255c <__pack_f+0x7e>
80002548:	37 03 f7 63 	extr.u %d6,%d3,7,23
8000254c:	8f 75 01 50 	sh %d5,%d5,23
80002550:	8f f7 01 70 	sh %d7,%d7,31
80002554:	0f 56 a0 20 	or %d2,%d6,%d5
80002558:	a6 72       	or %d2,%d7
8000255a:	00 90       	ret 
8000255c:	06 f3       	sh %d3,-1
8000255e:	1b 02 08 50 	addi %d5,%d2,128
80002562:	1d ff f3 ff 	j 80002548 <__pack_f+0x6a>
80002566:	37 03 f6 33 	extr.u %d3,%d3,7,22
8000256a:	7b 00 f8 57 	movh %d5,32640
8000256e:	b7 f3 01 6b 	insert %d6,%d3,15,22,1
80002572:	8f f7 01 70 	sh %d7,%d7,31
80002576:	0f 56 a0 20 	or %d2,%d6,%d5
8000257a:	a6 72       	or %d2,%d7
8000257c:	00 90       	ret 
8000257e:	8b 22 18 21 	rsub %d2,%d2,-126
80002582:	8b a2 81 42 	ge %d4,%d2,26
80002586:	df 04 bf ff 	jne %d4,0,80002504 <__pack_f+0x26>
8000258a:	82 f5       	mov %d5,-1
8000258c:	8b 02 00 41 	rsub %d4,%d2,0
80002590:	0f 25 00 20 	sh %d2,%d5,%d2
80002594:	0f 43 00 40 	sh %d4,%d3,%d4
80002598:	0f 23 e0 30 	andn %d3,%d3,%d2
8000259c:	8b 03 00 45 	or.ne %d4,%d3,0
800025a0:	8f f4 07 31 	and %d3,%d4,127
800025a4:	8b 03 04 32 	eq %d3,%d3,64
800025a8:	df 03 0e 80 	jne %d3,0,800025c4 <__pack_f+0xe6>
800025ac:	1b f4 03 20 	addi %d2,%d4,63
800025b0:	7b 00 00 34 	movh %d3,16384
800025b4:	37 02 f7 63 	extr.u %d6,%d2,7,23
800025b8:	0b 32 50 21 	ge.u %d2,%d2,%d3
800025bc:	8f 72 01 50 	sh %d5,%d2,23
800025c0:	1d ff a2 ff 	j 80002504 <__pack_f+0x26>
800025c4:	1b 04 04 30 	addi %d3,%d4,64
800025c8:	7b 00 00 24 	movh %d2,16384
800025cc:	37 03 f7 63 	extr.u %d6,%d3,7,23
800025d0:	0b 23 50 31 	ge.u %d3,%d3,%d2
800025d4:	8f 73 01 50 	sh %d5,%d3,23
800025d8:	6f 74 96 ff 	jnz.t %d4,7,80002504 <__pack_f+0x26>
800025dc:	0b 24 50 21 	ge.u %d2,%d4,%d2
800025e0:	37 04 f7 63 	extr.u %d6,%d4,7,23
800025e4:	8f 72 01 50 	sh %d5,%d2,23
800025e8:	1d ff 8e ff 	j 80002504 <__pack_f+0x26>

800025ec <__do_global_ctors_aux>:
800025ec:	91 00 00 28 	movh.a %a2,32768
800025f0:	d9 22 70 82 	lea %a2,[%a2]9776 <80002630 <__CTOR_END__>>
800025f4:	19 22 fc ff 	ld.w %d2,[%a2]-4 <7ffffffc <__CSA0_END+0xffe43fc>>
800025f8:	d9 23 fc ff 	lea %a3,[%a2]-4 <7ffffffc <__CSA0_END+0xffe43fc>>
800025fc:	df f2 0a 00 	jeq %d2,-1,80002610 <__do_global_ctors_aux+0x24>
80002600:	40 3c       	mov.aa %a12,%a3
80002602:	60 22       	mov.a %a2,%d2
80002604:	b0 cc       	add.a %a12,-4
80002606:	2d 02 00 00 	calli %a2
8000260a:	54 c2       	ld.w %d2,[%a12]
8000260c:	df f2 fb ff 	jne %d2,-1,80002602 <__do_global_ctors_aux+0x16>
80002610:	00 90       	ret 
	...

Disassembly of section .init:

80002614 <_init>:
80002614:	6d ff 4e ef 	call 800004b0 <frame_dummy>
80002618:	6d ff ea ff 	call 800025ec <__do_global_ctors_aux>
8000261c:	00 90       	ret 
	...

Disassembly of section .fini:

80002620 <_fini>:
80002620:	6d ff 16 ef 	call 8000044c <__do_global_dtors_aux>
80002624:	00 90       	ret 
	...

Disassembly of section .traptab_tc2:

801f6100 <IfxCpu_Trap_vectorTable2>:
#pragma ghs section text=".traptab_cpu2"
#endif

void IfxCpu_Trap_vectorTable2(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
801f6100:	0d 00 00 02 	svlcx 
801f6104:	02 f4       	mov %d4,%d15
801f6106:	91 00 00 28 	movh.a %a2,32768
801f610a:	d9 22 1e 71 	lea %a2,[%a2]4574 <800011de <IfxCpu_Trap_memoryManagementError>>
801f610e:	dc 02       	ji %a2
801f6110:	00 80       	rfe 
	...
801f611e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
801f6120:	0d 00 00 02 	svlcx 
801f6124:	02 f4       	mov %d4,%d15
801f6126:	91 00 00 28 	movh.a %a2,32768
801f612a:	d9 22 0c 81 	lea %a2,[%a2]4620 <8000120c <IfxCpu_Trap_internalProtectionError>>
801f612e:	dc 02       	ji %a2
801f6130:	00 80       	rfe 
	...
801f613e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
801f6140:	0d 00 00 02 	svlcx 
801f6144:	02 f4       	mov %d4,%d15
801f6146:	91 00 00 28 	movh.a %a2,32768
801f614a:	d9 22 3a 81 	lea %a2,[%a2]4666 <8000123a <IfxCpu_Trap_instructionError>>
801f614e:	dc 02       	ji %a2
801f6150:	00 80       	rfe 
	...
801f615e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
801f6160:	02 f4       	mov %d4,%d15
801f6162:	91 00 00 28 	movh.a %a2,32768
801f6166:	d9 22 28 91 	lea %a2,[%a2]4712 <80001268 <IfxCpu_Trap_contextManagementError>>
801f616a:	dc 02       	ji %a2
801f616c:	00 80       	rfe 
	...
801f617e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
801f6180:	0d 00 00 02 	svlcx 
801f6184:	02 f4       	mov %d4,%d15
801f6186:	91 00 00 28 	movh.a %a2,32768
801f618a:	d9 22 16 a1 	lea %a2,[%a2]4758 <80001296 <IfxCpu_Trap_busError>>
801f618e:	dc 02       	ji %a2
801f6190:	00 80       	rfe 
	...
801f619e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
801f61a0:	0d 00 00 02 	svlcx 
801f61a4:	02 f4       	mov %d4,%d15
801f61a6:	91 00 00 28 	movh.a %a2,32768
801f61aa:	d9 22 04 b1 	lea %a2,[%a2]4804 <800012c4 <IfxCpu_Trap_assertion>>
801f61ae:	dc 02       	ji %a2
801f61b0:	00 80       	rfe 
	...
801f61be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu2);
801f61c0:	0d 00 00 02 	svlcx 
801f61c4:	02 f4       	mov %d4,%d15
801f61c6:	91 00 00 28 	movh.a %a2,32768
801f61ca:	d9 22 10 d1 	lea %a2,[%a2]4944 <80001350 <IfxCpu_Trap_systemCall_Cpu2>>
801f61ce:	dc 02       	ji %a2
801f61d0:	00 80       	rfe 
	...
801f61de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
801f61e0:	0d 00 00 02 	svlcx 
801f61e4:	02 f4       	mov %d4,%d15
801f61e6:	91 00 00 28 	movh.a %a2,32768
801f61ea:	d9 22 3c d1 	lea %a2,[%a2]4988 <8000137c <IfxCpu_Trap_nonMaskableInterrupt>>
801f61ee:	dc 02       	ji %a2
801f61f0:	00 80       	rfe 
}
801f61f2:	00 90       	ret 

801f61f4 <IfxCpu_Trap_vectorTable2_end>:
	...

Disassembly of section .traptab_tc1:

801f6200 <IfxCpu_Trap_vectorTable1>:
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
801f6200:	0d 00 00 02 	svlcx 
801f6204:	02 f4       	mov %d4,%d15
801f6206:	91 00 00 28 	movh.a %a2,32768
801f620a:	d9 22 1e 71 	lea %a2,[%a2]4574 <800011de <IfxCpu_Trap_memoryManagementError>>
801f620e:	dc 02       	ji %a2
801f6210:	00 80       	rfe 
	...
801f621e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
801f6220:	0d 00 00 02 	svlcx 
801f6224:	02 f4       	mov %d4,%d15
801f6226:	91 00 00 28 	movh.a %a2,32768
801f622a:	d9 22 0c 81 	lea %a2,[%a2]4620 <8000120c <IfxCpu_Trap_internalProtectionError>>
801f622e:	dc 02       	ji %a2
801f6230:	00 80       	rfe 
	...
801f623e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
801f6240:	0d 00 00 02 	svlcx 
801f6244:	02 f4       	mov %d4,%d15
801f6246:	91 00 00 28 	movh.a %a2,32768
801f624a:	d9 22 3a 81 	lea %a2,[%a2]4666 <8000123a <IfxCpu_Trap_instructionError>>
801f624e:	dc 02       	ji %a2
801f6250:	00 80       	rfe 
	...
801f625e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
801f6260:	02 f4       	mov %d4,%d15
801f6262:	91 00 00 28 	movh.a %a2,32768
801f6266:	d9 22 28 91 	lea %a2,[%a2]4712 <80001268 <IfxCpu_Trap_contextManagementError>>
801f626a:	dc 02       	ji %a2
801f626c:	00 80       	rfe 
	...
801f627e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
801f6280:	0d 00 00 02 	svlcx 
801f6284:	02 f4       	mov %d4,%d15
801f6286:	91 00 00 28 	movh.a %a2,32768
801f628a:	d9 22 16 a1 	lea %a2,[%a2]4758 <80001296 <IfxCpu_Trap_busError>>
801f628e:	dc 02       	ji %a2
801f6290:	00 80       	rfe 
	...
801f629e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
801f62a0:	0d 00 00 02 	svlcx 
801f62a4:	02 f4       	mov %d4,%d15
801f62a6:	91 00 00 28 	movh.a %a2,32768
801f62aa:	d9 22 04 b1 	lea %a2,[%a2]4804 <800012c4 <IfxCpu_Trap_assertion>>
801f62ae:	dc 02       	ji %a2
801f62b0:	00 80       	rfe 
	...
801f62be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu1);
801f62c0:	0d 00 00 02 	svlcx 
801f62c4:	02 f4       	mov %d4,%d15
801f62c6:	91 00 00 28 	movh.a %a2,32768
801f62ca:	d9 22 24 c1 	lea %a2,[%a2]4900 <80001324 <IfxCpu_Trap_systemCall_Cpu1>>
801f62ce:	dc 02       	ji %a2
801f62d0:	00 80       	rfe 
	...
801f62de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
801f62e0:	0d 00 00 02 	svlcx 
801f62e4:	02 f4       	mov %d4,%d15
801f62e6:	91 00 00 28 	movh.a %a2,32768
801f62ea:	d9 22 3c d1 	lea %a2,[%a2]4988 <8000137c <IfxCpu_Trap_nonMaskableInterrupt>>
801f62ee:	dc 02       	ji %a2
801f62f0:	00 80       	rfe 
}
801f62f2:	00 90       	ret 

801f62f4 <IfxCpu_Trap_vectorTable1_end>:
	...

Disassembly of section .inttab_tc0_064:

801f4c80 <__intvec_tc0_100>:
801f4c80:	0d 00 00 02 	svlcx 
801f4c84:	91 00 00 e8 	movh.a %a14,32768
801f4c88:	d9 ee 4c 70 	lea %a14,[%a14]1484 <800005cc <ISR_STM>>
801f4c8c:	dc 0e       	ji %a14
